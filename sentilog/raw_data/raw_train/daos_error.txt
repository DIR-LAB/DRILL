./src/vea/vea_alloc.c:		D_ERROR("failed to find extent ["DF_U64", %u]\n",
./src/vea/vea_alloc.c:		D_ERROR("mismatched extent ["DF_U64", %u] ["DF_U64", %u]\n",
./src/vea/vea_hint.c:		D_ERROR("unexpected persistent hint "DF_U64" > "DF_U64"\n",
./src/vea/vea_hint.c:	D_ERROR("unexpected transient hint "DF_U64" ["DF_U64", "DF_U64"]\n",
./src/vea/vea_hint.c:	D_ERROR("unexpected persistent hint "DF_U64", ["DF_U64", "DF_U64"]\n",
./src/vea/vea_free.c:			D_ERROR("Failed to insert heap: %d\n", rc);
./src/vea/vea_free.c:			D_ERROR("unexpected adjacent extents:"
./src/vea/vea_free.c:					D_ERROR("Failed to delete: %d\n", rc);
./src/vea/vea_free.c:			D_ERROR("Failed add ptr into tx: %d\n", rc);
./src/vea/vea_free.c:			D_ERROR("Remove ["DF_U64", %u] from aggregated "
./src/vea/vea_free.c:				D_ERROR("Compound free ["DF_U64", %u] error: "
./src/vea/vea_free.c:			D_ERROR("Unmap ["DF_U64", "DF_U64"] error: %d\n",
./src/vea/vea_free.c:			D_ERROR("Compound free ["DF_U64", %u] error: %d\n",
./src/vea/vea_free.c:		D_ERROR("Add transaction end callback error "DF_RC"\n",
./src/vea/vea_api.c:			D_ERROR("destroy free extent tree error: "DF_RC"\n",
./src/vea/vea_api.c:			D_ERROR("destroy vector tree error: "DF_RC"\n",
./src/vea/vea_api.c:		D_ERROR("Capacity "DF_U64" is too large.\n", capacity);
./src/vos/vos_query.c:		D_ERROR("Ambiguous query.  Please select either VOS_GET_MAX"
./src/vos/vos_query.c:		D_ERROR("No query type.  Please select either VOS_GET_MAX"
./src/vos/vos_query.c:		D_ERROR("No tree queried.  Please select one or more of"
./src/vos/vos_query.c:			D_ERROR("dkey can't be NULL with VOS_GET_DKEY\n");
./src/vos/vos_query.c:			D_ERROR("akey can't be NULL with VOS_GET_AKEY\n");
./src/vos/vos_query.c:			D_ERROR("recx can't be NULL with VOS_GET_RECX\n");
./src/vos/vos_query.c:		D_ERROR("Failed to allocate timestamp set: "DF_RC"\n",
./src/vos/vos_query.c:		D_ERROR("Only integer dkey supported for query\n");
./src/vos/vos_query.c:		D_ERROR("Only integer akey supported for query\n");
./src/vos/evtree.c:		D_ERROR("Failed to setup mem class %d: "DF_RC"\n", uma->uma_id,
./src/vos/evtree.c:			D_ERROR("Mixing pools in same evtree not allowed\n");
./src/vos/evtree.c:		D_ERROR("Bad sort policy specified: %#x\n", policy);
./src/vos/evtree.c:	D_ERROR("Failed to release entry: %s\n", d_errstr(rc));
./src/vos/evtree.c:				D_ERROR("destroy failed: %s\n", d_errstr(rc));
./src/vos/evtree.c:	D_ERROR("Failed to insert entry to level %d: "DF_RC"\n", level,
./src/vos/evtree.c:		D_ERROR("Variable record size not supported in evtree:"
./src/vos/evtree.c:		D_ERROR("Extent is too large\n");
./src/vos/evtree.c:		D_ERROR("Unknown feature bits "DF_X64"\n", feats);
./src/vos/evtree.c:		D_ERROR("Invalid tree order %d\n", order);
./src/vos/evtree.c:		D_ERROR("ent_array_fill failed: "DF_RC"\n", DP_RC(rc));
./src/vos/evtree.c:			D_ERROR("Removing partial extents not allowed:"
./src/vos/evtree.c:			D_ERROR("Failed to delete "DF_RECT"\n",
./src/vos/evtree.c:		D_ERROR("Issue copying checksum. Source (%d) is "
./src/vos/evtree.c:		D_ERROR("Invalid ovhd argument\n");
./src/vos/vos_space.c:	D_ERROR("Pool:"DF_UUID" Too large reserved size. SCM: tot["DF_U64"], "
./src/vos/vos_space.c:		D_ERROR("Query pool:"DF_UUID" SCM space failed. "DF_RC"\n",
./src/vos/vos_space.c:		D_ERROR("Query pool:"DF_UUID" NVMe space failed. "DF_RC"\n",
./src/vos/vos_space.c:		D_ERROR("Query pool:"DF_UUID" space failed. "DF_RC"\n",
./src/vos/vos_space.c:	D_ERROR("Pool:"DF_UUID" is full. SCM: free["DF_U64"], sys["DF_U64"], "
./src/vos/sys_db.c:		D_ERROR("Generate sysdb path failed. %d\n", rc);
./src/vos/sys_db.c:		D_ERROR("Generate sysdb filename failed. %d\n", rc);
./src/vos/sys_db.c:			D_ERROR("Failed to open/create(%d) sys DB: "DF_RC"\n",
./src/vos/vos_gc.c:	D_ERROR("Failed to drain %s btree: %s\n", gc->gc_name, d_errstr(rc));
./src/vos/vos_gc.c:	D_ERROR("Failed to drain evtree %s: %s\n", gc->gc_name, d_errstr(rc));
./src/vos/vos_gc.c:		D_ERROR("%s drain failed: "DF_RC"\n", gc->gc_name, DP_RC(rc));
./src/vos/vos_gc.c:		D_ERROR("Failed to start transacton for "DF_UUID": %s\n",
./src/vos/vos_gc.c:			D_ERROR("GC=%s error=%s\n", gc->gc_name, d_errstr(rc));
./src/vos/vos_gc.c:		D_ERROR("Invalid credits=%d\n", creds);
./src/vos/vos_gc.c:			D_ERROR("GC pool="DF_UUID" error=%s\n",
./src/vos/vos_gc.c:			D_ERROR("GC pool failed: %s\n", d_errstr(rc));
./src/vos/vos_ilog.c:		D_ERROR("Check failed: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_ilog.c:		D_ERROR("Could not open incarnation log: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_ilog.c:		D_ERROR("Could not update ilog %p at "DF_X64": "DF_RC"\n",
./src/vos/vos_ilog.c:		D_ERROR("Check failed: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_ilog.c:		D_ERROR("Could not open incarnation log: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_ilog.c:		D_ERROR("Failed to initialize incarnation log globals\n");
./src/vos/tests/vts_pool.c:			D_ERROR("Removing %s failed\n",
./src/vos/tests/vts_array.c:		D_ERROR("Failed to create array: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_common.c:			D_ERROR("Error on block ["DF_U64", %u] free. "DF_RC"\n",
./src/vos/vos_common.c:		D_ERROR("Error in creating object cache\n");
./src/vos/vos_common.c:		D_ERROR("Error in creating POOL ref hash: "DF_RC"\n",
./src/vos/vos_common.c:		D_ERROR("Error in creating CONT ref hash: "DF_RC"\n",
./src/vos/vos_common.c:		D_ERROR("Error in creating txd: %d\n", rc);
./src/vos/vos_common.c:		D_ERROR("Error in creating timestamp table: %d\n", rc);
./src/vos/vos_common.c:		D_ERROR("VOS CI btree initialization error\n");
./src/vos/vos_common.c:		D_ERROR("DTX btree initialization error\n");
./src/vos/vos_common.c:		D_ERROR("VOS OI btree initialization error\n");
./src/vos/vos_common.c:		D_ERROR("Failed to register vos trees\n");
./src/vos/vos_common.c:		D_ERROR("Failed to initialize incarnation log capability\n");
./src/vos/vos_iterator.c:		D_ERROR("nested iterator prepare isn't supported for %s",
./src/vos/vos_iterator.c:		D_ERROR("Please call vos_iter_probe to initialize cursor\n");
./src/vos/vos_iterator.c:		D_ERROR("Failed to prepare %s iterator: %d\n", dict->id_name,
./src/vos/vos_iterator.c:		D_ERROR("Argument 'ih' is invalid to vos_iter_param\n");
./src/vos/vos_iterator.c:		D_ERROR("No valid handle specified in vos_iter_param\n");
./src/vos/vos_iterator.c:		D_ERROR("Can't find iterator type %d\n", type);
./src/vos/vos_iterator.c:		D_ERROR("Please call vos_iter_probe to initialize cursor\n");
./src/vos/vos_dtx.c:		D_ERROR("Hit uncommitted DTX "DF_DTI" at %d: lid=%d, "
./src/vos/vos_dtx.c:		D_ERROR("Failed to register DTX active dbtree: %d\n", rc);
./src/vos/vos_dtx.c:		D_ERROR("Failed to register DTX committed dbtree: %d\n", rc);
./src/vos/vos_dtx.c:		D_ERROR("Unknown DTX "DF_DTI" type %u\n",
./src/vos/vos_dtx.c:			D_ERROR("NOT allow to commit an aborted DTX "DF_DTI"\n",
./src/vos/vos_dtx.c:		D_ERROR("NOT allow to abort a committed DTX "DF_DTI"\n",
./src/vos/vos_dtx.c:		D_ERROR("No space when create actvie DTX table.\n");
./src/vos/vos_dtx.c:		D_ERROR("Unexpected DTX type %u\n", type);
./src/vos/vos_dtx.c:			D_ERROR("No space to store DTX mbs "
./src/vos/vos_dtx.c:			D_ERROR("No space to store active DTX "DF_DTI"\n",
./src/vos/vos_dtx.c:			D_ERROR("Not enough DRAM to commit "DF_DTI"\n",
./src/vos/vos_dtx.c:		D_ERROR("No space to store committed DTX %d "DF_DTI"\n",
./src/vos/vos_dtx.c:			D_ERROR("Not enough DRAM to commit "DF_DTI"\n",
./src/vos/vos_dtx.c:		D_ERROR(DF_UOID" fail to mark sync: rc = "DF_RC"\n",
./src/vos/vos_dtx.c:				D_ERROR("Corruption in DTX table found, lid=%d"
./src/vos/vos_dtx.c:					D_ERROR("Not enough memory for DTX "
./src/vos/vos_dtx.c:					D_ERROR("Corruption in DTX table found,"
./src/vos/vos_dtx.c:			D_ERROR("Fail to remove DTX entry "DF_DTI":"DF_RC"\n",
./src/vos/vos_dtx.c:		D_ERROR("Failed to pin DTX entry for "DF_DTI": "DF_RC"\n",
./src/vos/vos_dtx.c:		D_ERROR("Failed to re-create DTX active array: "DF_RC"\n",
./src/vos/vos_dtx.c:		D_ERROR("Failed to re-create DTX active btree: "DF_RC"\n",
./src/vos/vos_dtx.c:		D_ERROR("Failed to re-create DTX committed btree: "DF_RC"\n",
./src/vos/vos_dtx.c:		D_ERROR("Fail to reindex active DTX table: "DF_RC"\n",
./src/vos/vos_dtx.c:			D_ERROR("Fail to reindex committed DTX table: "
./src/vos/ilog.c:		D_ERROR("Failed to register incarnation log entry: "DF_RC"\n",
./src/vos/ilog.c:		D_ERROR("Failed to deregister incarnation log entry: "DF_RC"\n",
./src/vos/ilog.c:		D_ERROR("Failed to register incarnation log btree class: %s\n",
./src/vos/ilog.c:			D_ERROR("Failed to add to undo log: "DF_RC"\n",
./src/vos/ilog.c:		D_ERROR("Could not allocate memory for open incarnation log\n");
./src/vos/ilog.c:		D_ERROR("Failed to start PMDK transaction: rc = %s\n",
./src/vos/ilog.c:		D_ERROR("Failed to add to undo log\n");
./src/vos/ilog.c:		D_ERROR("Failed to start PMDK transaction: rc = %s\n",
./src/vos/ilog.c:			D_ERROR("Could not open incarnation log tree:"
./src/vos/ilog.c:			D_ERROR("Could not destroy incarnation log tree:"
./src/vos/ilog.c:		D_ERROR("Failed to start PMDK transaction: rc = %s\n",
./src/vos/ilog.c:		D_ERROR("Failed to create an incarnation log tree: rc = %s\n",
./src/vos/ilog.c:		D_ERROR("Failed to add entry to incarnation log: %s\n",
./src/vos/ilog.c:		D_ERROR("Failed to add entry to incarnation log: %s\n",
./src/vos/ilog.c:		D_ERROR("Matching punch/update minor epoch not allowed\n");
./src/vos/ilog.c:		D_ERROR("dbtree_fetch failed: rc = %s\n", d_errstr(rc));
./src/vos/ilog.c:		D_ERROR("Could not destroy table: rc = %s\n", d_errstr(rc));
./src/vos/ilog.c:		D_ERROR("Failed to open incarnation log tree: rc = %s\n",
./src/vos/ilog.c:		D_ERROR("Fetch of ilog entry failed: rc = %s\n", d_errstr(rc));
./src/vos/ilog.c:		D_ERROR("Failed to update incarnation log: rc = %s\n",
./src/vos/ilog.c:		D_ERROR("Invalid log handle\n");
./src/vos/ilog.c:		D_ERROR("Failed to open ilog tree: rc = %s\n", d_errstr(rc));
./src/vos/ilog.c:		D_ERROR("Failed to open ilog iterator: rc = %s\n",
./src/vos/ilog.c:		D_ERROR("No memory available for iterating ilog\n");
./src/vos/ilog.c:		D_ERROR("Error probing ilog: "DF_RC"\n", DP_RC(rc));
./src/vos/ilog.c:			D_ERROR("Error fetching ilog entry from tree:"
./src/vos/ilog.c:		D_ERROR("Could not remove entry from tree: "DF_RC"\n",
./src/vos/ilog.c:		D_ERROR("Failed to open incarnation log tree: "DF_RC
./src/vos/ilog.c:		D_ERROR("Invalid log handle\n");
./src/vos/vos_io.c:		D_ERROR(DF_UUID": Init dedup hash failed. "DF_RC".\n",
./src/vos/vos_io.c:		D_ERROR("Failed to allocate dedup entry\n");
./src/vos/vos_io.c:		D_ERROR("Failed to allocate csum buf "DF_U64"\n", csum_len);
./src/vos/vos_io.c:		D_ERROR("Insert dedup entry failed. "DF_RC"\n", DP_RC(rc));
./src/vos/vos_io.c:		D_ERROR("Invalid iod_nr (0).\n");
./src/vos/vos_io.c:			D_ERROR("Invalid iod_nr=%d, iod_type %d.\n",
./src/vos/vos_io.c:				D_ERROR("Checksum found in some entries, "
./src/vos/vos_io.c:			D_ERROR("Cannot support mixed record size "
./src/vos/vos_io.c:		D_ERROR("Failed to update subtree: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_io.c:		D_ERROR("Error preparing dkey tree: rc="DF_RC"\n", DP_RC(rc));
./src/vos/vos_io.c:		D_ERROR("Reserve "DF_U64" from SCM failed.\n", size);
./src/vos/vos_io.c:		D_ERROR("Reserve "DF_U64" from NVMe failed. "DF_RC"\n",
./src/vos/vos_io.c:		D_ERROR("Reserve SCM for SV failed. "DF_RC"\n", DP_RC(rc));
./src/vos/vos_io.c:			D_ERROR("Reserve NVMe for SV failed. "DF_RC"\n",
./src/vos/vos_io.c:		D_ERROR("Reserve recx failed. "DF_RC"\n", DP_RC(rc));
./src/vos/vos_io.c:		D_ERROR("Invalid sv iod_nr=%d\n", iod->iod_nr);
./src/vos/vos_io.c:		D_ERROR("Error on %s NVMe reservations. "DF_RC"\n",
./src/vos/vos_io.c:		D_ERROR("Detected duplicate akeys, operation not allowed\n");
./src/vos/vos_io.c:		D_ERROR(DF_UOID": Hold space failed. "DF_RC"\n",
./src/vos/vos_io.c:		D_ERROR(DF_UOID"dkey update begin failed. %d\n", DP_UOID(oid),
./src/vos/vos_io.c:		D_ERROR("Invalid SGL index %d >= %d\n",
./src/vos/vos_io.c:			D_ERROR("Failed to alloc "DF_U64" bytes SCM\n",
./src/vos/vos_io.c:		D_ERROR("Update "DF_UOID" failed "DF_RC"\n", DP_UOID(oid),
./src/vos/vos_io.c:			D_ERROR("Copy "DF_UOID" failed "DF_RC"\n", DP_UOID(oid),
./src/vos/vos_io.c:		D_ERROR("Update "DF_UOID" failed "DF_RC"\n", DP_UOID(oid),
./src/vos/vos_io.c:			D_ERROR("Copy "DF_UOID" failed "DF_RC"\n",
./src/vos/vos_pool.c:			D_ERROR("Closing VOS I/O context:%p pool:"DF_UUID" : "
./src/vos/vos_pool.c:		D_ERROR("uuid hash table insert failed: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_pool.c:		D_ERROR("Failed to create an I/O context for writing blob "
./src/vos/vos_pool.c:		D_ERROR("Failed to write header for blob:"DF_U64" : "DF_RC"\n",
./src/vos/vos_pool.c:		D_ERROR("Failed to free I/O context: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_pool.c:		D_ERROR("Failed to unmap blob\n");
./src/vos/vos_pool.c:		D_ERROR("File not accessible (%d) when size is 0\n", errno);
./src/vos/vos_pool.c:		D_ERROR("Failed to create pool %s, size="DF_U64", errno=%d\n",
./src/vos/vos_pool.c:		D_ERROR("Enable SCM usage statistics failed. "DF_RC"\n",
./src/vos/vos_pool.c:		D_ERROR("Initialize pool root error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_pool.c:		D_ERROR("Error creating blob for xs:%p pool:"DF_UUID" "
./src/vos/vos_pool.c:		D_ERROR("Format blob error for xs:%p pool:"DF_UUID" "DF_RC"\n",
./src/vos/vos_pool.c:			D_ERROR("Open reference exists, force kill\n");
./src/vos/vos_pool.c:		D_ERROR("Open reference exists, cannot kill pool\n");
./src/vos/vos_pool.c:			D_ERROR("Destroy blob for pool="DF_UUID" rc=%s\n",
./src/vos/vos_pool.c:			D_ERROR("Failed to open %s: %d\n", path, errno);
./src/vos/vos_pool.c:			D_ERROR("Failed to mmap %s, len:%d: %d\n", path, len,
./src/vos/vos_pool.c:			D_ERROR("Failed to munmap %s: %d\n", path, errno);
./src/vos/vos_pool.c:			D_ERROR("Failure deleting file from PMEM: %s\n",
./src/vos/vos_pool.c:		D_ERROR("Invalid slab ID: %d\n", id);
./src/vos/vos_pool.c:			D_ERROR("Failed to get unit size %d. rc:%d\n", i, rc);
./src/vos/vos_pool.c:			D_ERROR("Failed to register VOS slab %d. rc:%d\n",
./src/vos/vos_pool.c:		D_ERROR("Invalid parameters.\n");
./src/vos/vos_pool.c:		D_ERROR("Error allocating pool handle\n");
./src/vos/vos_pool.c:		D_ERROR("Error in opening the pool "DF_UUID": %s\n",
./src/vos/vos_pool.c:		D_ERROR("Register slabs failed. rc:%d\n", rc);
./src/vos/vos_pool.c:		D_ERROR("Failed to instantiate umem: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_pool.c:		D_ERROR("Enable SCM usage statistics failed. rc:%d\n",
./src/vos/vos_pool.c:		D_ERROR("Unsupported DF version %x\n", pool_df->pd_version);
./src/vos/vos_pool.c:		D_ERROR("Mismatch uuid, user="DF_UUIDF", pool="DF_UUIDF"\n",
./src/vos/vos_pool.c:		D_ERROR("Container Tree open failed\n");
./src/vos/vos_pool.c:		D_ERROR("Failed to open VOS I/O context for xs:%p "
./src/vos/vos_pool.c:			D_ERROR("Failed to load block space info: "DF_RC"\n",
./src/vos/vos_pool.c:		D_ERROR("Error inserting into vos DRAM hash\n");
./src/vos/vos_pool.c:		D_ERROR("Cannot close a NULL handle\n");
./src/vos/vos_pool.c:		D_ERROR("Query pool "DF_UUID" failed. "DF_RC"\n",
./src/vos/vos_dtx_iter.c:			D_ERROR("oid_iter_fini failed: rc = "DF_RC"\n",
./src/vos/vos_dtx_iter.c:		D_ERROR("Expected Type: %d, got %d\n", VOS_ITER_DTX, type);
./src/vos/vos_dtx_iter.c:		D_ERROR("Failed to prepare DTX iteration: rc = "DF_RC"\n",
./src/vos/vos_dtx_iter.c:		D_ERROR("Error while fetching DTX info: rc = "DF_RC"\n",
./src/vos/vos_dtx_iter.c:		D_ERROR("Failed to delete DTX entry: rc = "DF_RC"\n",
./src/vos/vos_obj_cache.c:		D_ERROR("Error in creating lru cache: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("Error preparing dkey: rc="DF_RC"\n",
./src/vos/vos_obj.c:		D_ERROR("Failed to hold object: %s\n", d_errstr(rc));
./src/vos/vos_obj.c:		D_ERROR("Failed to delete object: %s\n", d_errstr(rc));
./src/vos/vos_obj.c:		D_ERROR("object hold error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("memory TX start error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("init dkey tree error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:			D_ERROR("open akey tree error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("delete key error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("Cannot load the prepare key tree: "DF_RC"\n",
./src/vos/vos_obj.c:		D_ERROR("Could not fetch key: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("Cannot support epoch range for conditional iteration "
./src/vos/vos_obj.c:		D_ERROR("unknown iterator type %d.\n", type);
./src/vos/vos_obj.c:		D_ERROR("Iterator type has no subtree\n");
./src/vos/vos_obj.c:			D_ERROR("Invalid nested iterator type for "
./src/vos/vos_obj.c:			D_ERROR("Invalid nested iterator type for "
./src/vos/vos_obj.c:		D_ERROR("Could not hold object: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj.c:		D_ERROR("unknown iterator type %d.\n", type);
./src/vos/vos_container.c:		D_ERROR("dbtree create failed\n");
./src/vos/vos_container.c:		D_ERROR("UHASH table container handle insert failed\n");
./src/vos/vos_container.c:		D_ERROR("Empty pool handle?\n");
./src/vos/vos_container.c:		D_ERROR("Container already exists\n");
./src/vos/vos_container.c:		D_ERROR("Empty pool handle?\n");
./src/vos/vos_container.c:		D_ERROR("Error in allocating container handle\n");
./src/vos/vos_container.c:		D_ERROR("No Object handle, Tree open failed\n");
./src/vos/vos_container.c:		D_ERROR("Failed to create DTX active array: rc = "DF_RC"\n",
./src/vos/vos_container.c:		D_ERROR("Failed to create DTX active btree: rc = "DF_RC"\n",
./src/vos/vos_container.c:		D_ERROR("Failed to create DTX committed btree: rc = "DF_RC"\n",
./src/vos/vos_container.c:				D_ERROR("Error loading allocator %d hint "
./src/vos/vos_container.c:		D_ERROR("Fail to reindex active DTX entries: %d\n", rc);
./src/vos/vos_container.c:		D_ERROR("Error inserting vos container handle to uuid hash\n");
./src/vos/vos_container.c:		D_ERROR("Cannot close a NULL handle\n");
./src/vos/vos_container.c:		D_ERROR("Empty container handle for querying?\n");
./src/vos/vos_container.c:		D_ERROR("Empty container handle for ctl\n");
./src/vos/vos_container.c:		D_ERROR("Empty pool handle for destroying container?\n");
./src/vos/vos_container.c:			D_ERROR("Open reference exists for cont "DF_UUID
./src/vos/vos_container.c:		D_ERROR("Failed to start pmdk transaction: "DF_RC"\n",
./src/vos/vos_container.c:		D_ERROR("Failed to end pmdk transaction: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_container.c:		D_ERROR("dbtree create failed\n");
./src/vos/vos_container.c:			D_ERROR("co_iter_fini failed: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_container.c:		D_ERROR("Expected Type: %d, got %d\n",
./src/vos/vos_container.c:		D_ERROR("Error while fetching co info: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_tree.c:		D_ERROR("Failure to create incarnation log\n");
./src/vos/vos_tree.c:			D_ERROR("Mixing single value and array not allowed\n");
./src/vos/vos_tree.c:			D_ERROR("Failed to open tree: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_tree.c:			D_ERROR("Failed to add key record to transaction,"
./src/vos/vos_tree.c:			D_ERROR("Failed to create evtree: "DF_RC"\n",
./src/vos/vos_tree.c:			D_ERROR("Failed to create btree: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_tree.c:		D_ERROR("fetch failed: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_tree.c:			D_ERROR("Failed to upsert: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_tree.c:			D_ERROR("Failed to register %s: "DF_RC"\n", ta->ta_name,
./src/vos/evt_iter.c:	D_ERROR("EVT_ITER_SKIP_HOLES is only valid with EVT_ITER_VISIBLE\n");
./src/vos/evt_iter.c:			D_ERROR("Cannot share embedded iterator\n");
./src/vos/evt_iter.c:		D_ERROR("Unknown op code for evt iterator: %d\n", opc);
./src/vos/vos_aggregate.c:		D_ERROR("Failed to delete entry: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:		D_ERROR("Failed to delete SV entry: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:			D_ERROR("Reserve "DF_U64" from SCM failed.\n", size);
./src/vos/vos_aggregate.c:		D_ERROR("Reserve "DF_U64" from NVMe failed. "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("Init bsgl error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:			D_ERROR("Extend bsgl error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:		D_ERROR("Readv for "DF_RECT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:			D_ERROR("CSUM verify error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:		D_ERROR("Reserve "DF_U64" segment error: "DF_RC"\n", seg_size,
./src/vos/vos_aggregate.c:		D_ERROR("Write "DF_RECT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:			D_ERROR("Fill seg %u-%u %p "DF_RECT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("Publish SCM extents error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:			D_ERROR("Delete "DF_RECT" pe_off:"
./src/vos/vos_aggregate.c:			D_ERROR("Insert segment "DF_RECT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("Publish NVMe extents error: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:		D_ERROR("Prepare segments "DF_EXT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("Fill segments "DF_EXT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("Insert segments "DF_EXT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("Delete %s EV entry "DF_RECT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:			D_ERROR("Flush window "DF_EXT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:			D_ERROR("Enqueue phy_ent win:"DF_EXT", ent:"DF_EXT" "
./src/vos/vos_aggregate.c:			D_ERROR("Enqueue lgc_ent win: "DF_EXT", ent:"DF_EXT" "
./src/vos/vos_aggregate.c:			D_ERROR("Flush window "DF_EXT" error: "DF_RC"\n",
./src/vos/vos_aggregate.c:		D_ERROR("VOS aggregation failed: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_aggregate.c:		D_ERROR("VOS aggregation failed: %d\n", rc);
./src/vos/vos_aggregate.c:			D_ERROR(DF_CONT": Already in discard\n",
./src/vos/vos_aggregate.c:			D_ERROR(DF_CONT": Aggregate epr["DF_U64", "DF_U64"], "
./src/vos/vos_aggregate.c:			D_ERROR(DF_CONT": Already in aggregation\n",
./src/vos/vos_aggregate.c:			D_ERROR(DF_CONT": Discard epr["DF_U64", "DF_U64"], "
./src/vos/vos_obj_index.c:		D_ERROR("Failure to create incarnation log: "DF_RC"\n",
./src/vos/vos_obj_index.c:		D_ERROR("Failed to destroy incarnation log: "DF_RC"\n",
./src/vos/vos_obj_index.c:		D_ERROR("Failed to update Key for Object index\n");
./src/vos/vos_obj_index.c:		D_ERROR("Failed to delete object, "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj_index.c:			D_ERROR("oid_iter_fini failed:"DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj_index.c:		D_ERROR("Error while fetching oid info: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj_index.c:		D_ERROR("Expected Type: %d, got %d\n",
./src/vos/vos_obj_index.c:			D_ERROR("Error while fetching oid info: "DF_RC"\n",
./src/vos/vos_obj_index.c:		D_ERROR("Failed to delete oid entry: "DF_RC"\n", DP_RC(rc));
./src/vos/vos_obj_index.c:			D_ERROR("Removing orphaned dkey tree\n");
./src/vos/vos_obj_index.c:			D_ERROR("Could not evict object "DF_UOID" "DF_RC"\n",
./src/vos/vos_obj_index.c:		D_ERROR("dbtree create failed\n");
./src/gurt/fault_inject.c:		D_ERROR("Can't destroy spinlock for fault id: %d\n",
./src/gurt/fault_inject.c:		D_ERROR("fault id: %u not set.\n", fault_id);
./src/gurt/fault_inject.c:			D_ERROR("yaml_parser_parse() failed. rc: %d\n",
./src/gurt/fault_inject.c:			D_ERROR("Unknown element.\n");
./src/gurt/fault_inject.c:			D_ERROR("yaml_parser_parse() failed. rc: %d\n",
./src/gurt/fault_inject.c:			D_ERROR("Unknown element.\n");
./src/gurt/fault_inject.c:			D_ERROR("Unknown key: %s\n", key_str);
./src/gurt/fault_inject.c:		D_ERROR("Fault config file item missing ID field.\n");
./src/gurt/fault_inject.c:		D_ERROR("d_set_fault_attr(%u) failed, rc %d\n", attr.fa_id,
./src/gurt/fault_inject.c:			D_ERROR("yaml_parser_parse() failed. rc: %d\n",
./src/gurt/fault_inject.c:				D_ERROR("yaml_parser_parse() failed. "
./src/gurt/fault_inject.c:		D_ERROR("yaml_parser_parse() failed. rc: %d\n", yaml_rc);
./src/gurt/fault_inject.c:		D_ERROR("d_hash_table_create_inplace() failed, rc: %d.\n", rc);
./src/gurt/fault_inject.c:		D_ERROR("failed to destroy fault attr data. force: %d, "
./src/gurt/fault_inject.c:		D_ERROR("Failed to open file %s (%s).\n",
./src/gurt/fault_inject.c:		D_ERROR("Failed to initialize yaml parser. rc: %d\n", yaml_rc);
./src/gurt/fault_inject.c:			D_ERROR("yaml_parser_parse() failed. rc: %d\n",
./src/gurt/fault_inject.c:				D_ERROR("fault_attr_parse() failed. rc %d\n",
./src/gurt/fault_inject.c:				D_ERROR("seed_parse() failed. rc %d\n", rc);
./src/gurt/fault_inject.c:			D_ERROR("unknown key: %s\n", event.data.scalar.value);
./src/gurt/fault_inject.c:		D_ERROR("Failed to parse fault config file.\n");
./src/gurt/fault_inject.c:		D_ERROR("No fault config file.\n");
./src/gurt/fault_inject.c:		D_ERROR("fault injection not initialized.\n");
./src/gurt/heap.c:		D_ERROR("invalid parameter, should pass in valid ops table.\n");
./src/gurt/heap.c:		D_ERROR("invalid parameter of NULL heap pointer.\n");
./src/gurt/heap.c:			D_ERROR("d_binheap_grow() failed, " DF_RC "\n",
./src/gurt/heap.c:		D_ERROR("dbg_lock_init() failed, " DF_RC "\n", DP_RC(rc));
./src/gurt/heap.c:		D_ERROR("invalid parameter, should pass in valid ops table.\n");
./src/gurt/heap.c:		D_ERROR("invalid parameter of NULL heap 2nd level pointer.\n");
./src/gurt/heap.c:		D_ERROR("d_binheap_create() failed, " DF_RC "\n", DP_RC(rc));
./src/gurt/heap.c:		D_ERROR("ignore invalid parameter of NULL heap.\n");
./src/gurt/heap.c:		D_ERROR("ignore invalid parameter of NULL heap.\n");
./src/gurt/heap.c:		D_ERROR("ignore NULL heap.\n");
./src/gurt/heap.c:		D_ERROR("invalid parameter of NULL h or e.\n");
./src/gurt/heap.c:			D_ERROR("d_binheap_grow() failed, " DF_RC "\n",
./src/gurt/heap.c:			D_ERROR("d_bh_ops->hop_enter() failed, " DF_RC "\n",
./src/gurt/heap.c:		D_ERROR("invalid parameter of NULL h or e.\n");
./src/gurt/heap.c:		D_ERROR("ignore NULL heap.\n");
./src/gurt/errno.c:		D_ERROR("No memory to register error code range %d - %d\n",
./src/gurt/errno.c:	D_ERROR("Attempted to deregister non-existent error range from %d\n",
./src/gurt/tests/test_gurt.c:#ifndef TEST_OLD_ERROR
./src/gurt/tests/test_gurt.c:#ifdef TEST_OLD_ERROR
./src/gurt/tests/test_gurt.c:		D_ERROR("Unable to get debug bit mask for trace\n");
./src/gurt/tests/test_gurt.c:		D_ERROR("Unable to get debug bit mask for test\n");
./src/gurt/telemetry.c:	D_ERROR("Failed to add metric [%s]: " DF_RC "\n", name, DP_RC(rc));
./src/gurt/telemetry.c:		D_ERROR("Mutex init failure: " DF_RC "\n", DP_RC(rc));
./src/gurt/telemetry.c:	D_ERROR("Failed to initialize telemetry and metrics for ID %u: "
./src/gurt/telemetry.c:		D_ERROR("Unable to detach from shared memory segment.  "
./src/gurt/telemetry.c:			D_ERROR("Unable to remove shared memory segment.  "
./src/gurt/telemetry.c:			D_ERROR("Failed to destroy mutex for node [%s]: "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and incremement counter [%s]: "
./src/gurt/telemetry.c:		D_ERROR("Failed to increment counter [%s] on item not a "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and record timestamp [%s]: "
./src/gurt/telemetry.c:		D_ERROR("Failed to record timestamp [%s] on item not a "
./src/gurt/telemetry.c:			D_ERROR("Invalid clk_id for [%s] "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and record high resolution timer"
./src/gurt/telemetry.c:		D_ERROR("Failed to record high resolution timer [%s] on item "
./src/gurt/telemetry.c:			D_ERROR("Invalid clk_id for [%s] "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and mark duration start [%s]: "
./src/gurt/telemetry.c:		D_ERROR("Failed to mark duration start [%s] on item "
./src/gurt/telemetry.c:		D_ERROR("Failed to mark duration end [%s].  "
./src/gurt/telemetry.c:		D_ERROR("Failed to mark duration end [%s] on item "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and set gauge [%s]: "
./src/gurt/telemetry.c:		D_ERROR("Failed to set gauge [%s] on item "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and incremement gauge [%s]: "
./src/gurt/telemetry.c:		D_ERROR("Failed to increment gauge [%s] on item "
./src/gurt/telemetry.c:			D_ERROR("Failed to add and decrement gauge [%s]: "
./src/gurt/telemetry.c:		D_ERROR("Failed to decrement gauge [%s] on item "
./src/gurt/telemetry.c:		D_ERROR("Failed to get mutex: " DF_RC "\n", DP_RC(rc));
./src/gurt/telemetry.c:			D_ERROR("pthread_mutexattr_init failed: " DF_RC "\n",
./src/gurt/telemetry.c:			D_ERROR("pthread_mutexattr_setpshared failed: "
./src/gurt/telemetry.c:			D_ERROR("Mutex init failed: " DF_RC "\n", DP_RC(rc));
./src/gurt/telemetry.c:	D_ERROR("Failed to add metric [%s]: " DF_RC "\n", path, DP_RC(rc));
./src/gurt/telemetry.c:		D_ERROR("Failed to get mutex: " DF_RC "\n", DP_RC(rc));
./src/gurt/telemetry.c:	D_ERROR("Failed to histogram for [%s]: " DF_RC "\n", path, DP_RC(rc));
./src/gurt/telemetry.c:		D_ERROR("Unable to allocate shared memory.  shmget failed, "
./src/gurt/telemetry.c:		D_ERROR("Unable to allocate shared memory.  shmat failed, "
./src/gurt/telemetry.c:		D_ERROR("Unable to access shared memory.  shmget failed, "
./src/gurt/telemetry.c:		D_ERROR("Unable to access shared memory.  shmat failed, "
./src/gurt/hash.c:		D_ERROR("d_hash_table %p not initialized (NULL buckets).\n",
./src/gurt/hash.c:		D_ERROR("invalid parameter, NULL cb.\n");
./src/gurt/hash.c:		D_ERROR("d_hash_table %p not initialized (NULL buckets).\n",
./src/gurt/hash.c:		D_ERROR("d_hash_table %p not empty with non-ptr objects.\n",
./src/gurt/hash.c:			D_ERROR("invalid PTR type key being lookup in a "
./src/gurt/hash.c:			D_ERROR("invalid PTR type key.\n");
./src/gurt/hash.c:			D_ERROR("invalid PTR type key being lookup in a "
./src/gurt/hash.c:		D_ERROR("Error Inserting handle in UUID in-memory hash\n");
./src/gurt/misc.c:		D_ERROR("Invalid parameter, dst: %p, src: %p.\n", dst, src);
./src/gurt/misc.c:		D_ERROR("d_rank_list_dup() failed, "DF_RC"\n", DP_RC(rc));
./src/gurt/misc.c:		D_ERROR("Nothing to do, dst: %p, src: %p.\n", dst, src);
./src/gurt/misc.c:			D_ERROR("d_rank_list_realloc() failed.\n");
./src/gurt/misc.c:		D_ERROR("rank_list cannot be NULL\n");
./src/gurt/misc.c:		D_ERROR("d_rank_list_realloc() failed.\n");
./src/gurt/misc.c:		D_ERROR("d_rank_list_realloc() failed.\n");
./src/gurt/misc.c:		D_ERROR("name parameter too long.\n");
./src/gurt/misc.c:		D_ERROR("ENV %s is not integer.\n", env_val);
./src/bio/bio_device.c:		D_ERROR("Old dev "DF_UUID"(%s) is hot removed\n",
./src/bio/bio_device.c:		D_ERROR("Set device state failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:		D_ERROR("Error managing LED on device:"DF_UUID"\n",
./src/bio/bio_device.c:		D_ERROR("Create blob failed. %d\n", rc);
./src/bio/bio_device.c:		D_ERROR("Delete blob failed. %d\n", rc);
./src/bio/bio_device.c:		D_ERROR("Invalid blob size "DF_U64", cluster size "DF_U64"\n",
./src/bio/bio_device.c:		D_ERROR("Wait eventual failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:		D_ERROR("Create blob failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:		D_ERROR("Wait eventual failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:		D_ERROR("Delete blob("DF_U64") failed. "DF_RC"\n",
./src/bio/bio_device.c:		D_ERROR("Failed to load blobstore for new dev "DF_UUID"\n",
./src/bio/bio_device.c:			D_ERROR("No blobs from "DF_UUID" on dev "DF_UUID"\n",
./src/bio/bio_device.c:		D_ERROR("Failed to load blobstore for new dev "DF_UUID"\n",
./src/bio/bio_device.c:		D_ERROR("New dev "DF_UUID"(%s) is hot removed\n",
./src/bio/bio_device.c:		D_ERROR("New dev "DF_UUID"(%s) is in replacing\n",
./src/bio/bio_device.c:		D_ERROR("Failed to list pools in SMD. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:		D_ERROR("Failed to create old blobs. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:		D_ERROR("Failed to replace dev: "DF_UUID" -> "DF_UUID", "
./src/bio/bio_device.c:		D_ERROR("Lookup old dev "DF_UUID" in SMD failed. "DF_RC"\n",
./src/bio/bio_device.c:		D_ERROR("Old dev "DF_UUID" isn't in faulty state(%d)\n",
./src/bio/bio_device.c:		D_ERROR("Failed to find old dev "DF_UUID"\n",
./src/bio/bio_device.c:		D_ERROR("Old dev "DF_UUID" isn't in %s state (%s)\n",
./src/bio/bio_device.c:		D_ERROR("New dev "DF_UUID" is already used by DAOS\n",
./src/bio/bio_device.c:		D_ERROR("Lookup new dev "DF_UUID" in SMD failed. "DF_RC"\n",
./src/bio/bio_device.c:		D_ERROR("Failed to find new dev "DF_UUID"\n",
./src/bio/bio_device.c:			D_ERROR("Failed to alloc traddr %s\n", traddr);
./src/bio/bio_device.c:		D_ERROR("Failed to get SPDK bdev for %s\n", dev_name);
./src/bio/bio_device.c:		D_ERROR("Failed to alloc SPDK json context\n");
./src/bio/bio_device.c:		D_ERROR("Failed to dump config from SPDK bdev. %d\n", rc);
./src/bio/bio_device.c:		D_ERROR("Failed to get traddr for %s\n", dev_name);
./src/bio/bio_device.c:		D_ERROR("Failed to get SMD dev list "DF_RC"\n", DP_RC(rc));
./src/bio/bio_device.c:			D_ERROR("Failed to allocate device info\n");
./src/bio/bio_device.c:		D_ERROR("Found unexpected device "DF_UUID" in SMD\n",
./src/bio/bio_device.c:			D_ERROR("Failed to allocate device info\n");
./src/bio/bio_device.c:		D_ERROR("Failed to find dev "DF_UUID"\n",
./src/bio/bio_device.c:		D_ERROR("LED state is not valid or supported\n");
./src/bio/bio_device.c:		D_ERROR("Unable to get traddr for device:%s\n",
./src/bio/bio_device.c:		D_ERROR("Unable to parse PCI address: %s\n", b_info.bdi_traddr);
./src/bio/bio_device.c:			D_ERROR("%s is not a VMD device\n", b_info.bdi_traddr);
./src/bio/bio_device.c:		D_ERROR("Unable to set led state, VMD device not found\n");
./src/bio/bio_device.c:		D_ERROR("Failed to get the VMD LED state\n");
./src/bio/bio_device.c:		D_ERROR("Failed to set LED state to %s\n", led_state);
./src/bio/bio_device.c:		D_ERROR("Failed to get the VMD LED state\n");
./src/bio/bio_device.c:			D_ERROR("LED of device:%s is in an unexpected state:"
./src/bio/bio_xstream.c:		D_ERROR("Invalid address %s\n", pci_addr);
./src/bio/bio_xstream.c:		D_ERROR("Invalid address %s\n", traddr);
./src/bio/bio_xstream.c:		D_ERROR("snprintf failed\n");
./src/bio/bio_xstream.c:		D_ERROR("Transport id not valid\n");
./src/bio/bio_xstream.c:			D_ERROR("snprintf failed\n");
./src/bio/bio_xstream.c:		D_ERROR("snprintf failed\n");
./src/bio/bio_xstream.c:		D_ERROR("unexpected empty config\n");
./src/bio/bio_xstream.c:			D_ERROR("Unable to parse TransportID: %s\n", val);
./src/bio/bio_xstream.c:			D_ERROR("unexpected non-PCIE transport\n");
./src/bio/bio_xstream.c:					D_ERROR("Invalid traddr=%s\n",
./src/bio/bio_xstream.c:			D_ERROR("Invalid traddr=%s\n", trid->traddr);
./src/bio/bio_xstream.c:		D_ERROR("Invalid NVMe conf format\n");
./src/bio/bio_xstream.c:		D_ERROR("Failed to initialize SPDK env, "DF_RC"\n", DP_RC(rc));
./src/bio/bio_xstream.c:		D_ERROR("Failed to init SPDK thread lib, "DF_RC"\n", DP_RC(rc));
./src/bio/bio_xstream.c:		D_ERROR("Initialize SMD store failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_xstream.c:		D_ERROR("Failed to alloc SPDK config\n");
./src/bio/bio_xstream.c:		D_ERROR("Failed to read %s, "DF_RC"\n", nvme_conf, DP_RC(rc));
./src/bio/bio_xstream.c:		D_ERROR("Failed to open bdev %s, %d\n", bdev_name, rc);
./src/bio/bio_xstream.c:		D_ERROR("failed to create bs_dev\n");
./src/bio/bio_xstream.c:		D_ERROR("failed to unload blobstore %d\n", cp_arg.cca_rc);
./src/bio/bio_xstream.c:		D_ERROR("Invalid BS state %d\n", bbs->bb_state);
./src/bio/bio_xstream.c:		D_ERROR("Device %s is already created\n", bdev_name);
./src/bio/bio_xstream.c:		D_ERROR("failed to allocate bio_bdev\n");
./src/bio/bio_xstream.c:		D_ERROR("Failed to allocate bdev name for %s\n", bdev_name);
./src/bio/bio_xstream.c:		D_ERROR("Failed to hold bdev %s, %d\n", d_bdev->bb_name, rc);
./src/bio/bio_xstream.c:			D_ERROR("Failed to create blobstore on dev: "
./src/bio/bio_xstream.c:		D_ERROR("Unable to unload blobstore\n");
./src/bio/bio_xstream.c:		D_ERROR("The bdev has old blobstore not created by DAOS!\n");
./src/bio/bio_xstream.c:			D_ERROR("Dup device "DF_UUID" detected!\n",
./src/bio/bio_xstream.c:			D_ERROR("bio_bdev for "DF_UUID" wasn't created?\n",
./src/bio/bio_xstream.c:		D_ERROR("Unable to get dev info for "DF_UUID"\n",
./src/bio/bio_xstream.c:		D_ERROR("No SPDK bdevs found!");
./src/bio/bio_xstream.c:			D_ERROR("Dup xstream context!\n");
./src/bio/bio_xstream.c:		D_ERROR("Too many xstreams per device!\n");
./src/bio/bio_xstream.c:		D_ERROR("Failed to map dev "DF_UUID" to tgt %d. "DF_RC"\n",
./src/bio/bio_xstream.c:		D_ERROR("No available SPDK bdevs, please check whether "
./src/bio/bio_xstream.c:		D_ERROR("Failed to get dev for tgt %d. "DF_RC"\n", tgt_id,
./src/bio/bio_xstream.c:		D_ERROR("Device "DF_UUID" for target %d isn't plugged or the "
./src/bio/bio_xstream.c:			D_ERROR("Invalid SMD state:%d\n", dev_info->sdi_state);
./src/bio/bio_xstream.c:			D_ERROR("BIO health monitor init failed. "DF_RC"\n",
./src/bio/bio_xstream.c:		D_ERROR("Failed to create io channel\n");
./src/bio/bio_xstream.c:		D_ERROR("Failed to open bdev %s, %d\n", d_bdev->bb_name, rc);
./src/bio/bio_xstream.c:		D_ERROR("failed to alloc SPDK thread\n");
./src/bio/bio_xstream.c:			D_ERROR("failed to init bdevs, rc:%d\n", rc);
./src/bio/bio_xstream.c:			D_ERROR("failed to init bio_bdevs, "DF_RC"\n",
./src/bio/bio_xstream.c:		D_ERROR("failed to initialize dma buffer\n");
./src/bio/bio_xstream.c:		D_ERROR("Invalid ctl cmd %d\n", cmd);
./src/bio/bio_xstream.c:		D_ERROR("Original dev "DF_UUID" not in SMD. "DF_RC"\n",
./src/bio/bio_xstream.c:		D_ERROR("Invalid dev state %d\n", dev_info->sdi_state);
./src/bio/bio_xstream.c:			D_ERROR("Failed to init hot plugged device %s\n",
./src/bio/bio_xstream.c:				D_ERROR("Failed resetting LED state\n");
./src/bio/bio_context.c:			D_ERROR("ABT eventual wait failed. %d", rc);
./src/bio/bio_context.c:		D_ERROR("Blobstore %p is closed, fail request.\n", bbs);
./src/bio/bio_context.c:		D_ERROR("Blobstore %p is in %d state, reject request.\n",
./src/bio/bio_context.c:		D_ERROR("Delete blobID "DF_U64" failed for pool:"DF_UUID" "
./src/bio/bio_context.c:			D_ERROR("Failed to unassign blob:"DF_U64" from pool: "
./src/bio/bio_context.c:		D_ERROR("Blobstore is already closed?\n");
./src/bio/bio_context.c:		D_ERROR("Blob size is less than the size of a cluster "DF_U64""
./src/bio/bio_context.c:		D_ERROR("Duplicated blob for xs:%p pool:"DF_UUID"\n",
./src/bio/bio_context.c:		D_ERROR("Create blob failed for xs:%p pool:"DF_UUID" rc:%d\n",
./src/bio/bio_context.c:			D_ERROR("Failed to assign pool blob:"DF_U64" to pool: "
./src/bio/bio_context.c:				D_ERROR("Unable to delete newly created blobID "
./src/bio/bio_context.c:		D_ERROR("Blob %p is already opened\n", ctxt->bic_blob);
./src/bio/bio_context.c:		D_ERROR("Blob is in opening\n");
./src/bio/bio_context.c:		D_ERROR("Failed to find blobID for xs:%p, pool:"DF_UUID"\n",
./src/bio/bio_context.c:		D_ERROR("Open blobID "DF_U64" failed for xs:%p pool:"DF_UUID" "
./src/bio/bio_context.c:		D_ERROR("Blob is already closed\n");
./src/bio/bio_context.c:		D_ERROR("The blob is in closing\n");
./src/bio/bio_context.c:		D_ERROR("There are %u inflight blob IOs\n",
./src/bio/bio_context.c:		D_ERROR("Close blob %p failed for xs:%p rc:%d\n",
./src/bio/bio_context.c:		D_ERROR("Blobstore is invalid. blob:%p, closing:%d\n",
./src/bio/bio_context.c:		D_ERROR("Unmap blob %p failed for xs: %p rc:%d\n",
./src/bio/bio_context.c:		D_ERROR("Failed to find blobID for xs:%p, pool:"DF_UUID"\n",
./src/bio/bio_context.c:		D_ERROR("Not able to find device id/blobstore for tgt %d\n",
./src/bio/bio_recovery.c:		D_ERROR("Faulty reaction failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_recovery.c:		D_ERROR("Failed to unload blobstore:%p, %d\n",
./src/bio/bio_recovery.c:			D_ERROR("Failed to create io channel for %p\n", bbs);
./src/bio/bio_recovery.c:			D_ERROR("Failed to open bdev %s, for %p, %d\n",
./src/bio/bio_recovery.c:		D_ERROR("Failed to load blobstore:%p, %d\n",
./src/bio/bio_recovery.c:			D_ERROR("Failed to open bdev %s, for %p, %d\n",
./src/bio/bio_recovery.c:			D_ERROR("Failed to get health channel for %p\n", bbs);
./src/bio/bio_recovery.c:		D_ERROR("Blobstore state transition error! tgt: %d, %s -> %s\n",
./src/bio/bio_recovery.c:				D_ERROR("Set device state failed. "DF_RC"\n",
./src/bio/bio_recovery.c:		D_ERROR("Reint reaction failed. "DF_RC"\n", DP_RC(rc));
./src/bio/bio_recovery.c:		D_ERROR("Unmap error logged from tgt_id:%d\n", mem->mem_tgt_id);
./src/bio/bio_recovery.c:		D_ERROR("Write error logged from xs_id:%d\n", mem->mem_tgt_id);
./src/bio/bio_recovery.c:		D_ERROR("Read error logged from xs_id:%d\n", mem->mem_tgt_id);
./src/bio/bio_recovery.c:		D_ERROR("CSUM error logged from xs_id:%d\n", mem->mem_tgt_id);
./src/bio/bio_recovery.c:			D_ERROR("Blobstore I/O error notification error. %d\n",
./src/bio/smd/smd_pool.c:			D_ERROR("Pool "DF_UUID" blob size mismatch. "
./src/bio/smd/smd_pool.c:			D_ERROR("Pool "DF_UUID" is assigned to too many "
./src/bio/smd/smd_pool.c:			D_ERROR("Dup target %d, idx: %d\n", tgt_id, rc);
./src/bio/smd/smd_pool.c:		D_ERROR("Fetch pool "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_pool.c:		D_ERROR("Update pool "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_pool.c:		D_ERROR("Fetch pool "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_pool.c:		D_ERROR("Pool "DF_UUID" target %d not found.\n",
./src/bio/smd/smd_pool.c:			D_ERROR("Update pool "DF_UUID" failed: "DF_RC"\n",
./src/bio/smd/smd_pool.c:			D_ERROR("Delete pool "DF_UUID" failed: "DF_RC"\n",
./src/bio/smd/smd_pool.c:		D_ERROR("Fetch pool "DF_UUID" failed: "DF_RC"\n",
./src/bio/smd/smd_pool.c:		D_ERROR("Fetch pool "DF_UUID" failed. %d\n",
./src/bio/smd/smd_pool.c:			D_ERROR("Invalid tgt %d for pool "DF_UUID"\n",
./src/bio/smd/smd_pool.c:		D_ERROR("Replace blobs for pool "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Target %d is already bound to dev "DF_UUID"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Get target %d failed. "DF_RC"\n", tgt_id, DP_RC(rc));
./src/bio/smd/smd_device.c:			D_ERROR("Dev "DF_UUID" is assigned to too many "
./src/bio/smd/smd_device.c:		D_ERROR("Fetch dev "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Fetch dev "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Update target %d failed: "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Fetch dev "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("SMD dev "DF_UUID" state set failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("New dev "DF_UUID" is inuse\n", DP_UUID(&id.uuid));
./src/bio/smd/smd_device.c:		D_ERROR("Fetch new dev "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Fetch dev "DF_UUID" failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Dev "DF_UUID" isn't in faulty\n", DP_UUID(&id.uuid));
./src/bio/smd/smd_device.c:		D_ERROR("Invalid targets (%d) for dev "DF_UUID"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Failed to delete old dev "DF_UUID". "DF_RC"\n",
./src/bio/smd/smd_device.c:		D_ERROR("Failed to insert new dev "DF_UUID". "DF_RC"\n",
./src/bio/smd/smd_device.c:			D_ERROR("Update target %d failed. "DF_RC"\n",
./src/bio/smd/smd_device.c:			D_ERROR("Update pool "DF_UUID" failed. "DF_RC"\n",
./src/bio/bio_monitor.c:		D_ERROR("BIO FAULTY state set failed, rc=%d\n", rc);
./src/bio/bio_monitor.c:		D_ERROR("State transition failed, rc=%d\n", rc);
./src/bio/bio_monitor.c:		D_ERROR("NVMe status code/type: %d/%d\n", sc, sct);
./src/bio/bio_monitor.c:		D_ERROR("NVMe status code/type: %d/%d\n", sc, sct);
./src/bio/bio_monitor.c:		D_ERROR("Device error log page size exceeds buffer size\n");
./src/bio/bio_monitor.c:		D_ERROR("NVMe admin passthru (error log), rc:%d\n", rc);
./src/bio/bio_monitor.c:		D_ERROR("NVMe status code/type: %d/%d\n", sc, sct);
./src/bio/bio_monitor.c:		D_ERROR("NVMe admin passthru (identify ctrlr), rc:%d\n", rc);
./src/bio/bio_monitor.c:		D_ERROR("No bdev associated with device health descriptor\n");
./src/bio/bio_monitor.c:		D_ERROR("Bdev NVMe admin passthru not supported!\n");
./src/bio/bio_monitor.c:		D_ERROR("NVMe admin passthru (health log), rc:%d\n", rc);
./src/bio/bio_monitor.c:		D_ERROR("Auto faulty detect on target %d failed. %d\n",
./src/bio/bio_monitor.c:		D_ERROR("State transition on target %d failed. %d\n",
./src/bio/bio_monitor.c:		D_ERROR("Failed to open bdev %s, %d\n", bdev_name, rc);
./src/bio/bio_buffer.c:		D_ERROR("Failed to allocate chunk\n");
./src/bio/bio_buffer.c:		D_ERROR("Failed to allocate %u pages DMA buffer\n", cnt);
./src/bio/bio_buffer.c:		D_ERROR("Exceeding per-xstream DMA buffer size\n");
./src/bio/bio_buffer.c:		D_ERROR("Blobstore is invalid. blob:%p, closing:%d\n",
./src/bio/bio_buffer.c:			D_ERROR("Invalid iov[%d] "DF_U64"/"DF_U64" %d\n",
./src/bio/bio_buffer.c:			D_ERROR("Invalid iov[%d], iov_buf is NULL\n",
./src/bio/bio_buffer.c:			D_ERROR("Per-xstream DMA buffer isn't large enough "
./src/bio/bio_buffer.c:		D_ERROR("Copy biod failed, "DF_RC"\n", DP_RC(rc));
./src/bio/bio_buffer.c:		D_ERROR("Readv to blob:%p failed for xs:%p, rc:%d\n",
./src/bio/bio_buffer.c:		D_ERROR("Writev to blob:%p failed for xs:%p, rc:%d\n",
./src/bio/bio_buffer.c:		D_ERROR("%s to blob:%p failed for xs:%p, rc:%d\n",
./src/mgmt/cli_query.c:		D_ERROR("RPC error while querying blobstore state: "DF_RC"\n",
./src/mgmt/cli_query.c:		D_ERROR("MGMT_GET_BS_STATE replied failed, rc: %d\n", rc);
./src/mgmt/cli_query.c:		D_ERROR("cannot attach to DAOS system: %s\n", args->grp);
./src/mgmt/cli_query.c:		D_ERROR("crt_req_create(MGMT_GET_BS_STATE failed, rc: %d.\n",
./src/mgmt/srv_util.c:		D_ERROR("failed to update group (op=%d version=%u): %d\n",
./src/mgmt/srv_system.c:		D_ERROR("failed to create ms_lock: %d\n", rc);
./src/mgmt/srv_system.c:		D_ERROR("failed to create system map update RPC: "DF_RC"\n",
./src/mgmt/srv_system.c:		D_ERROR("failed to start management service: "DF_RC"\n",
./src/mgmt/cli_debug.c:		D_ERROR("failed to attach to grp %s, rc "DF_RC"\n", args->grp,
./src/mgmt/cli_debug.c:		D_ERROR("crt_req_create(MGMT_SVC_RIP) failed, rc: "DF_RC"\n",
./src/mgmt/cli_debug.c:		D_ERROR("failed to attach to grp rc "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_debug.c:		D_ERROR("crt_req_create failed, rc: "DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_target.c:		D_ERROR("failed to open %s for sync: %d\n", path, errno);
./src/mgmt/srv_target.c:		D_ERROR("failed to fync %s: %d\n", path, errno);
./src/mgmt/srv_target.c:		D_ERROR("failed to remove %s\n", path);
./src/mgmt/srv_target.c:		D_ERROR("failed to open %s: %d\n", dss_storage_path, errno);
./src/mgmt/srv_target.c:				D_ERROR("failed to read %s: %d\n",
./src/mgmt/srv_target.c:		D_ERROR("failed to close %s: %d\n", dss_storage_path, errno);
./src/mgmt/srv_target.c:		D_ERROR("failed to open %s: %d\n", newborns_path, errno);
./src/mgmt/srv_target.c:				D_ERROR("failed to read %s: %d\n",
./src/mgmt/srv_target.c:		D_ERROR("failed to close %s: %d\n", newborns_path, errno);
./src/mgmt/srv_target.c:			D_ERROR("%d xstreams failed tgt_kill_pool()\n", rc);
./src/mgmt/srv_target.c:			D_ERROR("tgt_kill_pool, rc: "DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_target.c:		D_ERROR("failed to create NEWBORNS dir: %d\n", errno);
./src/mgmt/srv_target.c:		D_ERROR("failed to create ZOMBIES dir: %d\n", errno);
./src/mgmt/srv_target.c:		D_ERROR("failed to delete SPDK blobs for NEWBORNS pools: "
./src/mgmt/srv_target.c:		D_ERROR("failed to allocate pooltgts struct\n");
./src/mgmt/srv_target.c:		D_ERROR("failed to create pooltgts mutex: %d\n", rc);
./src/mgmt/srv_target.c:		D_ERROR("failed to create pooltgts cv: %d\n", rc);
./src/mgmt/srv_target.c:		D_ERROR("failed to create hash table (creates) "DF_RC"\n",
./src/mgmt/srv_target.c:		D_ERROR("failed to cleanup NEWBORNS dir: %d, will try again\n",
./src/mgmt/srv_target.c:		D_ERROR("failed to cleanup ZOMBIES dir: %d, will try again\n",
./src/mgmt/srv_target.c:		D_ERROR("failed to destroy table: dpt_creates_ht: "DF_RC"\n",
./src/mgmt/srv_target.c:		D_ERROR(DF_UUID": failed to init vos pool %s: %d\n",
./src/mgmt/srv_target.c:			D_ERROR(DF_UUID": failed to create vos file %s: %d\n",
./src/mgmt/srv_target.c:			D_ERROR(DF_UUID": failed to allocate vos file %s with "
./src/mgmt/srv_target.c:			D_ERROR(DF_UUID": failed to sync vos pool %s: %d\n",
./src/mgmt/srv_target.c:		D_ERROR(DF_UUID": failed to create thread for vos file "
./src/mgmt/srv_target.c:				D_ERROR("pthread_cancel failed: "DF_RC"\n",
./src/mgmt/srv_target.c:		D_ERROR("failed to created pool directory: %d\n", rc);
./src/mgmt/srv_target.c:		D_ERROR("ds_pool_create failed, rc: "DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_target.c:		D_ERROR("failed to rename pool directory: %d\n", rc);
./src/mgmt/srv_target.c:		D_ERROR("failed to alloc ptrec\n");
./src/mgmt/srv_target.c:		D_ERROR(DF_UUID": already creating or cleaning up\n",
./src/mgmt/srv_target.c:		D_ERROR(DF_UUID": failed insert dpt_creates_ht: "DF_RC"\n",
./src/mgmt/srv_target.c:		D_ERROR(DF_UUID": failed to start pool: "DF_RC"\n",
./src/mgmt/srv_target.c:		D_ERROR("Set parameter failed key_id %d: rc %d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (prep shutdown)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (ping rank)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (set rank)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to set self rank %u: "DF_RC"\n", req->rank,
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (group_update)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("No prop entries provided, aborting!\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (create pool)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse pool UUID %s: "DF_RC"\n", req->uuid,
./src/mgmt/srv_drpc.c:		D_ERROR("failed to create pool: "DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (destroy pool)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse pool UUID %s: "DF_RC"\n", req->uuid,
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to destroy pool %s: "DF_RC"\n", req->uuid,
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (evict pool_connections)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse pool UUID %s: "DF_RC"\n", req->uuid,
./src/mgmt/srv_drpc.c:				D_ERROR("Unable to parse handle UUID %s: "
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to evict pool connections %s: "DF_RC"\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse pool UUID %s: "DF_RC"\n", id,
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to set pool target up "DF_UUID": "DF_RC"\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (Exclude target)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (Drain target)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (Extend target)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse pool UUID %s: "DF_RC"\n", req->uuid,
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to extend pool %s: "DF_RC"\n", req->uuid,
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (Reintegrate target)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (pool setprop)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't parse '%s' to UUID\n", req->uuid);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos property\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Pool property request must be numeric\n");
./src/mgmt/srv_drpc.c:			D_ERROR("string value is NULL\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Pool property request with no value (%d)\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to set pool property on "DF_UUID": "DF_RC"\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Null set pool property response\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Did not receive property %d in result\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Property req/resp mismatch (%d != %d)",
./src/mgmt/srv_drpc.c:		D_ERROR("Pool property response with no value (%d)\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't convert ACL to string list, rc="DF_RC"",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate buffer for packed ACLResp\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack GetACLReq\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't parse '%s' to UUID\n", req->uuid);
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't get pool ACL, rc="DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack ModifyACLReq\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't parse UUID\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't parse requested ACL strings to DAOS ACL, "
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't overwrite pool ACL, rc="DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't update pool ACL, rc=%d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack DeleteACLReq\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't parse UUID\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Couldn't delete entry from pool ACL, rc=%d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (list containers)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to parse pool uuid %s\n", req->uuid);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to list containers in pool %s :%d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack pool query req\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to parse pool uuid %s\n", req->uuid);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to query the pool, rc=%d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (smd list devs)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to list SMD devices :"DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (smd list pools)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to list SMD pools :"DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (bio health query)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:			D_ERROR("Unable to parse device UUID %s: "DF_RC"\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate bio health struct\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to query BIO health data :"DF_RC"\n",
./src/mgmt/srv_drpc.c:		D_ERROR("failed to allocate buffer");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (dev state query)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:			D_ERROR("Unable to parse device UUID %s: %d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to query device state :%d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (dev state set faulty)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:			D_ERROR("Unable to parse device UUID %s: %d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to set FAULTY device state :%d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (dev replace)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Old device UUID for replacement command is empty\n");
./src/mgmt/srv_drpc.c:		D_ERROR("New device UUID for replacement command is empty\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse device UUID %s: %d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse device UUID %s: %d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to replace device :%d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (dev identify)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Device UUID for identify command is empty\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate daos response ref\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Unable to parse device UUID %s: %d\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to set LED to IDENTIFY on device:%s\n",
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate drpc response body\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to unpack req (cont set owner)\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Container UUID is invalid\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Pool UUID is invalid\n");
./src/mgmt/srv_drpc.c:		D_ERROR("Set owner failed: %d\n", rc);
./src/mgmt/srv_drpc.c:		D_ERROR("Failed to allocate response body\n");
./src/mgmt/cli_mgmt.c:		D_ERROR("RPC error: "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_mgmt.c:	D_ERROR("This API is deprecated\n");
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to attach to grp rc "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_mgmt.c:		D_ERROR("crt_req_create failed, rc: "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo failed: %d. "
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo failed: %d. "
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo failed: %d. "
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo failed: %d. "
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo failed: %d. "
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo failed: %d. "
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo returned zero MS ranks\n");
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to connect to %s " DF_RC "\n",
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo call failed: "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo unsuccessful: %d\n", dresp->status);
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to unpack GetAttachInfo response\n");
./src/mgmt/cli_mgmt.c:		D_ERROR("GetAttachInfo(%s) failed: "DF_RC"\n", req.sys,
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to connect to %s " DF_RC "\n",
./src/mgmt/cli_mgmt.c:		D_ERROR("Sending monitor request failed: "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_mgmt.c:		D_ERROR("Monitor Request unsuccessful: %d\n", dresp->status);
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to connect to %s " DF_RC "\n",
./src/mgmt/cli_mgmt.c:		D_ERROR("Process Disconnect call failed: "DF_RC"\n", DP_RC(rc));
./src/mgmt/cli_mgmt.c:		D_ERROR("Process Disconnect unsuccessful: %d\n", dresp->status);
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to create group %s: "DF_RC"\n", name,
./src/mgmt/cli_mgmt.c:			D_ERROR("failed to add rank %u URI %s to group %s: "
./src/mgmt/cli_mgmt.c:		D_ERROR("system name %s longer than %zu bytes\n", sys->sy_name,
./src/mgmt/cli_mgmt.c:		D_ERROR("truncated sys_buf: %zu < %zu\n", len, sizeof(*sysb));
./src/mgmt/cli_mgmt.c:			D_ERROR(DF_UUID ": crt_req_create() failed, "
./src/mgmt/cli_mgmt.c:		D_ERROR(DF_UUID ": failed to get PS replicas list from %d "
./src/mgmt/cli_mgmt.c:		D_ERROR(DF_UUID ": MGMT_POOL_GET_SVCRANKS rpc failed to all %d "
./src/mgmt/cli_mgmt.c:		D_ERROR(DF_UUID ": d_rank_list_dup() failed, " DF_RC "\n",
./src/mgmt/cli_mgmt.c:		D_ERROR("failed to register mgmt RPCs: "DF_RC"\n", DP_RC(rc));
./src/mgmt/srv.c:		D_ERROR("Unknown method\n");
./src/mgmt/srv.c:			D_ERROR("Set parameter failed key_id %d: rc %d\n",
./src/mgmt/srv.c:		D_ERROR(DF_UUID": get_pool_svc_ranks() upcall failed, "
./src/mgmt/srv.c:		D_ERROR(DF_UUID": crt_reply_send() failed, "DF_RC"\n",
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:			D_ERROR("Blobstore UUID:"DF_UUID" not found\n",
./src/mgmt/srv_query.c:			D_ERROR("No targets mapped to device\n");
./src/mgmt/srv_query.c:		D_ERROR("Blobstore UUID is not provided for state query\n");
./src/mgmt/srv_query.c:		D_ERROR("Unable to create a ULT on tgt_id:%d\n", tgt_id);
./src/mgmt/srv_query.c:		D_ERROR("crt_reply_send failed, rc: "DF_RC"\n", DP_RC(rc));
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:		D_ERROR("Error getting BIO device state\n");
./src/mgmt/srv_query.c:		D_ERROR("Neither dev_uuid or tgt_id specified for BIO query\n");
./src/mgmt/srv_query.c:			D_ERROR("Device UUID:"DF_UUID" not found\n",
./src/mgmt/srv_query.c:			D_ERROR("No targets mapped to device\n");
./src/mgmt/srv_query.c:			D_ERROR("Tgt_id:%d not found\n", tgt_id);
./src/mgmt/srv_query.c:		D_ERROR("Unable to create a ULT on tgt_id:%d\n", tgt_id);
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:		D_ERROR("Error getting BIO device list\n");
./src/mgmt/srv_query.c:		D_ERROR("Unable to create a ULT\n");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate devices for resp\n");
./src/mgmt/srv_query.c:			D_ERROR("Failed to allocate device state");
./src/mgmt/srv_query.c:				D_ERROR("Failed to allocate device tr_addr");
./src/mgmt/srv_query.c:		D_ERROR("Failed to get all VOS pools from SMD\n");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate pools for resp\n");
./src/mgmt/srv_query.c:		D_ERROR("Device UUID:"DF_UUID" not found\n", DP_UUID(dev_uuid));
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device state");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device uuid");
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:		D_ERROR("Error managing LED on device:"DF_UUID"\n",
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:		D_ERROR("Error setting FAULTY BIO device state\n");
./src/mgmt/srv_query.c:		D_ERROR("Device UUID:"DF_UUID" not found\n", DP_UUID(dev_uuid));
./src/mgmt/srv_query.c:		D_ERROR("No targets mapped to device\n");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device state");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device uuid");
./src/mgmt/srv_query.c:		D_ERROR("Unable to create a ULT on tgt_id:%d\n", tgt_id);
./src/mgmt/srv_query.c:		D_ERROR("FAULT LED state not set on device:"DF_UUID"\n",
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:		D_ERROR("Error replacing BIO device\n");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate new device uuid");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device state");
./src/mgmt/srv_query.c:		D_ERROR("Unable to create a ULT\n");
./src/mgmt/srv_query.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/mgmt/srv_query.c:		D_ERROR("Error managing LED on device:"DF_UUID"\n",
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device uuid");
./src/mgmt/srv_query.c:		D_ERROR("Failed to allocate device led state");
./src/mgmt/srv_pool.c:		D_ERROR(DF_UUID": failed to destroy pool targets "DF_RC"\n",
./src/mgmt/srv_pool.c:		D_ERROR(DF_UUID": corpc_req_create failed: rc="DF_RC"\n",
./src/mgmt/srv_pool.c:		D_ERROR(DF_UUID": dss_rpc_send MGMT_TGT_CREATE: rc="DF_RC"\n",
./src/mgmt/srv_pool.c:		D_ERROR(DF_UUID": failed to update pool map on targets: rc="
./src/mgmt/srv_pool.c:			D_ERROR(DF_UUID": failed to clean up failed pool: "
./src/mgmt/srv_pool.c:		D_ERROR("some ranks not found in cart primary group\n");
./src/mgmt/srv_pool.c:		D_ERROR("creating pool "DF_UUID" on ranks failed: rc "DF_RC"\n",
./src/mgmt/srv_pool.c:		D_ERROR("create pool "DF_UUID" svc failed: rc "DF_RC"\n",
./src/mgmt/srv_pool.c:			D_ERROR(DF_UUID": failed to clean up failed pool: "
./src/mgmt/srv_pool.c:		D_ERROR("svc_ranks was NULL\n");
./src/mgmt/srv_pool.c:		D_ERROR("Failed to check/evict pool handles " DF_UUID ", "
./src/mgmt/srv_pool.c:		D_ERROR(DF_UUID ": failed to get pool storage ranks, "
./src/mgmt/srv_pool.c:		D_ERROR("Failed to destroy pool service " DF_UUID ", "
./src/mgmt/srv_pool.c:		D_ERROR("Destroying pool "DF_UUID" failed, " DF_RC ".\n",
./src/mgmt/srv_pool.c:		D_ERROR("creating pool on ranks "DF_UUID" failed: rc "DF_RC"\n",
./src/mgmt/srv_pool.c:		D_ERROR("Failed to evict pool handles"DF_UUID" rc: %d\n",
./src/mgmt/srv_pool.c:			D_ERROR("creating pool on ranks "DF_UUID" failed: rc "
./src/mgmt/srv_pool.c:		D_ERROR("pool_info was NULL\n");
./src/mgmt/srv_pool.c:		D_ERROR("invalid property\n");
./src/mgmt/srv_container.c:		D_ERROR("user and group both null\n");
./src/security/cli_security.c:		D_ERROR("DAOS Socket Path is Uninitialized\n");
./src/security/cli_security.c:		D_ERROR("Can't connect to agent socket "DF_RC"\n", DP_RC(rc));
./src/security/cli_security.c:		D_ERROR("Couldn't allocate dRPC call "DF_RC"\n", DP_RC(rc));
./src/security/cli_security.c:		D_ERROR("Response was null\n");
./src/security/cli_security.c:		D_ERROR("Agent credential drpc request failed: %d\n",
./src/security/cli_security.c:		D_ERROR("Body was not a GetCredentialResp");
./src/security/cli_security.c:		D_ERROR("dRPC call reported failure, status=%d\n",
./src/security/cli_security.c:		D_ERROR("No cred included\n");
./src/security/cli_security.c:		D_ERROR("Credential did not include token\n");
./src/security/cli_security.c:		D_ERROR("Credential did not include verifier\n");
./src/security/srv_acl.c:		D_ERROR("Failed to allocate default ACE type %d", type);
./src/security/srv_acl.c:		D_ERROR("Failed to allocate default ACL for cont properties");
./src/security/srv_acl.c:		D_ERROR("Failed to allocate default ACL for pool properties");
./src/security/srv_acl.c:		D_ERROR("Response body was not a ValidateCredResp\n");
./src/security/srv_acl.c:		D_ERROR("Response reported failed status: %d\n", resp->status);
./src/security/srv_acl.c:		D_ERROR("Response missing a valid auth token\n");
./src/security/srv_acl.c:		D_ERROR("Couldn't copy the Auth Token\n");
./src/security/srv_acl.c:		D_ERROR("Couldn't connect to daos_server socket\n");
./src/security/srv_acl.c:		D_ERROR("Response was NULL\n");
./src/security/srv_acl.c:		D_ERROR("dRPC response error: %d\n", response->status);
./src/security/srv_acl.c:		D_ERROR("Credential iov invalid\n");
./src/security/srv_acl.c:		D_ERROR("Credential auth flavor not supported\n");
./src/security/srv_acl.c:		D_ERROR("Invalid auth_sys payload\n");
./src/security/srv_acl.c:		D_ERROR("NULL input\n");
./src/security/srv_acl.c:		D_ERROR("Invalid ownership\n");
./src/security/srv_acl.c:		D_ERROR("Invalid flags\n");
./src/security/srv_acl.c:		D_ERROR("Invalid ACL\n");
./src/security/srv_acl.c:		D_ERROR("Failed to validate credentials, rc="DF_RC"\n",
./src/security/srv_acl.c:		D_ERROR("Couldn't unpack credential\n");
./src/security/srv_acl.c:		D_ERROR("NULL input\n");
./src/security/srv_acl.c:		D_ERROR("Invalid ownership\n");
./src/security/srv_acl.c:		D_ERROR("Invalid flags\n");
./src/security/srv_acl.c:		D_ERROR("Invalid ACL\n");
./src/security/srv_acl.c:		D_ERROR("Credential data is NULL\n");
./src/security/srv_acl.c:		D_ERROR("failed to get container capabilities: %d\n", rc);
./src/tests/ftest/cart/iv_server.c:		D_ERROR("Failed to lookup group %s\n", IV_GRP_NAME);
./src/tests/ftest/cart/iv_server.c:		D_ERROR("CRT_L_GRP_CFG was not set\n");
./src/tests/ftest/cart/iv_server.c:		D_ERROR("Failed to load group file %s\n", grp_cfg_file);
./src/tests/ftest/cart/no_pmix_multi_ctx.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_multi_ctx.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/no_pmix_multi_ctx.c:		D_ERROR("crt_rank_self_set(0) failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_multi_ctx.c:			D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_multi_ctx.c:		D_ERROR("crt_rank_uri_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_multi_ctx.c:			D_ERROR("crt_group_primary_rank_add() failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_multi_ctx.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/ftest/cart/rpc_test_cli.c:			D_ERROR("crt_progress failed %d", rc);
./src/tests/ftest/cart/test_no_timeout.c:			D_ERROR("rpc (opc: %#x) failed, rc: %d.\n",
./src/tests/ftest/cart/test_rpc_error.c:			D_ERROR("crt_progress failed rc: %d.\n", rc);
./src/tests/ftest/cart/test_corpc_prefwd.c:		D_ERROR("Handler called before pre-forward callback\n");
./src/tests/ftest/cart/test_corpc_prefwd.c:		D_ERROR("Handler called before pre-forward callback\n");
./src/tests/ftest/cart/test_corpc_prefwd.c:		D_ERROR("pthread_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_prefwd.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/test_corpc_prefwd.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/test_corpc_prefwd.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_prefwd.c:			D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_prefwd.c:			D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_prefwd.c:			D_ERROR("post_reply callback was not called\n");
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_copc_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("Expected %d got %d\n", exp_rc, wait_info.rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("SET_ERR_CODE rpc failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_proto_register() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/no_pmix_corpc_errors.c:			D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:			D_ERROR("register_rpc_task failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_rank_uri_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("This test expects 8 instances of servers; got=%d\n",
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_group_secondary_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("Expected group_size=0 got=%d\n", grp_size);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:			D_ERROR("Rank addition failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_swim_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:			D_ERROR("crt_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:			D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("Failed to destroy a secondary group\n");
./src/tests/ftest/cart/no_pmix_corpc_errors.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("pthread_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_rank_uri_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_swim_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_proto_register() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:			D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:			D_ERROR("pthread_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_server.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/ftest/cart/test_hlc_net.c:			D_ERROR("crt_progress() failed rc=%d\n", rc);
./src/tests/ftest/cart/test_hlc_net.c:		D_ERROR("progress thread creating failed, rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("CORPC was sent to wrong rank=%d\n", my_rank);
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("pthread_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("This test assumes 5 ranks\n");
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_corpc_exclusive.c:		D_ERROR("crt_swim_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/test_swim_net.c:			D_ERROR("crt_progress() failed rc=%d\n", rc);
./src/tests/ftest/cart/test_swim_net.c:		D_ERROR("swim_progress() failed rc=%d\n", rc);
./src/tests/ftest/cart/test_swim_net.c:		D_ERROR("progress thread creating failed, rc=%d\n", rc);
./src/tests/ftest/cart/test_rpc_to_ghost_rank.c:			D_ERROR("rpc (opc: %#x) failed, rc: %d, "
./src/tests/ftest/cart/test_rpc_to_ghost_rank.c:			D_ERROR("crt_progress failed rc: %d.\n", rc);
./src/tests/ftest/cart/rpc_test_srv2.c:			D_ERROR("crt_progress failed %d", rc);
./src/tests/ftest/cart/rpc_test_srv.c:			D_ERROR("crt_progress failed %d", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("Unknown group '%s'\n", input->grp);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("Failed to set version %d on group '%s'; rc=%d\n",
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_copc_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("Expected %d got %d\n", exp_rc, wait_info.rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("SET_VERSION rpc failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_proto_register() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/no_pmix_group_version.c:			D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_rank_uri_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("This test expects 8 instances of servers; got=%d\n",
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_group_secondary_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("Expected group_size=0 got=%d\n", grp_size);
./src/tests/ftest/cart/no_pmix_group_version.c:			D_ERROR("Rank addition failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_swim_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:			D_ERROR("crt_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:			D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("Failed to destroy a secondary group\n");
./src/tests/ftest/cart/no_pmix_group_version.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/ftest/cart/test_proto_client.c:	D_ERROR("query_cb() failed, cb_info->pq_rc: %d.\n", cb_info->pq_rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Incorrect tag Expected %lu got %d (hdr=%d)\n",
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Expected %lu got %d\n", input->src_rank, hdr_src_rank);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/dual_iface_server.c:			D_ERROR("crt_context_create() ctx=%d failed; rc=%d\n",
./src/tests/ftest/cart/dual_iface_server.c:			D_ERROR("pthread_create() ctx=%d failed; rc=%d\n",
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_rank_uri_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_proto_register() failed; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to write uri to a file\n");
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to read uri from a file\n");
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to add rank=%d uri='%s'\n",
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to send rpc; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to send rpc; rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/ftest/cart/dual_iface_server.c:		D_ERROR("Failed to create tmp files %s %s\n",
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_proto_register() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("Failed to create group view; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("rank_list differs in size. expected %d got %d\n",
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_group_psr_set() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:				D_ERROR("crt_req_create() failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_launcher_client.c:			D_ERROR("crt_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_group_view_destroy() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_launcher_client.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Request was sent to wrong tag. Expected %lu got %d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("d_rank_list_dup_sort_uniq() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Line:%d crt_group_size() failed; rc=%d\n", line, rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Line:%d group_size expected=%d got=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Line:%d crt_group_ranks_get() failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Line:%d rank_list size expected=%d got=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Line:%d d_rank_list_dup_sort_uniq() failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("Line:%d rank_list[%d] expected=%d got=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_proto_register() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Failed to lookup group\n");
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_auto_rank_remove() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_rank_self_set(%d) failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_rank_uri_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("tc_load_group_from_file() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_swim_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("This test expects 8 instances of servers; got=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_secondary_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_size() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Expected group_size=0 got=%d\n", grp_size);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("Rank addition failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("crt_group_rank_s2p() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("Expected rank=%d got=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("crt_group_rank_p2s() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("Expected rank=%d got %d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_rank_remove() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Rank addition failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_rank_s2p() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Expected real rank=2 got=%d\n", tmp_rank);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Expected -DER_EXIST got %d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Expected -DER_EXIST got %d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Expected -DER_OOG got %d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_ranks_get() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("sem_init() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:				D_ERROR("crt_req_create() failed; rc=%d\n",
./src/tests/ftest/cart/no_pmix_group_test.c:				D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_corpc_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("crt_req_create() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("crt_req_send() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Failed to remove rank 50; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("rank list allocation failed\n");
./src/tests/ftest/cart/no_pmix_group_test.c:			D_ERROR("asprintf() failed\n");
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_primary_modify() failed; rc = %d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_primary_modify() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_primary_modify() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_primary_modify() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Failed to allocate lists\n");
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_secondary_modify() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_secondary_modify() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_group_secondary_modify() failed; rc=%d\n", rc);
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("Failed to destroy a secondary group\n");
./src/tests/ftest/cart/no_pmix_group_test.c:		D_ERROR("crt_finalize() failed with rc=%d\n", rc);
./src/tests/daos_perf.c:			D_ERROR("Failed to prepare d-key iterator: "DF_RC"\n",
./src/rdb/rdb_tx.c:		D_ERROR("truncated hdr: %zu < %zu\n", len, sizeof(uint32_t));
./src/rdb/rdb_tx.c:		D_ERROR("truncated opc: %zu < %zu\n", len, sizeof(uint8_t));
./src/rdb/rdb_tx.c:		D_ERROR("failed to decode kvs\n");
./src/rdb/rdb_tx.c:		D_ERROR("failed to decode key\n");
./src/rdb/rdb_tx.c:			D_ERROR("failed to decode value\n");
./src/rdb/rdb_tx.c:			D_ERROR("truncated attr: %zu < %zu\n", buf + len - p,
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": leader check: "DF_RC"\n", DP_DB(tx->dt_db),
./src/rdb/rdb_tx.c:			D_ERROR(DF_DB": failed to query free space\n",
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": unknown KVS class %x: %d\n", DP_DB(db), class,
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to check KVS existence: %d\n", DP_DB(db),
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to look up next object number: %d\n",
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": invalid next object number: "DF_X64"\n",
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to update next object number"DF_X64
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to update parent KVS: %d\n", DP_DB(db),
./src/rdb/rdb_tx.c:			D_ERROR(DF_DB": failed to check KVS existence: %d\n",
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to update parent KVS "DF_X64": %d\n",
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to punch KVS "DF_X64": %d\n", DP_DB(db),
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to update KVS "DF_X64": %d\n", DP_DB(db),
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": failed to update KVS "DF_X64": %d\n", DP_DB(db),
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": unknown update operation %u\n",
./src/rdb/rdb_tx.c:		D_ERROR(DF_DB": could not query free space: "DF_RC"\n",
./src/rdb/rdb_tx.c:			D_ERROR(DF_DB": invalid header: buf=%p, len="DF_U64"\n",
./src/rdb/rdb_tx.c:			D_ERROR(DF_DB": invalid entry format: buf=%p len="DF_U64
./src/rdb/rdb_tx.c:				D_ERROR(DF_DB": failed to apply entry "DF_U64
./src/rdb/rdb_tx.c:			D_ERROR(DF_DB": failed to discard entry "DF_U64": %d\n",
./src/rdb/rdb_util.c:		D_ERROR("truncated iov_len (head): %zu < %zu\n", len,
./src/rdb/rdb_util.c:		D_ERROR("invalid iov_len (head): "DF_U64" > "DF_U64"\n",
./src/rdb/rdb_util.c:			D_ERROR("truncated iov_buf: %zu < %zu\n", buf + len - p,
./src/rdb/rdb_util.c:		D_ERROR("truncated iov_len (tail): %zu < %zu\n", buf + len - p,
./src/rdb/rdb_util.c:		D_ERROR("inconsistent iov_lens: "DF_U64" != %u\n",
./src/rdb/rdb_util.c:		D_ERROR("truncated iov_len (tail): %zu < %zu\n", len,
./src/rdb/rdb_util.c:		D_ERROR("invalid iov_len (tail): "DF_U64" > "DF_U64"\n",
./src/rdb/rdb_util.c:			D_ERROR("truncated iov_buf: %zu < %zu\n",
./src/rdb/rdb_util.c:		D_ERROR("truncated iov_len (head): %zu < %zu\n",
./src/rdb/rdb_util.c:		D_ERROR("inconsistent iov_lens: "DF_U64" != %u\n",
./src/rdb/rdb_util.c:		D_ERROR("prep io descriptor error:"DF_RC"\n", DP_RC(rc));
./src/rdb/rdb_util.c:		D_ERROR(DF_UUID": failed to query vos pool space: "DF_RC"\n",
./src/rdb/tests/rdb_test.c:			D_ERROR("failed to open uuid file %s: %d\n", path,
./src/rdb/tests/rdb_test.c:		D_ERROR("failed to read %s: %d %d\n", path, rc, errno);
./src/rdb/tests/rdb_test.c:		D_ERROR(DF_UUID": failed to create uuid file %s: %d\n",
./src/rdb/tests/rdb_test.c:		D_ERROR(DF_UUID": failed to write uuid into %s: %d %d\n",
./src/rdb/tests/rdb_test.c:		D_ERROR(DF_UUID": failed to fsync %s: %d\n", DP_UUID(uuid),
./src/rdb/tests/rdb_test.c:		D_ERROR("%s: failed to remove path %s\n", test_svc_name, path);
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create RV RPC to node %d: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to send RV RPC to node %d: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create AE RPC to node %d: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to allocate entry array\n", DP_DB(db));
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to send AE RPC to node %d: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to add node %u\n", DP_DB(db), rank);
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to read replicas: "DF_RC"\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to load snapshot "DF_U64" (term="DF_U64
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create IS RPC to rank %u: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create key descriptor bulk for rank "
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create key bulk for rank %u: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to send IS RPC to rank %u: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": might have lost chunks: "DF_U64" > "DF_U64"\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to unpack IS chunk %ld/"DF_U64": %d\n",
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to swap LC records: %d\n",
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to update SLC record: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to persist vote %d: %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to update term %ld and vote %d: %d\n",
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to add node %u at idx "
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to remove node %u at idx "
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to apply entry "DF_U64": %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to persist entry "DF_U64": %d\n",
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to look up entry "DF_U64
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to update log tail "DF_U64": %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to discard entry "DF_U64": %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to update log base from "DF_U64" to "
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to update log tail "DF_U64": %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to delete %d entries starting at "
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to poll entries: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to update last aggregated index to "
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to compact to base "DF_U64
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to append debut entry for term "DF_U64
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to append entry: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to get sched req.\n", DP_DB(db));
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": raft_periodic() failed: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR("failed to create %s record: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR("failed to create %s "DF_UUID": %d\n",
./src/rdb/rdb_raft.c:		D_ERROR("failed to destroy %s "DF_UUID": %d\n",
./src/rdb/rdb_raft.c:		D_ERROR("failed to clear %s record: %d\n",
./src/rdb/rdb_raft.c:		D_ERROR("failed to create list of replicas: "DF_RC"\n",
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to look up entry "DF_U64" header: %d\n",
./src/rdb/rdb_raft.c:			D_ERROR(DF_DB": failed to look up entry "DF_U64
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to load entry "DF_U64": %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to look up SLC: "DF_RC"\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to open SLC "DF_UUID": %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to look up LC: "DF_RC"\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to open LC "DF_UUID": %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to recover LC "DF_U64": %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create applied CV: %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create events CV: %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create replies CV: %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create compact CV: %d\n", DP_DB(db),
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to create raft object\n", DP_DB(db));
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to process REQUESTVOTE from rank %u: "
./src/rdb/rdb_raft.c:		D_ERROR(DF_UUID": failed to send REQUESTVOTE reply to rank %u: "
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to process APPENDENTRIES from rank %u: "
./src/rdb/rdb_raft.c:		D_ERROR(DF_UUID": failed to send APPENDENTRIES reply to rank "
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to receive INSTALLSNAPSHOT chunk %ld"
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to process INSTALLSNAPSHOT from rank "
./src/rdb/rdb_raft.c:		D_ERROR(DF_UUID": failed to send INSTALLSNAPSHOT reply to rank "
./src/rdb/rdb_raft.c:		D_ERROR(DF_DB": failed to process opc %u response: %d\n",
./src/rdb/rdb.c:			D_ERROR(DF_UUID": failed to destroy %s: %d\n",
./src/rdb/rdb.c:		D_ERROR(DF_UUID": failed to destroy %s: "DF_RC"\n",
./src/rdb/rdb.c:		D_ERROR(DF_UUID": failed to allocate db object\n",
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to create mutex: %d\n", DP_DB(db), rc);
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to create raft mutex: %d\n",
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to create ref CV: %d\n", DP_DB(db), rc);
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to open %s: "DF_RC"\n", DP_DB(db), path,
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to query vos pool space: "DF_RC"\n",
./src/rdb/rdb.c:			D_ERROR(DF_DB": failed to reserve more vos pool SCM "
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to open metadata container: "DF_RC"\n",
./src/rdb/rdb.c:		D_ERROR(DF_DB": not fully initialized\n", DP_DB(db));
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to look up UUID: "DF_RC"\n", DP_DB(db),
./src/rdb/rdb.c:		D_ERROR(DF_DB": failed to look up layout version: "DF_RC"\n",
./src/rdb/rdb.c:		D_ERROR("db is NULL\n");
./src/rdb/rdb_rpc.c:			D_ERROR(DF_DB": RPC %x to rank %u failed: "DF_RC"\n",
./src/rdb/rdb_rpc.c:			D_ERROR(DF_DB": failed to abort %x to rank %u: "
./src/utils/self_test/self_test.c:			D_ERROR("crt_progress failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:		D_ERROR("crt_init failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:		D_ERROR("crt_context_create failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:		D_ERROR("crt_group_attach failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:		D_ERROR("failed to create progress thread: %s\n",
./src/utils/self_test/self_test.c:		D_ERROR("crt_rank_self_set failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:			D_ERROR("Creating start RPC failed to endpoint"
./src/utils/self_test/self_test.c:			D_ERROR("Failed to send start RPC to endpoint %u:%u; "
./src/utils/self_test/self_test.c:			D_ERROR("Failed to launch self-test 1:many session on"
./src/utils/self_test/self_test.c:		D_ERROR("Failed to launch any 1:many test sessions\n");
./src/utils/self_test/self_test.c:				D_ERROR("Creating status request RPC to"
./src/utils/self_test/self_test.c:				D_ERROR("Failed to send status RPC to endpoint"
./src/utils/self_test/self_test.c:				D_ERROR("Detected test failure on %u:%u -"
./src/utils/self_test/self_test.c:		D_ERROR("self_test_init failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:		D_ERROR("crt_group_rank failed; ret = %d\n", ret);
./src/utils/self_test/self_test.c:		D_ERROR("crt_group_lookup failed for group %s\n",
./src/utils/self_test/self_test.c:			D_ERROR("Failed to allocate latencies bulk handle;"
./src/utils/self_test/self_test.c:			D_ERROR("Testing message size (%d-%s %d-%s) failed;"
./src/utils/self_test/self_test.c:		D_ERROR("Could not join progress thread");
./src/utils/self_test/self_test.c:			D_ERROR("crt_group_detach failed; ret = %d\n",
./src/utils/self_test/self_test.c:		D_ERROR("crt_context_destroy failed; ret = %d\n", cleanup_ret);
./src/utils/self_test/self_test.c:		D_ERROR("crt_finalize failed; ret = %d\n", cleanup_ret);
./src/utils/self_test/self_test.c:		D_ERROR("Too many endpoints - current=%u, "
./src/utils/crt_launch/crt_launch.c:		D_ERROR("crt_init() failed; rc=%d\n", rc);
./src/utils/crt_launch/crt_launch.c:		D_ERROR("crt_context_create() failed; rc=%d\n", rc);
./src/utils/crt_launch/crt_launch.c:		D_ERROR("crt_self_uri_get() failed; rc=%d\n", rc);
./src/utils/crt_launch/crt_launch.c:		D_ERROR("ctx_context_destroy() failed; rc=%d\n", rc);
./src/utils/crt_launch/crt_launch.c:		D_ERROR("crt_finalize() failed; rc=%d\n", rc);
./src/utils/crt_launch/crt_launch.c:		D_ERROR("mkstemp() failed on %s, error: %s\n",
./src/utils/crt_launch/crt_launch.c:		D_ERROR("Failed to allocate hostbuf\n");
./src/utils/crt_launch/crt_launch.c:		D_ERROR("Failed to allocate recv_buf\n");
./src/utils/crt_launch/crt_launch.c:		D_ERROR("Failed to retrieve self uri\n");
./src/utils/crt_launch/crt_launch.c:		D_ERROR("generate_group_file() failed\n");
./src/utils/ctl/cart_ctl.c:		D_ERROR("arg string too long.\n");
./src/utils/ctl/cart_ctl.c:				D_ERROR("Too many target ranks.\n");
./src/utils/ctl/cart_ctl.c:			D_ERROR("Invalid rank range.\n");
./src/utils/ctl/cart_ctl.c:			D_ERROR("Too many target ranks.\n");
./src/utils/ctl/cart_ctl.c:		D_ERROR("arg string too long.\n");
./src/utils/ctl/cart_ctl.c:		D_ERROR("log msg (-m 'message') missing for add_log_msg\n");
./src/utils/ctl/cart_ctl.c:		D_ERROR("log mask (-l mask) missing for set_log\n");
./src/utils/ctl/cart_ctl.c:		D_ERROR("fault attributes missing for set_fi_attr.\n");
./src/utils/ctl/cart_ctl.c:			D_ERROR("wait_for_ranks() failed; rc=%d\n", rc);
./src/utils/ctl/cart_ctl.c:			D_ERROR("crt_req_create() failed. rc %d.\n", rc);
./src/utils/ctl/cart_ctl.c:			D_ERROR("crt_req_send() failed. rpc_req %p rank %d "
./src/utils/ctl/cart_ctl.c:			D_ERROR("tc_sem_timedwait failed, rc = %d\n", rc);
./src/utils/ctl/cart_ctl.c:		D_ERROR("ctl_init() failed, rc "DF_RC"\n", DP_RC(rc));
./src/container/oid_iv.c:			D_ERROR("failed to fetch and update max_oid "DF_RC"\n",
./src/container/oid_iv.c:		D_ERROR("iv update failed "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("failed to register cont RPCs: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while creating container: "DF_RC"\n",
./src/container/cli.c:			D_ERROR("Invalid uid\n");
./src/container/cli.c:			D_ERROR("Invalid gid\n");
./src/container/cli.c:		D_ERROR("failed to allocate props");
./src/container/cli.c:		D_ERROR("cannot set DAOS_PROP_CO_STATUS prop for cont_create "
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while destroying container: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to destroy container: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:			D_ERROR(DF_UUID": pmap_refresh cannot get required "
./src/container/cli.c:			D_ERROR(DF_UUID": pmap_refresh version (%d:%d), resched"
./src/container/cli.c:			D_ERROR(DF_UUID": pmap_refresh version (%d:%d), failed "
./src/container/cli.c:		D_ERROR(DF_UUID": pmap_refresh(task %p) failed, "DF_RC"\n",
./src/container/cli.c:		D_ERROR("RPC error while opening container: "DF_RC"\n",
./src/container/cli.c:			D_ERROR(DF_CONT": pmap_refresh fail "DF_RC"\n",
./src/container/cli.c:		D_ERROR("pool connection being invalidated\n");
./src/container/cli.c:		D_ERROR("container props failed to initialize");
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while closing container: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to close container: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("cannot close container, object not closed.\n");
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while querying container: "DF_RC"\n",
./src/container/cli.c:			D_ERROR("ignore bad dpt_type %d.\n", entry->dpe_type);
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while setting prop on container: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("Can't set OID property if container is created.\n");
./src/container/cli.c:			D_ERROR("To set DAOS_PROP_CO_STATUS property can-only "
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while updating ACL on container: "DF_RC"\n",
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while deleting ACL on container: "DF_RC"\n",
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("failed to allocate oids: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("failed to allocate oids: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("daos_cont_l2g failed, rc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("Invalid parameter, NULL glob pointer.\n");
./src/container/cli.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, iov_buf_len "
./src/container/cli.c:		D_ERROR("pool_hdl mismatch, in pool: "DF_UUID", in cont_glob: "
./src/container/cli.c:		D_ERROR("pool connection being invalidated\n");
./src/container/cli.c:			D_ERROR("pool: "DF_UUID" pamp_refresh failed, "
./src/container/cli.c:		D_ERROR("Bad hgh_magic: %#x.\n", cont_glob->dcg_magic);
./src/container/cli.c:		D_ERROR("Invalid parameter, pool_hdl/uuid/cont_hdl is null.\n");
./src/container/cli.c:		D_ERROR("dc_cont_g2l failed, rc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("RPC error while querying container: "DF_RC"\n",
./src/container/cli.c:		D_ERROR(DF_CONT": cannot find container service: "DF_RC"\n",
./src/container/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/container/cli.c:		D_ERROR("Invalid Arguments: n = %d, names = %p, values = %p"
./src/container/cli.c:			D_ERROR("Invalid Arguments: names[%d] = %s",
./src/container/cli.c:					D_ERROR("Invalid Arguments: values[%d] = %p, sizes[%d] = %lu",
./src/container/cli.c:		D_ERROR("Invalid epoch: "DF_U64"\n", args->epoch);
./src/container/cli.c:	D_ERROR("Unsupported API\n");
./src/container/cli.c:	D_ERROR("Unsupported API\n");
./src/container/cli.c:		D_ERROR("Specified snapshot is not supported\n");
./src/container/cli.c:		D_ERROR("Named Snapshots not yet supported\n");
./src/container/cli.c:		D_ERROR("Invalid epoch range.\n");
./src/container/cli.c:		D_ERROR("Unsupported epoch range.\n");
./src/container/cli.c:		D_ERROR("failed to find target %u\n", tgt_idx);
./src/container/cli.c:		D_ERROR("failed to find target %u\n", node_id);
./src/container/srv_target.c:			D_ERROR(DF_CONT": VOS aggregate failed. "DF_RC"\n",
./src/container/srv_target.c:		D_ERROR(DF_CONT"[%d]: Failed to create aggregation ULT. %d\n",
./src/container/srv_target.c:			D_ERROR(DF_UUID": DTX reindex failed: rc = %d\n",
./src/container/srv_target.c:		D_ERROR(DF_UUID": Failed to create DTX reindex ULT: rc %d\n",
./src/container/srv_target.c:			D_ERROR(DF_CONT": failed to lookup%s container: "
./src/container/srv_target.c:		D_ERROR(DF_CONT"[%d]: Container is in stopping\n",
./src/container/srv_target.c:			D_ERROR(DF_CONT": Container is still in open(%d)\n",
./src/container/srv_target.c:			D_ERROR("container is still in-use\n");
./src/container/srv_target.c:		D_ERROR(DF_CONT": destroy vos container failed "DF_RC"\n",
./src/container/srv_target.c:		D_ERROR(DF_CONT" : failed to find pool child\n",
./src/container/srv_target.c:				D_ERROR(DF_CONT": conflicting container : hdl="
./src/container/srv_target.c:			D_ERROR("Failed to register the container "DF_UUID
./src/container/srv_target.c:		D_ERROR(DF_UUID "failed to get index : rc "DF_RC"\n",
./src/container/srv_target.c:		D_ERROR("open "DF_UUID"/"DF_UUID"/"DF_UUID":"DF_RC"\n",
./src/container/srv_target.c:		D_ERROR(DF_CONT": Failed %s: "DF_RC"",
./src/container/srv_target.c:		D_ERROR(DF_CONT": Failed :%s: "DF_RC"",
./src/container/srv_target.c:		D_ERROR(DF_CONT": Snapshot notify failed: "DF_RC"\n",
./src/container/srv_target.c:		D_ERROR(DF_CONT": Aggregation failed: "DF_RC"\n",
./src/container/srv_target.c:		D_ERROR("Open container "DF_UUID" failed: rc = "DF_RC"\n",
./src/container/srv_target.c:		D_ERROR("prepare obj iterator failed "DF_RC"\n", DP_RC(rc));
./src/container/srv_target.c:			D_ERROR("set iterator cursor failed: "DF_RC"\n",
./src/container/srv_target.c:				D_ERROR("Fetch obj failed: "DF_RC"\n",
./src/container/srv_target.c:				D_ERROR("Fetch obj failed: "DF_RC"\n",
./src/container/srv_target.c:			D_ERROR(DF_UUID": Can not collect min epoch: %d\n",
./src/container/srv.c:		D_ERROR("failed to create thread-local container cache: %d\n",
./src/container/srv.c:		D_ERROR("failed to create thread-local container handle cache:"
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": permission denied to aggregate\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": snapshot notify failed on %d targets\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": failed to create snapshot: %d\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": permission denied to create snapshot\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": permission denied to delete snapshot\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": failed to delete snapshot [%lu]: %d\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": permission denied to list snapshots\n",
./src/container/srv_epoch.c:		D_ERROR(DF_UUID": Failed to start rdb tx: %d\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": Failed to look container: %d\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": Failed to read snap list: %d\n",
./src/container/srv_epoch.c:		D_ERROR(DF_CONT": Failed to update snapshots IV: %d\n",
./src/container/srv_csum_recalc.c:		D_ERROR("calc ("DF_CI") != phy ("DF_CI")\n",
./src/container/container_iv.c:		D_ERROR("failed to create tree: "DF_RC"\n", DP_RC(rc));
./src/container/container_iv.c:			D_ERROR("dbtree iterate fails %d\n", rc);
./src/container/container_iv.c:		D_ERROR("bad iv_class_id %d.\n", entry->iv_class->iv_class_id);
./src/container/container_iv.c:				D_ERROR("create cont snap iv entry failed "
./src/container/container_iv.c:				D_ERROR("create cont prop iv entry failed "
./src/container/container_iv.c:		D_ERROR("iv invalidate failed %d\n", rc);
./src/container/container_iv.c:		D_ERROR("iv invalidate failed "DF_RC"\n", DP_RC(rc));
./src/container/container_iv.c:		D_ERROR("cont_iv_prop_g2l failed "DF_RC"\n", DP_RC(rc));
./src/container/container_iv.c:		D_ERROR("daos_prop_copy failed "DF_RC"\n", DP_RC(rc));
./src/container/srv_container.c:		D_ERROR("Domain contains %d failed "
./src/container/srv_container.c:		D_ERROR("failed to create cs_lock: %d\n", rc);
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to look up layout version: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": start ec agg leader failed: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to initialize layout version: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to create container KVS: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to create container handle KVS: %d\n",
./src/container/srv_container.c:			D_ERROR("bad dpe_type %d.\n", entry->dpe_type);
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to create cont\n",
./src/container/srv_container.c:			D_ERROR(DF_CONT": container lookup failed: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT" failed to create container attribute KVS: "
./src/container/srv_container.c:		D_ERROR(DF_CONT": create ghce property failed: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": create alloced_oid prop failed: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT" daos_prop_dup failed.\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT" cont_create_prop_prepare failed: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT" cont_prop_write failed: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT" failed to create container snapshots KVS: "
./src/container/srv_container.c:		D_ERROR(DF_CONT" failed to create container user attr KVS: "
./src/container/srv_container.c:		D_ERROR(DF_CONT" failed to create container handle index KVS: "
./src/container/srv_container.c:		D_ERROR(DF_CONT": failed to destroy %d targets\n",
./src/container/srv_container.c:		D_ERROR("invalid key/value size: key="DF_U64" value="DF_U64"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to delete cont\n",
./src/container/srv_container.c:			D_ERROR(DF_UUID": ranks init failed: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID" Failed to create aggregation ULT. %d\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID"Failed to get req for ec eph query ULT\n",
./src/container/srv_container.c:		D_ERROR("Failed to allocate container descriptor\n");
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to cont_prop_write "DF_RC"\n",
./src/container/srv_container.c:			D_ERROR(DF_CONT": found conflicting container handle\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": refusing attempt to open with flags "
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied opening with flags "
./src/container/srv_container.c:				D_ERROR(DF_CONT":set_unclean failed, "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": RF broken, set DAOS_COO_FORCE to force "
./src/container/srv_container.c:		D_ERROR(DF_CONT": cont_iv_prop_update failed %d.\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": cont_iv_capability_update failed %d.\n",
./src/container/srv_container.c:			D_ERROR("bad label length %zu (> %d).\n", value.iov_len,
./src/container/srv_container.c:			D_ERROR("bad owner length %zu (> %d).\n", value.iov_len,
./src/container/srv_container.c:			D_ERROR("bad owner group length %zu (> %d).\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied, no access to props\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to get ACL\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to get props\n",
./src/container/srv_container.c:			D_ERROR(DF_CONT": set_unclean failed, "DF_RC"\n",
./src/container/srv_container.c:			D_ERROR(DF_CONT": iv_prop_update failed, "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": cont_prop_read failed "DF_RC"\n",
./src/container/srv_container.c:			D_ERROR(DF_CONT": cont_status_verify failed "DF_RC"\n",
./src/container/srv_container.c:			D_ERROR("cont_iv_prop_fetch failed "DF_RC"\n",
./src/container/srv_container.c:					D_ERROR("label mismatch %s - %s.\n",
./src/container/srv_container.c:					D_ERROR("type %d mismatch "DF_U64" - "
./src/container/srv_container.c:					D_ERROR("mismatch %s - %s.\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied for set-ACL\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied for set-owner\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied for set-props\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to read prop for cont, rc=%d\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to update prop IV for cont, "
./src/container/srv_container.c:		D_ERROR(DF_UUID": failed to read ACL prop for cont, rc=%d\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": cont prop read didn't return ACL property\n",
./src/container/srv_container.c:		D_ERROR(DF_UUID": couldn't copy container's ACL for "
./src/container/srv_container.c:			D_ERROR(DF_UUID": failed to add/update ACEs\n",
./src/container/srv_container.c:		D_ERROR("Unable to remove ACE from ACL\n");
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to set container attr\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to del container attr\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to get container attr\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": permission denied to list container attr\n",
./src/container/srv_container.c:		D_ERROR("invalid key/value size: key="DF_U64" value="DF_U64"\n",
./src/container/srv_container.c:		D_ERROR("invalid key size: key="DF_U64"\n", key->iov_len);
./src/container/srv_container.c:				D_ERROR(DF_CONT": rejecting unauthorized "
./src/container/srv_container.c:				D_ERROR(DF_CONT": failed to look up container "
./src/container/srv_container.c:		D_ERROR(DF_CONT": rpc=%p opc=%u hdl="DF_UUID" rdb_tx_commit "
./src/container/srv_container.c:		D_ERROR(DF_CONT": rpc %p: hdl="DF_UUID" opc=%u find leader\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": failed to lookup alloced_oid: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": failed to update alloced_oid: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": cannot find pool service: "DF_RC"\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": failed to create cont set prop rpc: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": failed to set prop for container: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": Failed to look up cont svc: %d\n",
./src/container/srv_container.c:		D_ERROR(DF_CONT": Unable to commit RDB transaction\n",
./src/common/lru.c:		D_ERROR("Error missing ops/mandatory-ops for LRU cache\n");
./src/common/btree.c:		D_ERROR("Failed to setup mem class %d: "DF_RC"\n", uma->uma_id,
./src/common/btree.c:		D_ERROR("Failed to free rec: rc = %d\n", rc);
./src/common/btree.c:		D_ERROR("Failed to free node: %s\n", strerror(errno));
./src/common/btree.c:			D_ERROR("Failed to free tree root: %s\n",
./src/common/btree.c:			D_ERROR("Failed to add btr_root to transaction\n");
./src/common/btree.c:			D_ERROR("Failed to resize root node: %s", d_errstr(rc));
./src/common/btree.c:			D_ERROR("Failed to add node to txn record: %s",
./src/common/btree.c:		D_ERROR("Failed to probe: rc = %d\n", tcx->tc_probe_rc);
./src/common/btree.c:		D_ERROR("Failed to commit the transaction: %d\n", rc);
./src/common/btree.c:		D_ERROR("failed to prepare tree iterator: "DF_RC"\n",
./src/common/btree.c:		D_ERROR("failed to initialize iterator: "DF_RC"\n", DP_RC(rc));
./src/common/btree.c:			D_ERROR("failed to fetch iterator: "DF_RC"\n",
./src/common/btree.c:			D_ERROR("failed to move iterator: "DF_RC"\n",
./src/common/btree.c:		D_ERROR("Unsupported features "DF_X64"/"DF_X64"\n",
./src/common/btree.c:		D_ERROR("Invalid ovhd argument\n");
./src/common/btree.c:		D_ERROR("Invalid class id: %d\n", tclass);
./src/common/btree.c:		D_ERROR("No record meta size callback for tree class: %d\n",
./src/common/acl_principal.c:		D_ERROR("Failed to allocate string for name\n");
./src/common/acl_principal.c:		D_ERROR("Error from getpwuid_r: %d\n", rc);
./src/common/acl_principal.c:		D_ERROR("Error from getgrgid_r: %d\n", rc);
./src/common/acl_principal.c:		D_ERROR("Couldn't extract ID name from '%s'\n", principal);
./src/common/acl_principal.c:		D_ERROR("Error from getpwnam_r: %d\n", rc);
./src/common/acl_principal.c:		D_ERROR("Error from getgrnam_r: %d\n", rc);
./src/common/pool_map.c:		D_ERROR("Invalid domain array, len=%u\n", ndomains);
./src/common/pool_map.c:		D_ERROR("pool_buf_parse failed: "DF_RC"\n", DP_RC(rc));
./src/common/pool_map.c:		D_ERROR("pool_map_initialise failed: "DF_RC"\n", DP_RC(rc));
./src/common/pool_map.c:		D_ERROR("could not update number of failed targets: "DF_RC"\n",
./src/common/pool_map.c:		D_ERROR("Uninitialized pool map\n");
./src/common/pool_map.c:		D_ERROR("Uninitialized pool map\n");
./src/common/pool_map.c:		D_ERROR("Uninitialized pool map\n");
./src/common/pool_map.c:		D_ERROR("RF broken, found %d DOWN node, newly fail %d, rf %d, "
./src/common/pool_map.c:		D_ERROR("RF broken, found %d fail, DOWN %d, newly fail %d, "
./src/common/pool_map.c:		D_ERROR("pmap_fail_stat_check, "DF_RC"\n", DP_RC(rc));
./src/common/pool_map.c:		D_ERROR("Cannot decrease pool map version %u/%u\n",
./src/common/mem.c:		D_ERROR("Failed to allocate txi array\n");
./src/common/mem.c:		D_ERROR("Invalid stage %d\n", stage);
./src/common/mem.c:			D_ERROR("Too many transaction callbacks "
./src/common/mem.c:		D_ERROR("Transaction aborted for unknown reason\n");
./src/common/mem.c:		D_ERROR("pmdk returned negative errno %d\n", err);
./src/common/rsvc.c:		D_ERROR("removed rank %u from replica list due to "DF_RC"\n",
./src/common/rsvc.c:		D_ERROR("empty or invalid hint from leader rank %u: hint.term="
./src/common/rsvc.c:		D_ERROR("truncated buffer: %zu < %zu\n", len, sizeof(*p));
./src/common/rsvc.c:			D_ERROR("bad buffer magic: %x\n", p->scb_magic);
./src/common/rsvc.c:		D_ERROR("zero nranks\n");
./src/common/rsvc.c:		D_ERROR("truncated buffer: %zu < %zu\n", len,
./src/common/prop.c:		D_ERROR("cannot create daos_prop_t with %d entries(> %d).\n",
./src/common/prop.c:		D_ERROR("NULL input\n");
./src/common/prop.c:		D_ERROR("invalid NULL %s\n", prop_name);
./src/common/prop.c:		D_ERROR("invalid %s len=%lu, max=%lu\n",
./src/common/prop.c:		D_ERROR("NULL properties\n");
./src/common/prop.c:		D_ERROR("invalid ddp_nr %d (> %d).\n",
./src/common/prop.c:			D_ERROR("invalid properties, NON-NULL dpp_entries with "
./src/common/prop.c:		D_ERROR("invalid properties, NULL dpp_entries with non-zero "
./src/common/prop.c:				D_ERROR("invalid type %d for pool.\n", type);
./src/common/prop.c:				D_ERROR("invalid type %d for container.\n",
./src/common/prop.c:				D_ERROR("invalid space_rb "DF_U64".\n", val);
./src/common/prop.c:				D_ERROR("invalid reclaim "DF_U64".\n", val);
./src/common/prop.c:				D_ERROR("invalid layout type "DF_U64".\n", val);
./src/common/prop.c:				D_ERROR("invalid checksum type "DF_U64".\n",
./src/common/prop.c:				D_ERROR("invalid chunk size "
./src/common/prop.c:				D_ERROR("invalid csum server verify property "
./src/common/prop.c:				D_ERROR("invalid deduplication parameter "
./src/common/prop.c:				D_ERROR("invalid deduplication threshold "DF_U64
./src/common/prop.c:				D_ERROR("invalid redundancy factor "DF_U64".\n",
./src/common/prop.c:				D_ERROR("invalid redundancy level "DF_U64".\n",
./src/common/prop.c:				D_ERROR("invalid compression parameter "
./src/common/prop.c:				D_ERROR("invalid encryption parameter "
./src/common/prop.c:				D_ERROR("invalid container status %d\n",
./src/common/prop.c:			D_ERROR("invalid dpe_type %d.\n", type);
./src/common/prop.c:			D_ERROR("failed to dup label.\n");
./src/common/prop.c:			D_ERROR("failed to dup ACL\n");
./src/common/prop.c:			D_ERROR("failed to dup ownership info.\n");
./src/common/prop.c:			D_ERROR("failed dup rank list\n");
./src/common/prop.c:			D_ERROR("failed to dup roots\n");
./src/common/prop.c:		D_ERROR("no prop or empty prop in reply.\n");
./src/common/prop.c:			D_ERROR("cannot find prop entry for type %d.\n", type);
./src/common/prop.c:		D_ERROR("failed to dup roots\n");
./src/common/prop.c:		D_ERROR("ACL mismatch, NULL ptr\n");
./src/common/prop.c:		D_ERROR("ACL len mistmatch, %lu != %lu\n",
./src/common/prop.c:		D_ERROR("ACL content mismatch\n");
./src/common/tests/lru.c:		D_ERROR("Error in allocating lru_refs");
./src/common/tests/lru.c:		D_ERROR("Error in holding reference\n");
./src/common/tests/lru.c:		D_ERROR("<exec><size bits(^2)><num_keys>\n");
./src/common/tests/btree.c:		D_ERROR("Preserved record mismatch while delete\n");
./src/common/tests/utest_common.c:		D_ERROR("Problem in tx begin\n");
./src/common/tests/utest_common.c:		D_ERROR("Problem in tx add\n");
./src/common/tests/utest_common.c:		D_ERROR("Problem in tx end\n");
./src/common/tests/utest_common.c:		D_ERROR("Get SCM Usage failed\n");
./src/common/tests/utest_common.c:		D_ERROR("SCM Usage not increased\n");
./src/common/tests/utest_common.c:		D_ERROR("Get SCM Usage failed\n");
./src/common/tests/utest_common.c:		D_ERROR("SCM Usage not decreased\n");
./src/common/tests/utest_common.c:		D_ERROR("Get SCM Usage failed\n");
./src/common/tests/utest_common.c:		D_ERROR("SCM not freed up in full\n");
./src/common/tests/btree_direct.c:		D_ERROR("Preserved record mismatch while delete\n");
./src/common/checksum.c:		D_ERROR("No function table");
./src/common/checksum.c:		D_ERROR("%d != %d", a->cs_type, b->cs_type);
./src/common/checksum.c:		D_ERROR("%d != %d", a_len, b_len);
./src/common/checksum.c:			D_ERROR("daos_sgl_processor error: "DF_RC"\n",
./src/common/checksum.c:				D_ERROR("daos_sgl_processor error: "DF_RC"\n",
./src/common/checksum.c:		D_ERROR("daos_csummer_reset error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:		D_ERROR("daos_csummer_update error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:		D_ERROR("daos_csummer_finish error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:		D_ERROR("daos_csummer_alloc_iods_csums error: "DF_RC"\n",
./src/common/checksum.c:				D_ERROR("calc_for_iov error: "DF_RC"\n",
./src/common/checksum.c:			D_ERROR("calc_csum error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:		D_ERROR("calc_for_iov error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:		D_ERROR("Invalid params\n");
./src/common/checksum.c:		D_ERROR("daos_csummer_calc_iods error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:			D_ERROR("Data corruption found. "
./src/common/checksum.c:		D_ERROR("checksums is enabled, but dcs_csum_info is invalid, "
./src/common/checksum.c:		D_ERROR("daos_csummer_calc error: "DF_RC"\n", DP_RC(rc));
./src/common/checksum.c:		D_ERROR("Key checksums don't match. Key: "DF_KEY" Calculated: "
./src/common/checksum.c:				D_ERROR("Error casting iod (%d/%d) "
./src/common/fault_domain.c:		D_ERROR("null compressed fd tree\n");
./src/common/fault_domain.c:		D_ERROR("compressed len=%u, less than minimum %u\n",
./src/common/fault_domain.c:		D_ERROR("null pointer for result\n");
./src/common/fault_domain.c:		D_ERROR("fault domain tree is truncated\n");
./src/common/fault_domain.c:		D_ERROR("incoming ptr is null\n");
./src/common/fault_domain.c:		D_ERROR("fault domain tree not initialized\n");
./src/common/fault_domain.c:		D_ERROR("fault domain tree is truncated\n");
./src/common/fault_domain.c:		D_ERROR("fault domain tree is null\n");
./src/common/fault_domain.c:		D_ERROR("fault domain tree is not initialized\n");
./src/common/fault_domain.c:		D_ERROR("len = %u, needed minimum = %u)\n", compressed_len,
./src/common/fault_domain.c:		D_ERROR("domain_len = %u is not a multiple of %u\n",
./src/common/qat.c:		D_ERROR("QAT: Failed to initialize memory driver\n");
./src/common/qat.c:		D_ERROR("QAT: Failed to start user process SSL\n");
./src/common/qat.c:		D_ERROR("QAT: No DC instance\n");
./src/common/acl_api.c:		D_ERROR("Failed to allocate hash table entry\n");
./src/common/acl_api.c:		D_ERROR("Failed to insert new hash entry, rc="DF_RC"\n",
./src/common/acl_api.c:		D_ERROR("Failed to create hash table, rc="DF_RC"\n", DP_RC(rc));
./src/common/acl_api.c:		D_ERROR("invalid dal_len %d, should with in [%zu, %d].\n",
./src/common/acl_api.c:		D_ERROR("invalid dal_len %d, not 8 bytes aligned.\n",
./src/common/tse.c:		D_ERROR("Can't add a callback for a completed task\n");
./src/common/tse.c:		D_ERROR("Two tasks should belong to the same scheduler.\n");
./src/common/tse.c:		D_ERROR("Can't add a dependency for a completed task (%p)\n",
./src/common/tse.c:		D_ERROR("Scheduler is canceling, can't re-insert task\n");
./src/common/tse.c:		D_ERROR("Task body function can't be NULL.\n");
./src/common/tse.c:		D_ERROR("Can't re-init a task that is not running or "
./src/common/tse.c:		D_ERROR("task %p, dtp_stack_top reset from %d to zero.\n",
./src/common/tse.c:		D_ERROR("Scheduler is canceling, can't reset task\n");
./src/common/tse.c:		D_ERROR("Can't reset a task in init or running state.\n");
./src/common/tse.c:		D_ERROR("task scheduler processing list should be empty\n");
./src/common/tse.c:		D_ERROR("task user list should be empty\n");
./src/common/tse.c:		D_ERROR("task dep list should be empty\n");
./src/common/tse.c:		D_ERROR("task completion CB list should be empty\n");
./src/common/tse.c:		D_ERROR("task prep CB list should be empty\n");
./src/common/tse.c:		D_ERROR("task %p, dtp_stack_top reset from %d to zero.\n",
./src/common/drpc.c:		D_ERROR("Can't build a call from NULL context\n");
./src/common/drpc.c:		D_ERROR("Failed to close socket fd %d, errno=%d\n",
./src/common/drpc.c:		D_ERROR("Failed to open socket, errno=%d\n", errno);
./src/common/drpc.c:		D_ERROR("Failed to set flags on socket fd %d, errno=%d\n",
./src/common/drpc.c:		D_ERROR("Failed to connect to %s, errno=%d(%s)\n",
./src/common/drpc.c:		D_ERROR("Failed to bind socket at '%.4096s', fd=%d, errno=%d\n",
./src/common/drpc.c:		D_ERROR("Failed to start listening on socket fd %d, errno=%d\n",
./src/common/drpc.c:		D_ERROR("Failed to accept connection on listener fd %d, "
./src/common/drpc.c:		D_ERROR("Failed to sendmsg on socket fd %d, errno=%d\n",
./src/common/drpc.c:		D_ERROR("Failed to recvmsg on socket fd %d, errno=%d\n",
./src/common/drpc.c:		D_ERROR("NULL Drpc__Call\n");
./src/common/drpc.c:		D_ERROR("Bad input, sockaddr=%p, handler=%p\n",
./src/common/drpc.c:		D_ERROR("dRPC context is not a listener\n");
./src/common/drpc.c:		D_ERROR("Couldn't unpack message into Drpc__Call\n");
./src/common/drpc.c:		D_ERROR("Call pointer is NULL\n");
./src/common/drpc.c:		D_ERROR("dRPC context isn't a valid listener\n");
./src/common/drpc.c:		D_ERROR("Response was NULL\n");
./src/common/drpc.c:		D_ERROR("dRPC context isn't a valid listener\n");
./src/common/drpc.c:		D_ERROR("Context is already closed\n");
./src/common/drpc.c:		D_ERROR("Ref count is already zero\n");
./src/common/drpc.c:			D_ERROR("Failed to close dRPC socket (rc=%d)\n", ret);
./src/common/drpc.c:		D_ERROR("Context is null\n");
./src/common/drpc.c:		D_ERROR("Can't increment current ref count (count=%u)\n",
./src/common/tests_dmg_helpers.c:		D_ERROR("failed to create arg\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("realloc failed\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("arg list too long\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("failed to invoke %s\n", cmd_str);
./src/common/tests_dmg_helpers.c:				D_ERROR("JSON input too large\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("failed to parse JSON at offset %d: %s %c\n",
./src/common/tests_dmg_helpers.c:		D_ERROR("%s exited with %d\n", cmd_str, pc_rc % 0xFF);
./src/common/tests_dmg_helpers.c:			D_ERROR("dmg error: %s\n", err_str);
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to extract pool UUID from JSON\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to extract UUID string from JSON\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("failed parsing uuid_str\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to parse pool svcreps from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("failed to allocate rank list\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("invalid ACL\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("failed to create rank string\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to resolve %d to passwd entry\n", uid);
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to resolve %d to group name\n", gid);
./src/common/tests_dmg_helpers.c:				D_ERROR("failed to create tmpfile name\n");
./src/common/tests_dmg_helpers.c:				D_ERROR("failed to open %s\n", tmp_name);
./src/common/tests_dmg_helpers.c:				D_ERROR("failed to write ACL to tmpfile\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("dmg failed");
./src/common/tests_dmg_helpers.c:		D_ERROR("failed to parse pool info\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("failed to dup svc rank list\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("dmg failed");
./src/common/tests_dmg_helpers.c:		D_ERROR("dmg failed");
./src/common/tests_dmg_helpers.c:			D_ERROR("Hostname is empty\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract uuid from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract tgtids from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract state from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract rank from JSON\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("dmg failed");
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to extract host_storage_map from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract hosts from JSON\n");
./src/common/tests_dmg_helpers.c:					D_ERROR("unable to extract devices\n");
./src/common/tests_dmg_helpers.c:		D_ERROR("dmg command failed");
./src/common/tests_dmg_helpers.c:		D_ERROR("dmg command failed");
./src/common/tests_dmg_helpers.c:		D_ERROR("unable to extract host_storage_map from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract hosts from JSON\n");
./src/common/tests_dmg_helpers.c:			D_ERROR("unable to extract hosts from JSON\n");
./src/common/proc.c:		D_ERROR("bad proc_op %d.\n", proc_op);
./src/common/proc.c:			D_ERROR("invalid entries nr %d (> %d).\n",
./src/common/proc.c:		D_ERROR("bad proc_op %d.\n", proc_op);
./src/common/profile.c:			D_ERROR("dump failed: %s\n", strerror(errno));
./src/common/profile.c:			D_ERROR("start dump ult failed: rc "DF_RC"\n",
./src/common/profile.c:		D_ERROR("open %s: %s\n", path, strerror(errno));
./src/common/acl_util.c:				D_ERROR("Couldn't alloc ACE structure\n");
./src/common/acl_util.c:		D_ERROR("Couldn't allocate temporary string\n");
./src/common/acl_util.c:		D_ERROR("Empty or NULL buffer\n");
./src/common/acl_util.c:		D_ERROR("NULL ACE string\n");
./src/common/acl_util.c:		D_ERROR("No ACE strings provided\n");
./src/common/acl_util.c:		D_ERROR("NULL ACL pointer\n");
./src/common/acl_util.c:			D_ERROR("Failed to convert string '%s' to ACE, "
./src/common/acl_util.c:		D_ERROR("Failed to allocate ACL\n");
./src/common/acl_util.c:		D_ERROR("Resulting ACL was invalid\n");
./src/common/acl_util.c:		D_ERROR("Couldn't convert ACE to string: "DF_RC"\n", DP_RC(rc));
./src/common/acl_util.c:		D_ERROR("Null output params: ace_strs=%p, ace_nr=%p\n",
./src/common/acl_util.c:		D_ERROR("ACL is not valid\n");
./src/common/acl_util.c:		D_ERROR("failed verbose translation for ACE string '%s': %d\n",
./src/common/acl_util.c:		D_ERROR("Invalid stream\n");
./src/common/fail_loc.c:		D_ERROR("ignore nr %d, should within [1, 4].\n", nr);
./src/common/fail_loc.c:		D_ERROR("Failed to set fault attr, "DF_RC"\n",
./src/common/misc.c:		D_ERROR("%u > %u\n", src_nr, dst_nr);
./src/common/misc.c:			D_ERROR("%d : %u > %u\n", i,
./src/common/misc.c:					D_ERROR("%d:%d "DF_U64" > "DF_U64"\n",
./src/common/misc.c:		D_ERROR("failed to create handle hash table: "DF_RC"\n",
./src/common/compression_qat.c:		D_ERROR("Invalid qat compression level: %d\n", level);
./src/common/compression.c:		D_ERROR("No function table");
./src/common/btree_class.c:		D_ERROR("failed to update \"%s\": "DF_RC"\n", (char *)key,
./src/common/btree_class.c:			D_ERROR("failed to look up \"%s\": %d\n", (char *)key,
./src/common/btree_class.c:			D_ERROR("failed to look up \"%s\": %d\n", (char *)key,
./src/common/btree_class.c:			D_ERROR("failed to delete \"%s\": %d\n", (char *)key,
./src/common/btree_class.c:		D_ERROR("failed to create \"%s\": "DF_RC"\n", (char *)key,
./src/common/btree_class.c:			D_ERROR("failed to open \"%s\": "DF_RC"\n", (char *)key,
./src/common/btree_class.c:			D_ERROR("failed to destroy \"%s\": %d\n", (char *)key,
./src/common/btree_class.c:		D_ERROR("failed to update "DF_UUID": "DF_RC"\n", DP_UUID(uuid),
./src/common/btree_class.c:			D_ERROR("failed to look up "DF_UUID": %d\n",
./src/common/btree_class.c:		D_ERROR("failed to fetch opc=%d in="DF_UUID": %d\n", opc,
./src/common/btree_class.c:			D_ERROR("failed to delete "DF_UUID": %d\n",
./src/common/btree_class.c:		D_ERROR("failed to create "DF_UUID": "DF_RC"\n", DP_UUID(uuid),
./src/common/btree_class.c:			D_ERROR("failed to open "DF_UUID": %d\n", DP_UUID(uuid),
./src/common/btree_class.c:			D_ERROR("failed to destroy "DF_UUID": %d\n",
./src/common/btree_class.c:		D_ERROR("failed to update "DF_U64": "DF_RC"\n", epoch,
./src/common/btree_class.c:		D_ERROR("failed to look up "DF_U64": "DF_RC"\n", epoch,
./src/common/btree_class.c:		D_ERROR("failed to fetch opc=%d in="DF_U64": %d\n", opc,
./src/common/btree_class.c:		D_ERROR("failed to delete "DF_U64": "DF_RC"\n", epoch,
./src/common/compression_isal.c:		D_ERROR("Invalid isa-l compression level: %d\n", level);
./src/dtx/dtx_srv.c:		D_ERROR("Failed to locate pool="DF_UUID" cont="DF_UUID
./src/dtx/dtx_srv.c:		D_ERROR("send reply failed for DTX rpc %u: rc = "DF_RC"\n", opc,
./src/dtx/dtx_srv.c:		D_ERROR("Failed to create DTX batched commit ULT: "DF_RC"\n",
./src/dtx/dtx_common.c:		D_ERROR(DF_UUID": Fail to flush CoS cache: rc = %d\n",
./src/dtx/dtx_common.c:		D_ERROR("Failed to get sched request.\n");
./src/dtx/dtx_common.c:		D_ERROR("Too many modifications in a single transaction:"
./src/dtx/dtx_common.c:		D_ERROR("initializing DTX "DF_DTI" with invalid epoch: value="
./src/dtx/dtx_common.c:			D_ERROR(DF_UUID": Fail to sync commit DTX "DF_DTI
./src/dtx/dtx_common.c:				D_ERROR(DF_UUID": Fail to DTX CoS commit: %d\n",
./src/dtx/dtx_common.c:		D_ERROR("Failed to create DTX CoS btree: "DF_RC"\n",
./src/dtx/dtx_common.c:			D_ERROR("Not sure about whether the old RPC "DF_DTI
./src/dtx/dtx_common.c:		D_ERROR("ABT_future_create failed %d.\n", rc);
./src/dtx/dtx_common.c:		D_ERROR("ult create failed "DF_RC"\n", DP_RC(rc));
./src/dtx/dtx_common.c:				D_ERROR("Failed to fetch dtx: "DF_RC"\n",
./src/dtx/dtx_common.c:			D_ERROR("Fail to commit dtx: "DF_RC"\n", DP_RC(rc));
./src/dtx/dtx_resync.c:			D_ERROR("Failed to commit the DTXs: rc = "DF_RC"\n",
./src/dtx/dtx_resync.c:		D_ERROR("Failed to open container for resync DTX "
./src/dtx/dtx_resync.c:		D_ERROR(DF_UUID" dtx resync failed: rc %d\n",
./src/dtx/dtx_resync.c:		D_ERROR("dtx resync collective "DF_UUID" %d.\n",
./src/dtx/dtx_rpc.c:		D_ERROR("ABT_future_create failed for opc %x, len = %d: "
./src/dtx/dtx_rpc.c:				D_ERROR("Failed to find DTX leader for "DF_DTI
./src/object/srv_csum.c:			D_ERROR("[%d] Original extent corrupted. "
./src/object/srv_csum.c:			D_ERROR("Invalid csum for biov %d.\n", i);
./src/object/srv_csum.c:				D_ERROR("Failed to add csum for "
./src/object/srv_mod.c:		D_ERROR("failed to obj_ec_codec_init\n");
./src/object/srv_mod.c:	D_ERROR("Object module init error: %s\n", d_errstr(rc));
./src/object/obj_verify.c:		D_ERROR(DF_OID" dkey is empty\n", DP_OID(oid));
./src/object/obj_verify.c:		D_ERROR(DF_OID" akey is empty\n", DP_OID(oid));
./src/object/obj_verify.c:			D_ERROR(DF_OID" akey "DF_KEY
./src/object/obj_verify.c:			D_ERROR(DF_OID" akey "DF_KEY
./src/object/obj_verify.c:		D_ERROR(DF_OID" akey "DF_KEY
./src/object/obj_verify.c:		D_ERROR(DF_OID" akey is empty\n", DP_OID(oid));
./src/object/obj_verify.c:			D_ERROR(DF_OID" akey "DF_KEY
./src/object/obj_verify.c:			D_ERROR(DF_OID" akey "DF_KEY
./src/object/obj_verify.c:			D_ERROR(DF_OID" akey "DF_KEY
./src/object/obj_verify.c:			D_ERROR(DF_OID" invalid type %d\n",
./src/object/obj_verify.c:		D_ERROR("dc_tx_local-open failed: "DF_RC"\n", DP_RC(rc));
./src/object/obj_verify.c:			D_ERROR("Failed to verify object list: "DF_RC"\n",
./src/object/obj_verify.c:				D_ERROR("Failed to verify cursor: "DF_RC"\n",
./src/object/obj_verify.c:				D_ERROR("Failed to verify because of "
./src/object/obj_verify.c:				D_ERROR("Failed to verify cmp: "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR("shard %u obj_shards_nr %u\n", shard,
./src/object/cli_obj.c:			D_ERROR(DF_OID" obj_reasb_req_init failed %d.\n",
./src/object/cli_obj.c:		D_ERROR(DF_OID" obj_ec_req_reasb failed %d.\n",
./src/object/cli_obj.c:		D_ERROR("obj_shard_open failed on shard %d, "DF_RC"\n",
./src/object/cli_obj.c:			D_ERROR(DF_OID" obj_shard_open %u, rc "DF_RC".\n",
./src/object/cli_obj.c:			D_ERROR(DF_OID" obj_ec_get_degrade failed, rc "
./src/object/cli_obj.c:				D_ERROR(DF_OID" no valid shard, rc "DF_RC"\n",
./src/object/cli_obj.c:	D_ERROR("Unsupported API\n");
./src/object/cli_obj.c:	D_ERROR("Unsupported API\n");
./src/object/cli_obj.c:	D_ERROR("Unsupported API\n");
./src/object/cli_obj.c:		D_ERROR(DF_OID" obj_get_oca failed.\n",
./src/object/cli_obj.c:		D_ERROR(DF_OID" dc_cont_hdl2redunfac failed, "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR(DF_OID" obj:cont tolerate faiures %d:%d, "DF_RC"\n",
./src/object/cli_obj.c:	D_ERROR("Unsupported API\n");
./src/object/cli_obj.c:		D_ERROR("failed by obj_hdl2ptr.\n");
./src/object/cli_obj.c:			D_ERROR("Failed to re-init task (%p)\n", task);
./src/object/cli_obj.c:				D_ERROR("Failed to add dependency on pool "
./src/object/cli_obj.c:	D_ERROR("Failed to retry task=%p(err=%d), io_retry=%d, rc "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR("task %p "DF_OID" obj_ec_recov_prep failed "DF_RC"\n",
./src/object/cli_obj.c:			D_ERROR("task %p "DF_OID" dc_tx_local_open failed "
./src/object/cli_obj.c:			D_ERROR("task %p "DF_OID" dc_obj_fetch_task_create "
./src/object/cli_obj.c:			D_ERROR("task %p "DF_OID" dc_task_depend failed "DF_RC
./src/object/cli_obj.c:		D_ERROR("task %p "DF_OID" dc_task_resched failed "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR("task %p "DF_OID" EC recovery failed "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR("%s failed "DF_RC"\n",
./src/object/cli_obj.c:			D_ERROR("failed to create recx tree: "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR("invalid req - iod size "DF_U64", sgl size "DF_U64"\n",
./src/object/cli_obj.c:			D_ERROR("Invalid argument of NULL akey\n");
./src/object/cli_obj.c:				D_ERROR("Invalid IOD, the bit-63 of rx_idx is "
./src/object/cli_obj.c:			D_ERROR("Unknown iod type=%d\n", iods[i].iod_type);
./src/object/cli_obj.c:			D_ERROR("IOD_NONE ignores value iod_nr=%d, recx=%p\n",
./src/object/cli_obj.c:				D_ERROR("invalid update req with NULL sgl\n");
./src/object/cli_obj.c:				D_ERROR("IOD_ARRAY should have valid recxs\n");
./src/object/cli_obj.c:				D_ERROR("IOD_SINGLE iod_nr %d != 1\n",
./src/object/cli_obj.c:				D_ERROR("invalid update req with NULL sgl\n");
./src/object/cli_obj.c:		D_ERROR("Key type or recx not specified in flags.\n");
./src/object/cli_obj.c:		D_ERROR("Query type not specified in flags.\n");
./src/object/cli_obj.c:		D_ERROR("Invalid Query.\n");
./src/object/cli_obj.c:		D_ERROR("dkey can't be NULL.\n");
./src/object/cli_obj.c:		D_ERROR("akey can't be NULL with query type.\n");
./src/object/cli_obj.c:		D_ERROR("recx can't be NULL with query type.\n");
./src/object/cli_obj.c:			D_ERROR("Can't query non UINT64 typed Dkeys.\n");
./src/object/cli_obj.c:			D_ERROR("Invalid Dkey iov.\n");
./src/object/cli_obj.c:			D_ERROR("Can't query non UINT64 typed Akeys.\n");
./src/object/cli_obj.c:			D_ERROR("Invalid Akey iov.\n");
./src/object/cli_obj.c:				D_ERROR("Invalid fetch parameter.\n");
./src/object/cli_obj.c:				D_ERROR("Invalid update parameter.\n");
./src/object/cli_obj.c:			D_ERROR("NULL dkeys\n");
./src/object/cli_obj.c:			D_ERROR("invalid dkey (NULL iov_buf or iov_len.\n");
./src/object/cli_obj.c:			D_ERROR("NULL or invalid dkey\n");
./src/object/cli_obj.c:				D_ERROR("No dkey for opc %x\n", opc);
./src/object/cli_obj.c:				D_ERROR("Invalid API parameter.\n");
./src/object/cli_obj.c:				D_ERROR("mutually exclusive th and eprs "
./src/object/cli_obj.c:		D_ERROR("bad opc %d.\n", opc);
./src/object/cli_obj.c:					D_ERROR("Fetch from invalid shard, "
./src/object/cli_obj.c:		D_ERROR("bad opc %d.\n", opc);
./src/object/cli_obj.c:		D_ERROR("opc %d "DF_OID", obj_shards_2_fwtgts failed "
./src/object/cli_obj.c:			D_ERROR("shard %d, obj_shard2tgtid failed "DF_RC"\n",
./src/object/cli_obj.c:		D_ERROR("bad opc %d.\n", obj_auxi->opc);
./src/object/cli_obj.c:		D_ERROR(DF_OID" shard %u open: %d\n",
./src/object/cli_obj.c:			D_ERROR(DF_OID" recx convert failed: %d\n",
./src/object/cli_obj.c:		D_ERROR("task %p, register_comp_cb "DF_RC"\n", task, DP_RC(rc));
./src/object/cli_obj.c:		D_ERROR("daos_csummer_calc_iods error: "DF_RC"\n", DP_RC(rc));
./src/object/cli_obj.c:		D_ERROR("daos_csummer_calc_iods error: "DF_RC"\n", DP_RC(rc));
./src/object/cli_obj.c:			D_ERROR(DF_OID" obj_req_reassemb failed %d.\n",
./src/object/cli_obj.c:		D_ERROR("obj_csum_fetch error: "DF_RC"\n", DP_RC(rc));
./src/object/cli_obj.c:		D_ERROR(DF_OID" obj_req_reassemb failed %d.\n",
./src/object/cli_obj.c:		D_ERROR("update task %p, register_comp_cb "DF_RC"\n",
./src/object/cli_obj.c:			D_ERROR("obj_csum_update error: "DF_RC"\n", DP_RC(rc));
./src/object/cli_obj.c:			D_ERROR(DF_OID" shard list %d prep: %d\n",
./src/object/cli_obj.c:			D_ERROR(DF_OID" shard list %d prep: %d\n",
./src/object/cli_obj.c:		D_ERROR("No shard on "DF_OID"\n", DP_OID(obj->cob_md.omd_id));
./src/object/cli_obj.c:			D_ERROR(DF_OID" can not find grp %d\n",
./src/object/cli_obj.c:				D_ERROR(DF_OID" can not find any shard %d\n",
./src/object/cli_obj.c:		D_ERROR(DF_OID" Can not find shard grp %d: %d\n",
./src/object/cli_obj.c:		D_ERROR("punch (%d) task %p, register_comp_cb "DF_RC"\n",
./src/object/cli_obj.c:					D_ERROR(DF_OID" no valid shard, rc "
./src/object/cli_obj.c:		D_ERROR(DF_OID" no MEM for verify group, reps %u\n",
./src/object/srv_cli.c:		D_ERROR("task %p, dc_obj_layout_refresh failed rc %d\n",
./src/object/srv_cli.c:		D_ERROR("Failed to re-init task (%p)\n", task);
./src/object/obj_class.c:		D_ERROR("Invalid sharding hint\n");
./src/object/obj_class.c:			D_ERROR("invalid k %d p %d (max k %d, max p %d)\n",
./src/object/obj_class.c:			D_ERROR("invalid k %d / p %d (min k 2, min p 1).\n",
./src/object/obj_class.c:			D_ERROR("invalid k %d p %d (parity target number cannot"
./src/object/obj_class.c:		D_ERROR("object class ID should be unique\n");
./src/object/obj_class.c:		D_ERROR("object class scale attribute should be unique\n");
./src/object/obj_class.c:		D_ERROR("object class resilience attribute should be unique\n");
./src/object/cli_shard.c:		D_ERROR("bad sgl/siod, iov_idx %d, iov_offset "DF_U64
./src/object/cli_shard.c:				D_ERROR("dc_rw_cb_iod_sgl_copy failed (object: "
./src/object/cli_shard.c:				D_ERROR("Data Verification failed (object: "
./src/object/cli_shard.c:				D_ERROR("Data Verification failed (object: "
./src/object/cli_shard.c:					D_ERROR(DF_OID" obj_ec_get_degrade "
./src/object/cli_shard.c:		D_ERROR("Failed to create csum report request, task %p.\n",
./src/object/cli_shard.c:		D_ERROR("Inducing -DER_TIMEDOUT error on shard I/O fetch\n");
./src/object/cli_shard.c:		D_ERROR("Inducing -DER_TIMEDOUT error on shard I/O update\n");
./src/object/cli_shard.c:		D_ERROR("Inducing -DER_NOSPACE error on shard I/O update\n");
./src/object/cli_shard.c:		D_ERROR("Drop RPC for shard I/O update\n");
./src/object/cli_shard.c:		D_ERROR("RPC %d failed, "DF_RC"\n", opc, DP_RC(ret));
./src/object/cli_shard.c:			D_ERROR("failed to end transaction operation (rc=%d "
./src/object/cli_shard.c:			D_ERROR("rpc %p opc %d to rank %d tag %d"
./src/object/cli_shard.c:					D_ERROR(DF_OID" obj_ec_get_degrade "
./src/object/cli_shard.c:			D_ERROR("out:%u != in:%u for "DF_UOID" with eph "
./src/object/cli_shard.c:				D_ERROR("fail to add recov list for "DF_UOID
./src/object/cli_shard.c:				D_ERROR("Invalid nrs %u != %u\n", nrs_count,
./src/object/cli_shard.c:			D_ERROR("daos_csummer_verify_key error for %s: %d",
./src/object/cli_shard.c:		D_ERROR("RPC %d failed: %d\n", opc, ret);
./src/object/cli_shard.c:			D_ERROR("failed to end transaction operation (rc=%d "
./src/object/cli_shard.c:			D_ERROR("rpc %p RPC %d failed: "DF_RC"\n",
./src/object/cli_shard.c:		D_ERROR("key enumerate get %d > %d more kds, %d\n",
./src/object/cli_shard.c:		D_ERROR("RPC %d failed, "DF_RC"\n", opc, DP_RC(ret));
./src/object/cli_shard.c:			D_ERROR("failed to end transaction operation (rc=%d "
./src/object/cli_shard.c:			D_ERROR("rpc %p RPC %d failed: %d\n",
./src/object/cli_shard.c:			D_ERROR("Invalid Dkey obtained\n");
./src/object/cli_shard.c:		D_ERROR("OBJ_SYNC RPC failed: rc = %d\n", ret);
./src/object/cli_shard.c:		D_ERROR("rpc %p OBJ_SYNC_RPC failed: rc = "DF_RC"\n", rpc,
./src/object/srv_obj_migrate.c:		D_ERROR("dbtree_destroy, cont "DF_UUID" failed, rc %d.\n",
./src/object/srv_obj_migrate.c:		D_ERROR("dbtree iterate failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("failed to create rebuild tree: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:			D_ERROR("lookup cont "DF_UUID" failed, "DF_RC"\n",
./src/object/srv_obj_migrate.c:			D_ERROR(DF_UUID"/"DF_UOID" "DF_RC"\n",
./src/object/srv_obj_migrate.c:			D_ERROR("lookup cont "DF_UUID" failed, rc %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR("tree_create cont "DF_UUID" failed, rc %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("failed to insert "DF_UOID": rc %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR(DF_UUID": failed to create migrate tls: %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR("mrone_obj_fetch "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:				D_ERROR("setting up iods csums failed: "
./src/object/srv_obj_migrate.c:				D_ERROR("migrate failed: rc %d\n", rc);
./src/object/srv_obj_migrate.c:			D_ERROR("failed to alloc iod csums: rc "DF_RC". "
./src/object/srv_obj_migrate.c:			D_ERROR("migrate failed: rc "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:			D_ERROR("Error initializing csummer");
./src/object/srv_obj_migrate.c:			D_ERROR("Error allocating iods");
./src/object/srv_obj_migrate.c:		D_ERROR("migrate dkey "DF_KEY" failed rc %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("migrate dkey "DF_KEY" failed rc %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("unable to allocate iod csums.");
./src/object/srv_obj_migrate.c:		D_ERROR(DF_UOID"preparing update fails: %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("Prepare EIOD for "DF_UOID" error: %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("migrate dkey "DF_KEY" failed rc %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("Failed to alloc iod csums");
./src/object/srv_obj_migrate.c:		D_ERROR("Post EIOD for "DF_UOID" error: %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR(DF_UOID" punch dkey failed: rc %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR(DF_UOID" punch akey failed: rc %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR(DF_UOID" punch obj failed: rc %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR(DF_KEY" dst_iod size "DF_U64" != "DF_U64
./src/object/srv_obj_migrate.c:		D_ERROR(DF_UOID" migrate punch failed rc %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR("migrate "DF_UOID" failed: %d\n",
./src/object/srv_obj_migrate.c:			D_ERROR("start migrate "DF_UOID" failed: %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("migrate abort: %d\n", rc);
./src/object/srv_obj_migrate.c:		D_ERROR("Failed to open cont to clear obj before migrate; pool="
./src/object/srv_obj_migrate.c:		D_ERROR("Migrate failed to destroy object prior to "
./src/object/srv_obj_migrate.c:			D_ERROR("destroy_existing_obj failed: "DF_RC"\n",
./src/object/srv_obj_migrate.c:		D_ERROR("obj "DF_UOID" migration failed: "DF_RC"\n",
./src/object/srv_obj_migrate.c:		D_ERROR("dbtree_iter_delete failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("dbtree_iter_probe failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("ds_cont_fetch_snaps failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:			D_ERROR("dsc_pool_open failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("dsc_cont_open failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("dbtree_iter_delete failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:			D_ERROR("dbtree iterate failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:			D_ERROR("failed to create tree: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:			D_ERROR("failed to create tree: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("oids %u shards %u ephs %d\n",
./src/object/srv_obj_migrate.c:		D_ERROR("Wrong tgt idx %d\n", migrate_in->om_tgt_idx);
./src/object/srv_obj_migrate.c:			D_ERROR("insert "DF_UOID"/"DF_U64" "DF_UUID
./src/object/srv_obj_migrate.c:			D_ERROR("Create migrate ULT failed: rc %d\n", rc);
./src/object/srv_obj_migrate.c:		D_ERROR("crt_req_create failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_migrate.c:		D_ERROR("dss_rpc_send failed: "DF_RC"\n", DP_RC(rc));
./src/object/obj_tx.c:		D_ERROR("failed to find transaction handle "DF_X64"\n",
./src/object/obj_tx.c:		D_ERROR("Can't set epoch on non-open/non-failed/non-committing "
./src/object/obj_tx.c:		D_ERROR("invalid reply epoch: DAOS_EPOCH_MAX\n");
./src/object/obj_tx.c:			D_ERROR("TX is not valid for modification.\n");
./src/object/obj_tx.c:			D_ERROR("TX is READ ONLY.\n");
./src/object/obj_tx.c:			D_ERROR("NOT allow modification because "
./src/object/obj_tx.c:		D_ERROR("TX is not valid for fetch.\n");
./src/object/obj_tx.c:		D_ERROR("cannot find transaction handle "DF_X64"\n",
./src/object/obj_tx.c:		D_ERROR("cannot find transaction handle "DF_X64"\n", th.cookie);
./src/object/obj_tx.c:			D_ERROR("cannot register completion callback: "DF_RC
./src/object/obj_tx.c:			D_ERROR("cannot depend on task %p: "DF_RC"\n",
./src/object/obj_tx.c:			D_ERROR("Failed to refresh the pool map: "
./src/object/obj_tx.c:			D_ERROR("Failed to add dependency on pool query: "
./src/object/obj_tx.c:			D_ERROR("Failed to re-init task (%p): "
./src/object/obj_tx.c:					D_ERROR("Two many (%d) shards in the "
./src/object/obj_tx.c:		D_ERROR("All shards in the redundancy group for the opc %u "
./src/object/obj_tx.c:		D_ERROR("Failed to register completion cb: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Invalid TX handle\n");
./src/object/obj_tx.c:		D_ERROR("Can't commit non-open state TX (%d)\n",
./src/object/obj_tx.c:		D_ERROR("Invalid TX handle\n");
./src/object/obj_tx.c:		D_ERROR("Can't commit non-open state TX (%d)\n",
./src/object/obj_tx.c:		D_ERROR("Can't close a TX in committing\n");
./src/object/obj_tx.c:		D_ERROR("Can't restart non-failed state TX (%d)\n",
./src/object/obj_tx.c:		D_ERROR("Can't close a TX in committing\n");
./src/object/obj_tx.c:		D_ERROR("Fail to add dep on check existence task: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Fail to add CB for check existence task: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Unsupportted TX attach opc %d\n", opc);
./src/object/obj_tx.c:			D_ERROR("Fail to restart TX for convert task "DF_RC"\n",
./src/object/obj_tx.c:			D_ERROR("Fail to re-attach TX for convert task "
./src/object/obj_tx.c:			D_ERROR("Fail to re-add CB for TX convert task: "
./src/object/obj_tx.c:		D_ERROR("Unsupportted TX convert opc %d\n", opc);
./src/object/obj_tx.c:		D_ERROR("Fail to open TX for opc %u: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Fail to attach TX for opc %u: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Fail to create tx convert task for opc %u: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Fail to add dep on TX convert task: "DF_RC"\n",
./src/object/obj_tx.c:		D_ERROR("Fail to add CB for TX convert task: "DF_RC"\n",
./src/object/srv_obj_remote.c:		D_ERROR("crt_req_create failed, rc "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_remote.c:		D_ERROR("crt_req_send failed, rc "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_remote.c:		D_ERROR("crt_req_create failed, rc "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_remote.c:		D_ERROR("crt_req_send failed, rc "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj_remote.c:		D_ERROR("CPD crt_req_create failed, idx %u: "DF_RC"\n",
./src/object/srv_obj_remote.c:		D_ERROR("crt_req_send failed, rc "DF_RC"\n", DP_RC(rc));
./src/object/obj_rpc.c:		D_ERROR("invalid I/O descriptor, iod_nr = 0\n");
./src/object/cli_mod.c:		D_ERROR("failed to register daos obj RPCs: "DF_RC"\n",
./src/object/cli_mod.c:		D_ERROR("failed to obj_ec_codec_init: "DF_RC"\n", DP_RC(rc));
./src/object/obj_enum.c:		D_ERROR("different size "DF_U64" != "DF_U64"\n", arg->rsize,
./src/object/obj_enum.c:		D_ERROR("Corruption found for recx "DF_RECX"\n",
./src/object/obj_enum.c:		D_ERROR("Error calculating checksum: "DF_RC"\n", DP_RC(rc));
./src/object/obj_enum.c:			D_ERROR("Issue copying data");
./src/object/obj_enum.c:			D_ERROR("Found corruption!");
./src/object/obj_enum.c:			D_ERROR("Issue calculating checksum");
./src/object/obj_enum.c:			D_ERROR("Issue filling csum data");
./src/object/obj_enum.c:			D_ERROR("Issue filling csum data");
./src/object/obj_enum.c:			D_ERROR("Issue copying csum");
./src/object/obj_enum.c:			D_ERROR("Copy recx data failed "DF_RC"\n", DP_RC(rc));
./src/object/obj_enum.c:		D_ERROR("Expected a valid checksum info to unpack");
./src/object/obj_enum.c:		D_ERROR("No dkey for akey "DF_KEY" invalid buf.\n",
./src/object/obj_enum.c:		D_ERROR("punched epoch for empty akey rc %d\n", -DER_INVAL);
./src/object/obj_enum.c:		D_ERROR("invalid list buf "DF_RC"\n", DP_RC(rc));
./src/object/obj_enum.c:		D_ERROR("Invalid object ID size: "DF_U64
./src/object/obj_enum.c:		D_ERROR("unknown kds type %d\n", kds->kd_val_type);
./src/object/obj_enum.c:			D_ERROR("complete io failed: rc "DF_RC"\n",
./src/object/obj_enum.c:			D_ERROR("iterate %dth failed: rc"DF_RC"\n", i,
./src/object/cli_ec.c:		D_ERROR("oer_recxs non-NULL, cannot init again.\n");
./src/object/cli_ec.c:		D_ERROR("failed to get ec codec, oid "DF_OID".\n", DP_OID(oid));
./src/object/cli_ec.c:			D_ERROR(DF_OID" failed to get ec codec.\n",
./src/object/cli_ec.c:				D_ERROR("stripe encoding failed rc %d.\n", rc);
./src/object/cli_ec.c:				D_ERROR("with %d failure, not recoverable.\n",
./src/object/cli_ec.c:		D_ERROR(DF_OID" obj_ec_recx_encode failed %d.\n",
./src/object/cli_ec.c:				D_ERROR(DF_OID" obj_ec_get_degrade failed, "
./src/object/cli_ec.c:			D_ERROR(DF_OID" can not get codec.\n", DP_OID(oid));
./src/object/cli_ec.c:		D_ERROR(DF_OID" can not get codec.\n",
./src/object/cli_ec.c:			D_ERROR(DF_OID" obj_ec_recx_encode failed %d.\n",
./src/object/cli_ec.c:				D_ERROR(DF_OID" singv_req_reasb failed %d.\n",
./src/object/cli_ec.c:			D_ERROR(DF_OID" obj_ec_recx_scan failed %d.\n",
./src/object/cli_ec.c:			D_ERROR(DF_OID" obj_ec_recx_reasb failed %d.\n",
./src/object/cli_ec.c:		D_ERROR(DF_OID" obj_ec_encode failed %d.\n", DP_OID(oid), rc);
./src/object/cli_ec.c:			D_ERROR(DF_OID" obj_ec_tgt_oiod_init failed.\n",
./src/object/cli_ec.c:			D_ERROR("overlapped recx with different shadow epoch, "
./src/object/cli_ec.c:				D_ERROR("failed to add stripe "DF_RC"\n",
./src/object/cli_ec.c:				D_ERROR("failed to add stripe "DF_RC"\n",
./src/object/cli_ec.c:		D_ERROR(DF_OID" obj_ec_recov_prep failed, "DF_RC".\n",
./src/object/srv_obj.c:			D_ERROR("send reply failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:		D_ERROR("bulk transfer failed: %d\n", cb_info->bci_rc);
./src/object/srv_obj.c:		D_ERROR("No remote bulks provided\n");
./src/object/srv_obj.c:				D_ERROR("crt_bulk_create %d error (%d).\n",
./src/object/srv_obj.c:				D_ERROR("crt_bulk_transfer %d error (%d).\n",
./src/object/srv_obj.c:		D_ERROR("rpc %p contains invalid sizes count %d for "
./src/object/srv_obj.c:			D_ERROR("Failed to add csum for iod\n");
./src/object/srv_obj.c:			D_ERROR("daos_csummer_verify_key error for dkey: %d",
./src/object/srv_obj.c:			D_ERROR("daos_csummer_verify_key error for akey: %d",
./src/object/srv_obj.c:		D_ERROR("BIO NVMe context not initialized for xs:%d, tgt:%d\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID" oca not found or not EC obj: "DF_RC"\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID" Fetch begin failed: "DF_RC"\n",
./src/object/srv_obj.c:		D_ERROR("csum_verify_keys error: %d", rc);
./src/object/srv_obj.c:			D_ERROR("csum: Corrupting data (network)\n");
./src/object/srv_obj.c:			D_ERROR(DF_UOID" Update begin failed: "DF_RC"\n",
./src/object/srv_obj.c:				D_ERROR(DF_UOID"iod_recx_dup failed: "DF_RC"\n",
./src/object/srv_obj.c:				D_ERROR(DF_UOID" Fetch shadow failed: "DF_RC
./src/object/srv_obj.c:			D_ERROR(DF_UOID" obj_singv_ec_rw_filter failed: "
./src/object/srv_obj.c:		D_ERROR(DF_UOID" bio_iod_prep failed: "DF_RC".\n",
./src/object/srv_obj.c:			D_ERROR(DF_UOID" fetch csum init failed: %d.\n",
./src/object/srv_obj.c:				D_ERROR(DF_UOID" fetch verify failed: %d.\n",
./src/object/srv_obj.c:			D_ERROR("csum: Corrupting data (DISK)\n");
./src/object/srv_obj.c:		D_ERROR("cont hdl "DF_UUID" sec_capas "DF_U64", "
./src/object/srv_obj.c:		D_ERROR("cont hdl "DF_UUID" sec_capas "DF_U64", "
./src/object/srv_obj.c:		D_ERROR("Stale container handle "DF_UUID" != "DF_UUID"\n",
./src/object/srv_obj.c:		D_ERROR("ioc_begin failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:		D_ERROR(DF_UOID" Update begin failed: "DF_RC"\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID" bio_iod_prep failed: "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID" bulk transfer failed: "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID" bio_iod_post failed: "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID" vos_update_end failed: "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR("ioc_begin failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:			D_ERROR(DF_UOID" Update begin failed: "DF_RC"\n",
./src/object/srv_obj.c:			D_ERROR(DF_UOID" bio_iod_prep failed: "DF_RC".\n",
./src/object/srv_obj.c:			D_ERROR(DF_UOID" bulk transfer failed: "DF_RC".\n",
./src/object/srv_obj.c:			D_ERROR(DF_UOID" bio_iod_post failed: "DF_RC".\n",
./src/object/srv_obj.c:			D_ERROR(DF_UOID" vos_update_end failed: "DF_RC".\n",
./src/object/srv_obj.c:				D_ERROR(DF_UOID"array_remove failed: "DF_RC"\n",
./src/object/srv_obj.c:			D_ERROR(DF_UOID"array_remove failed: "DF_RC"\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID": Failed to start DTX for update "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID": error="DF_RC".\n", DP_UOID(orw->orw_oid),
./src/object/srv_obj.c:			D_ERROR(DF_UOID": obj_ec_rw_req_split failed, rc %d.\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID": Failed to start DTX for update "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR("send reply failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:		D_ERROR(DF_UOID": mutually exclusive transaction ID and epoch "
./src/object/srv_obj.c:		D_ERROR("send reply failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:		D_ERROR("opc %#x not supported\n", opc);
./src/object/srv_obj.c:		D_ERROR(DF_UOID": Failed to start DTX for punch "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR(DF_UOID": Failed to start DTX for punch "DF_RC".\n",
./src/object/srv_obj.c:		D_ERROR("send reply failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:		D_ERROR("send reply failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:			D_ERROR("Checksums is enabled but the csum info is "
./src/object/srv_obj.c:				D_ERROR("Data Verification failed (object: "
./src/object/srv_obj.c:				D_ERROR("Data Verification failed (object: "
./src/object/srv_obj.c:		D_ERROR("Send CPD reply failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_obj.c:			D_ERROR(DF_DTI" expected sub read, but got opc %u\n",
./src/object/srv_obj.c:			D_ERROR("Failed to set read TS for obj "DF_UOID
./src/object/srv_obj.c:			D_ERROR("Unmatched iod NR %u vs %u for obj "DF_UOID
./src/object/srv_obj.c:			D_ERROR("bio_iod_prep failed for obj "DF_UOID
./src/object/srv_obj.c:				D_ERROR("Bulk transfer failed for obj "
./src/object/srv_obj.c:				D_ERROR("Non-bulk transfer failed for obj "
./src/object/srv_obj.c:			D_ERROR(DF_DTI" ABT_eventual_wait failed: "DF_RC"\n",
./src/object/srv_obj.c:					D_ERROR("dedup_verify failed for obj "
./src/object/srv_obj.c:				D_ERROR("iod_post failed for obj "DF_UOID
./src/object/srv_obj.c:				D_ERROR("Unknown sub request opc %u for obj "
./src/object/srv_obj.c:			D_ERROR("obj_ec_rw_req_split failed for obj "
./src/object/srv_obj.c:		D_ERROR("DTX ID cannot be empty\n");
./src/object/srv_obj.c:			D_ERROR("Unexpected CPD RPC format for non-leader: "
./src/object/srv_obj.c:		D_ERROR("Unexpected CPD RPC format for leader: "
./src/object/obj_utils.c:		D_ERROR("recx overlap between ["DF_U64", "DF_U64"], "
./src/object/obj_utils.c:		D_ERROR("failed to register DBTREE_CLASS_RECX: "DF_RC"\n",
./src/object/obj_utils.c:	D_ERROR("Failed to initialize DAOS object utilities\n");
./src/object/srv_ec_aggregate.c:		D_ERROR("Failed to open object: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("dsc_obj_fetch failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("vos_obj_fetch failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:				D_ERROR("array_remov failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:			D_ERROR("vos_obj_update failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:					D_ERROR("array_remove fails: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:		D_ERROR("vos_obj_fetch failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("obj_req_create failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:			D_ERROR("crt_bulk_create failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("dss_rpc_send failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("remote update rpc failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("pool_map_find_failed_tgts failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("peer parity tgt failed\n");
./src/object/srv_ec_aggregate.c:		D_ERROR("Failed to open object: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("dsc_obj_fetch failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("pool_map_find_failed_tgts failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("peer parity tgt failed\n");
./src/object/srv_ec_aggregate.c:		D_ERROR("obj_req_create failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("crt_bulk_create returned: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("dss_rpc_send failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("remote update rpc failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("Failed to open object: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("vos_update_begin failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:				D_ERROR("agg_peer_update fail: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("agg_update_vos failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("agg_peer_update failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("remove_holdovers failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("Process stripe returned "DF_RC"\n",
./src/object/srv_ec_aggregate.c:					D_ERROR("Holdover returned "DF_RC"\n",
./src/object/srv_ec_aggregate.c:			D_ERROR("Process stripe returned "DF_RC"\n",
./src/object/srv_ec_aggregate.c:				D_ERROR("Holdover returned "DF_RC"\n",
./src/object/srv_ec_aggregate.c:					D_ERROR("peer update failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:					D_ERROR("holdover failed: "DF_RC"\n",
./src/object/srv_ec_aggregate.c:			D_ERROR("ds_pool_check_leader failed "DF_RC"\n",
./src/object/srv_ec_aggregate.c:		D_ERROR("EC aggregation failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("Property allocation failed\n");
./src/object/srv_ec_aggregate.c:		D_ERROR("ds_pool_iv_prop_fetch failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("dsc_pool_open failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("dsc_cont_open failed: "DF_RC"\n", DP_RC(rc));
./src/object/srv_ec_aggregate.c:		D_ERROR("Fail to start DTX for EC aggregation: "DF_RC"\n",
./src/object/rpc_csum.c:		D_ERROR("invalid csum buf len %iu < csum len %hu\n",
./src/cart/crt_corpc.c:		D_ERROR("d_rank_list_dup failed, rc: %d.\n", rc);
./src/cart/crt_corpc.c:			D_ERROR("crt_grp_lookup_grpid: %s failed: %d\n",
./src/cart/crt_corpc.c:		D_ERROR("crt_corpc_info_init failed, rc: %d, opc: %#x.\n",
./src/cart/crt_corpc.c:		D_ERROR("crt_corpc_req_hdlr failed, rc: %d, opc: %#x.\n",
./src/cart/crt_corpc.c:		D_ERROR("crt_corpc_chained_bulk_cb, bulk failed, rc: %d, "
./src/cart/crt_corpc.c:		D_ERROR("crt_bulk_access failed, rc: %d.\n", rc);
./src/cart/crt_corpc.c:		D_ERROR("bad zero seg_num.\n");
./src/cart/crt_corpc.c:		D_ERROR("crt_bulk_access failed, rc: %d.\n", rc);
./src/cart/crt_corpc.c:		D_ERROR("crt_bulk_free failed, rc: %d.\n", rc);
./src/cart/crt_corpc.c:		D_ERROR("CaRT not initialized yet.\n");
./src/cart/crt_corpc.c:		D_ERROR("corpc invalid on client-side.\n");
./src/cart/crt_corpc.c:			D_ERROR("crt_bulk_get_len failed, rc: %d, opc: %#x.\n",
./src/cart/crt_corpc.c:			D_ERROR("crt_bulk_create failed, rc: %d, opc: %#x.\n",
./src/cart/crt_corpc.c:			D_ERROR("crt_bulk_transfer failed, rc: %d,opc: %#x.\n",
./src/cart/crt_corpc.c:			D_ERROR("crt_corpc_initiate failed,rc: %d,opc: %#x.\n",
./src/cart/crt_corpc.c:		D_ERROR("crt_corpc_common_hdlr failed, rc: %d, opc: %#x.\n",
./src/cart/crt_corpc.c:		D_ERROR("invalid parameter (NULL crt_ctx or req).\n");
./src/cart/crt_corpc.c:		D_ERROR("CaRT not initialized yet.\n");
./src/cart/crt_corpc.c:		D_ERROR("corpc invalid on client-side.\n");
./src/cart/crt_corpc.c:		D_ERROR("invalid parameter of tree_topo: %#x.\n", tree_topo);
./src/cart/crt_corpc.c:		D_ERROR("crt_rpc_priv_alloc, rc: %d, opc: %#x.\n", rc, opc);
./src/cart/crt_corpc.c:		D_ERROR("crt_rpc_priv_init, rc: %d, opc: %#x.\n", rc, opc);
./src/cart/crt_corpc.c:		D_ERROR("crt_corpc_info_init failed, rc: %d, opc: %#x.\n",
./src/cart/crt_corpc.c:			D_ERROR("crt_hg_reply_send failed, rc: %d,opc: %#x.\n",
./src/cart/crt_corpc.c:			D_ERROR("crt_corpc_free_chainded_bulk failed, rc: %d, "
./src/cart/crt_corpc.c:		D_ERROR("RPC(opc: %#x) error, rc: %d.\n",
./src/cart/crt_corpc.c:				D_ERROR("co_ops->co_aggregate failed, rc: %d, "
./src/cart/crt_corpc.c:					D_ERROR("co_ops->co_aggregate failed, "
./src/cart/crt_tree.c:		D_ERROR("d_rank_list_dup failed, rc: %d.\n", rc);
./src/cart/crt_tree.c:			D_ERROR("%u/%u filter ranks (inverted) out of group\n",
./src/cart/crt_tree.c:		D_ERROR("d_idx_in_rank_list (group %s, rank %d), "
./src/cart/crt_tree.c:		D_ERROR("d_idx_in_rank_list (group %s, rank %d), "
./src/cart/crt_tree.c:		D_ERROR("invalid parameter of NULL nchildren.\n");
./src/cart/crt_tree.c:		D_ERROR("crt_get_filtered_grp_rank_list(group %s, root %d, "
./src/cart/crt_tree.c:		D_ERROR("crt_get_filtered_grp_rank_list(group %s) get empty.\n",
./src/cart/crt_tree.c:		D_ERROR("to_get_children_cnt (group %s, root %d, self %d) "
./src/cart/crt_tree.c:		D_ERROR("invalid parameter of NULL children_rank_list.\n");
./src/cart/crt_tree.c:		D_ERROR("crt_get_filtered_grp_rank_list(group %s, root %d, "
./src/cart/crt_tree.c:		D_ERROR("to_get_children_cnt (group %s, root %d, self %d) "
./src/cart/crt_tree.c:		D_ERROR("to_get_children (group %s, root %d, self %d) "
./src/cart/crt_tree.c:		D_ERROR("invalid parameter of NULL parent_rank.\n");
./src/cart/crt_tree.c:		D_ERROR("crt_get_filtered_grp_rank_list(group %s, root %d, "
./src/cart/crt_tree.c:		D_ERROR("to_get_parent (group %s, root %d, self %d) failed, "
./src/cart/crt_context.c:		D_ERROR("d_binheap_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_context.c:		D_ERROR("d_hash_table_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_context.c:		D_ERROR("invalid parameter of NULL crt_ctx.\n");
./src/cart/crt_context.c:		D_ERROR("Number of active contexts (%d) reached limit (%d).\n",
./src/cart/crt_context.c:		D_ERROR("crt_context_init() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_context.c:		D_ERROR("crt_hg_ctx_init() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_context.c:		D_ERROR("ctx_hg_get_addr() failed; rc: %d.\n", rc);
./src/cart/crt_context.c:			D_ERROR("crt_swim_init() failed rc: %d.\n", rc);
./src/cart/crt_context.c:		D_ERROR("Invalid parameter: ctx %p cb %p\n",
./src/cart/crt_context.c:		D_ERROR("cannot abort endpoint (idx %d, rank %d, req_wait_num "
./src/cart/crt_context.c:				D_ERROR("crt_progress failed, rc %d.\n", rc);
./src/cart/crt_context.c:				D_ERROR("stop progress due to timed out.\n");
./src/cart/crt_context.c:		D_ERROR("invalid parameter (NULL crt_ctx).\n");
./src/cart/crt_context.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_context.c:		D_ERROR("crt_grp_ctx_invalid failed, rc: %d.\n", rc);
./src/cart/crt_context.c:		D_ERROR("destroy context (idx %d, force %d), "
./src/cart/crt_context.c:		D_ERROR("crt_hg_ctx_fini failed rc: %d.\n", rc);
./src/cart/crt_context.c:			D_ERROR("crt_progress() failed, rc: %d\n", rc);
./src/cart/crt_context.c:			D_ERROR("context (idx %d), ep_abort (rank %d), "
./src/cart/crt_context.c:		D_ERROR("No members in the group\n");
./src/cart/crt_context.c:			D_ERROR("d_hash_rec_insert failed, rc: %d.\n", rc);
./src/cart/crt_context.c:		D_ERROR("invalid parameter, crt_ctx: %p, ctx_idx: %p.\n",
./src/cart/crt_context.c:		D_ERROR("uri can't be NULL.\n");
./src/cart/crt_context.c:		D_ERROR("crt_context_lookup(%d) failed.\n", tag);
./src/cart/crt_context.c:		D_ERROR("invalid parameter of NULL ctx_num.\n");
./src/cart/crt_context.c:		D_ERROR("crt_context_idx() failed, rc: %d.\n", rc);
./src/cart/crt_context.c:		D_ERROR("invalid parameter (%p)\n", cond_cb);
./src/cart/crt_context.c:		D_ERROR("crt_hg_progress failed with %d\n", rc);
./src/cart/crt_context.c:			D_ERROR("crt_hg_progress failed with %d\n", rc);
./src/cart/crt_context.c:		D_ERROR("invalid parameter (NULL crt_ctx).\n");
./src/cart/crt_context.c:		D_ERROR("crt_hg_progress failed, rc: %d.\n", rc);
./src/cart/crt_context.c:			D_ERROR("crt_hg_progress failed, rc: %d.\n", rc);
./src/cart/crt_context.c:		D_ERROR("ctx_idx %d >= %d\n", ctx_idx, CRT_SRV_CONTEXT_NUM);
./src/cart/crt_context.c:		D_ERROR("ctx_idx %d >= %d\n", ctx_idx, CRT_SRV_CONTEXT_NUM);
./src/cart/crt_context.c:		D_ERROR("NULL context passed\n");
./src/cart/crt_context.c:		D_ERROR("Invalid value 0 for timeout specified\n");
./src/cart/crt_context.c:		D_ERROR("Invalid argument, rpc_priv == NULL\n");
./src/cart/crt_swim.c:			D_ERROR("SWIM shutdown\n");
./src/cart/crt_swim.c:		D_ERROR("swim_parse_message(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_swim.c:		D_ERROR("send reply: "DF_RC" failed: "DF_RC"\n",
./src/cart/crt_swim.c:		D_ERROR("crt_context_lookup(%d) failed\n", ctx_idx);
./src/cart/crt_swim.c:		D_ERROR("crt_req_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_swim.c:			D_ERROR("SWIM shutdown\n");
./src/cart/crt_swim.c:		D_ERROR("swim_progress(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_swim.c:		D_ERROR("SWIM already initialized\n");
./src/cart/crt_swim.c:		D_ERROR("swim_init() failed for self=%u, crt_ctx_idx=%d\n",
./src/cart/crt_swim.c:			D_ERROR("Mismatch in group size. Expected %d got %d\n",
./src/cart/crt_swim.c:				D_ERROR("crt_swim_rank_add(): "DF_RC"\n",
./src/cart/crt_swim.c:		D_ERROR("crt_proto_register(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_swim.c:		D_ERROR("crt_register_progress_cb(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_swim.c:		D_ERROR("Self rank was not set yet\n");
./src/cart/crt_swim.c:		D_ERROR("Invalid context index\n");
./src/cart/crt_swim.c:			D_ERROR("crt_unregister_progress_cb(): "DF_RC"\n",
./src/cart/crt_swim.c:			D_ERROR("crt_register_progress_cb(): "DF_RC"\n",
./src/cart/crt_swim.c:			D_ERROR("crt_unregister_progress_cb(): "DF_RC"\n",
./src/cart/crt_swim.c:		D_ERROR("Self rank was not set yet\n");
./src/cart/crt_swim.c:		D_ERROR("Passed group is NULL\n");
./src/cart/crt_swim.c:		D_ERROR("Passed state pointer is NULL\n");
./src/cart/crt_swim.c:		D_ERROR("Rank is invalid\n");
./src/cart/crt_swim.c:		D_ERROR("Only available for primary groups\n");
./src/cart/crt_self_test_client.c:				D_ERROR("No non-evicted endpoints remaining\n");
./src/cart/crt_self_test_client.c:			D_ERROR("d_gettime failed; ret = %d\n", ret);
./src/cart/crt_self_test_client.c:			D_ERROR("d_gettime failed; ret = %d\n", ret);
./src/cart/crt_self_test_client.c:		D_ERROR("d_gettime failed; ret = %d\n", ret);
./src/cart/crt_self_test_client.c:		D_ERROR("d_gettime failed; ret = %d\n", ret);
./src/cart/crt_self_test_client.c:		D_ERROR("Invalid IOV length - must be a multiple of 8 bytes\n");
./src/cart/crt_self_test_client.c:		D_ERROR("Invalid self-test bulk type;"
./src/cart/crt_self_test_client.c:		D_ERROR("Max inflight must be greater than zero\n");
./src/cart/crt_self_test_client.c:		D_ERROR("Rep count must be greater than zero\n");
./src/cart/crt_self_test_client.c:		D_ERROR("Buf alignment must be in the range [%d:%d]\n",
./src/cart/crt_self_test_client.c:		D_ERROR("Failed to start a new test run - one still exists\n");
./src/cart/crt_self_test_client.c:		D_ERROR("Failed to allocate latencies bulk handle; ret = %d\n",
./src/cart/crt_self_test_client.c:				D_ERROR("crt_bulk_create failed; ret = %d\n",
./src/cart/crt_self_test_client.c:		D_ERROR("crt_reply_send failed; ret = %d\n", ret);
./src/cart/crt_self_test_client.c:		D_ERROR("BULK_PUT of latency results failed; bci_rc=%d\n",
./src/cart/crt_self_test_client.c:		D_ERROR("crt_reply_send failed; ret = %d\n", ret);
./src/cart/crt_self_test_client.c:			D_ERROR("Failed to get bulk handle length; ret = %d\n",
./src/cart/crt_self_test_client.c:			D_ERROR("Bulk handle length mismatch (%zu != %zu)\n",
./src/cart/crt_self_test_client.c:			D_ERROR("bulk transfer of latencies failed; ret = %d\n",
./src/cart/crt_self_test_client.c:		D_ERROR("crt_reply_send failed; ret = %d\n", ret);
./src/cart/crt_bulk.c:			D_ERROR("invalid parameter, NULL sgl.\n");
./src/cart/crt_bulk.c:			D_ERROR("invalid parameter, zero sgl.sg_nr.\n");
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, NULL sgl->sg_iovs.\n");
./src/cart/crt_bulk.c:				D_ERROR("invalid parameter, sg_iovs[%d]."
./src/cart/crt_bulk.c:				D_ERROR("invalid parameter, sg_iovs[%d]."
./src/cart/crt_bulk.c:			D_ERROR("invalid parameter, NULL bulk_desc.\n");
./src/cart/crt_bulk.c:			D_ERROR("invalid parameter, NULL bulk_desc->db_rpc.\n");
./src/cart/crt_bulk.c:			D_ERROR("invalid parameter, NULL bulk_desc->db_rpc->dr_ctx.\n");
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, bulk_desc remote_hdl:%p,"
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, crt_ctx: %p, "
./src/cart/crt_bulk.c:		D_ERROR("crt_hg_bulk_create() failed, rc: "DF_RC"\n",
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, NULL crt_ctx or bulk_hdl.\n");
./src/cart/crt_bulk.c:		D_ERROR("crt_hg_bulk_bind() failed, rc: %d.\n", rc);
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, NULL bulk_hdl.\n");
./src/cart/crt_bulk.c:		D_ERROR("crt_hg_bulk_addref() failed, rc: %d.\n", rc);
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, NULL bulk_hdl.\n");
./src/cart/crt_bulk.c:		D_ERROR("crt_hg_bulk_free() failed, rc: %d.\n", rc);
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter of bulk_desc.\n");
./src/cart/crt_bulk.c:		D_ERROR("crt_hg_bulk_transfer() failed, rc: %d.\n", rc);
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, bulk_desc not valid.\n");
./src/cart/crt_bulk.c:		D_ERROR("crt_hg_bulk_transfer() failed, rc: %d.\n", rc);
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, NULL bulk_hdl.\n");
./src/cart/crt_bulk.c:		D_ERROR("invalid parameter, NULL sgl pointer.\n");
./src/cart/crt_ctl.c:		D_ERROR("invalid parameter, NULL input grp_id.\n");
./src/cart/crt_ctl.c:		D_ERROR("srv_grpid contains invalid characters "
./src/cart/crt_ctl.c:		D_ERROR("RPC request has wrong grp_id: %s\n",
./src/cart/crt_ctl.c:		D_ERROR("RPC request has wrong rank: %d\n", in_args->cel_rank);
./src/cart/crt_ctl.c:			D_ERROR("grp_cache index %u out of range [0, %u].\n",
./src/cart/crt_ctl.c:		D_ERROR("gethostname() failed with errno %d\n", errno);
./src/cart/crt_ctl.c:		D_ERROR("crt_reply_send() failed with rc %d\n", rc);
./src/cart/crt_ctl.c:		D_ERROR("crt_reply_send() failed with rc %d\n", rc);
./src/cart/crt_ctl.c:			D_ERROR("context (idx %d), crt_hg_get_addr failed rc: "
./src/cart/crt_ctl.c:			D_ERROR("context (idx %d), crt_hg_get_addr failed rc: "
./src/cart/crt_register.c:			D_ERROR("crt_opc_map_L2_create() failed, " DF_RC "\n",
./src/cart/crt_register.c:		D_ERROR("Failed to create mutex for CaRT opc map.\n");
./src/cart/crt_register.c:		D_ERROR("base opc %d out of range [0, 255]\n", L1_idx);
./src/cart/crt_register.c:		D_ERROR("base opc %d not registered\n", L1_idx);
./src/cart/crt_register.c:		D_ERROR("version number %d out of range [0, %d]\n", L2_idx,
./src/cart/crt_register.c:		D_ERROR("version number %d has no entries\n", L2_idx);
./src/cart/crt_register.c:		D_ERROR("RPC with opcode %#x already registered\n",
./src/cart/crt_register.c:		D_ERROR("input_size "DF_U64" or output_size "DF_U64" "
./src/cart/crt_register.c:		D_ERROR("rpc (opc: %#x) register failed, rc: %d.\n", opc, rc);
./src/cart/crt_register.c:			D_ERROR("crt_opc_reg_internal(opc: %#x) failed, rc %d.\n",
./src/cart/crt_register.c:		D_ERROR("crt_proto_reg_L3() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_register.c:		D_ERROR("crt_proto_reg_L2() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_register.c:		D_ERROR("Invalid version number %d, max version number is "
./src/cart/crt_register.c:		D_ERROR("Invalid member RPC count %d, max count is %lu.\n",
./src/cart/crt_register.c:		D_ERROR("Invalid member RPC count %d\n",
./src/cart/crt_register.c:		D_ERROR("prf can't be NULL\n");
./src/cart/crt_register.c:		D_ERROR("crt_proto_reg_L1() failed, "
./src/cart/crt_register.c:		D_ERROR("cpf can't be NULL.\n");
./src/cart/crt_register.c:		D_ERROR("Invalid base_opc: %#x.\n", cpf->cpf_base);
./src/cart/crt_register.c:		D_ERROR("cpf can't be NULL.\n");
./src/cart/crt_register.c:		D_ERROR("Invalid base_opc: %#x.\n", cpf->cpf_base);
./src/cart/crt_register.c:		D_ERROR("rpc (opc: %#x failed, rc: %d.\n", rpc_req->cr_opc,
./src/cart/crt_register.c:		D_ERROR("ver is NULL.\n");
./src/cart/crt_register.c:		D_ERROR("crt_context 0 doesn't exist.\n");
./src/cart/crt_register.c:		D_ERROR("crt_req_create() failed, rc: %d\n", rc);
./src/cart/crt_register.c:		D_ERROR("crt_req_send() failed, rc: %d.\n", rc);
./src/cart/crt_register.c:		D_ERROR("crt_reply_send() failed, rc: %d\n", rc);
./src/cart/crt_rpc.c:		D_ERROR("crt_reply_send() failed. rc: %d\n", rc);
./src/cart/crt_rpc.c:		D_ERROR("Empty log message\n");
./src/cart/crt_rpc.c:		D_ERROR("crt_reply_send() failed. rc: %d\n", rc);
./src/cart/crt_rpc.c:		D_ERROR("crt_reply_send() failed. rc: %d\n", rc);
./src/cart/crt_rpc.c:		D_ERROR("d_fault_attr_set() failed. rc: %d\n", rc);
./src/cart/crt_rpc.c:		D_ERROR("crt_reply_send() failed. rc: %d\n", rc);
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register_internal() failed, "DF_RC"\n",
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_rpc.c:		D_ERROR("crt_proto_register() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_rpc.c:		D_ERROR("opc: %#x, lookup failed.\n", opc);
./src/cart/crt_rpc.c:		D_ERROR("opc: %#x, input_size " DF_U64 " or output_size "
./src/cart/crt_rpc.c:		D_ERROR("crt_grp_pub2priv(%p) got NULL.\n", tgt_ep->ep_grp);
./src/cart/crt_rpc.c:		D_ERROR("crt_rpc_priv_alloc(%#x) failed, " DF_RC "\n",
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL crt_ctx or req).\n");
./src/cart/crt_rpc.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_rpc.c:		D_ERROR("crt_req_create_internal(%#x) failed, " DF_RC "\n",
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req or tgt_ep).\n");
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req or zero timeout_sec).\n");
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req).\n");
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req).\n");
./src/cart/crt_rpc.c:			D_ERROR("Should never get here\n");
./src/cart/crt_rpc.c:			D_ERROR("Failed to add %d to group\n", ul_in->ul_rank);
./src/cart/crt_rpc.c:			D_ERROR("URI lookups exceeded %d retries\n",
./src/cart/crt_rpc.c:			D_ERROR("Failed to rank for uri lookups\n");
./src/cart/crt_rpc.c:		D_ERROR("URI_LOOKUP rpc create failed; rc=%d\n", rc);
./src/cart/crt_rpc.c:				D_ERROR("crt_self_uri_get(tag: %d) failed, "
./src/cart/crt_rpc.c:				D_ERROR("crt_grp_lc_uri_insert() failed, "
./src/cart/crt_rpc.c:				D_ERROR("crt_req_fill_tgt_uri failed, "
./src/cart/crt_rpc.c:		D_ERROR("HG_Addr_lookup2() failed. uri=%s, hg_ret=%d\n",
./src/cart/crt_rpc.c:		D_ERROR("Failed to insert\n");
./src/cart/crt_rpc.c:		D_ERROR("crt_hg_req_create failed, rc: %d, opc: %#x.\n",
./src/cart/crt_rpc.c:				D_ERROR("crt_req_hg_addr_lookup() failed, "
./src/cart/crt_rpc.c:				D_ERROR("crt_req_uri_lookup() failed. rc %d, "
./src/cart/crt_rpc.c:				D_ERROR("crt_req_hg_addr_lookup() failed, "
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req).\n");
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req->cr_ctx).\n");
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req).\n");
./src/cart/crt_rpc.c:			D_ERROR("crt_hg_reply_send failed, rc: %d,opc: %#x.\n",
./src/cart/crt_rpc.c:		D_ERROR("invalid parameter (NULL req).\n");
./src/cart/crt_rpc.c:			D_ERROR("Mismatch rpc: %p opc: %x rank:%d tag:%d "
./src/cart/crt_rpc.c:		D_ERROR("NULL rpc passed\n");
./src/cart/crt_rpc.c:		D_ERROR("NULL rank passed\n");
./src/cart/crt_rpc.c:		D_ERROR("NULL rpc passed\n");
./src/cart/crt_rpc.c:		D_ERROR("NULL rank passed\n");
./src/cart/crt_rpc.c:		D_ERROR("NULL rpc passed\n");
./src/cart/crt_rpc.c:		D_ERROR("NULL tag passed\n");
./src/cart/crt_init.c:		D_ERROR("Failed to disable malloc trim: %d\n", errno);
./src/cart/crt_init.c:		D_ERROR("Failed to init cg_rwlock\n");
./src/cart/crt_init.c:		D_ERROR("d_fault_inject_init() failed, rc: %d.\n", rc);
./src/cart/crt_init.c:			D_ERROR("grpid contains invalid characters "
./src/cart/crt_init.c:			D_ERROR("invalid client grpid (same as "
./src/cart/crt_init.c:			D_ERROR("data_init failed "DF_RC"\n", DP_RC(rc));
./src/cart/crt_init.c:				D_ERROR("Got %s from ENV CRT_ATTACH_INFO_PATH, "
./src/cart/crt_init.c:			D_ERROR("Requested provider %s not found\n", addr_env);
./src/cart/crt_init.c:			D_ERROR("\"ofi+verbs\" is no longer supported. "
./src/cart/crt_init.c:				D_ERROR("crt_na_ofi_config_init() failed, "
./src/cart/crt_init.c:			D_ERROR("crt_hg_init() failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_init.c:			D_ERROR("crt_grp_init() failed, "DF_RC"\n",
./src/cart/crt_init.c:				D_ERROR("crt_plugin_init() failed, "DF_RC"\n",
./src/cart/crt_init.c:			D_ERROR("crt_opc_map_create() failed, "DF_RC"\n",
./src/cart/crt_init.c:			D_ERROR("crt_internal_rpc_register() failed, "DF_RC"\n",
./src/cart/crt_init.c:			D_ERROR("CRT initialized as client, cannot set as "
./src/cart/crt_init.c:		D_ERROR("failed, "DF_RC"\n", DP_RC(rc));
./src/cart/crt_init.c:		D_ERROR("cannot finalize before initializing.\n");
./src/cart/crt_init.c:			D_ERROR("cannot finalize, current ctx_num(%d).\n",
./src/cart/crt_init.c:			D_ERROR("crt_hg_fini failed rc: %d.\n", rc);
./src/cart/crt_init.c:			D_ERROR("failed to destroy cg_rwlock, rc: %d.\n", rc);
./src/cart/crt_init.c:		D_ERROR("d_fault_inject_fini() failed, rc: %d\n", local_rc);
./src/cart/crt_init.c:		D_ERROR("crt_finalize failed, rc: %d.\n", rc);
./src/cart/crt_init.c:		D_ERROR("Failed to open %s for reading\n", proc);
./src/cart/crt_init.c:		D_ERROR("Failed to read from file %s\n", proc);
./src/cart/crt_init.c:		D_ERROR("ENV OFI_INTERFACE not set.");
./src/cart/crt_init.c:		D_ERROR("cannot getifaddrs, errno: %d(%s).\n",
./src/cart/crt_init.c:				D_ERROR("inet_ntop failed, errno: %d(%s).\n",
./src/cart/crt_init.c:		D_ERROR("no IP addr found.\n");
./src/cart/crt_init.c:			D_ERROR("crt_get_port failed, rc: %d.\n", rc);
./src/cart/crt_group.c:			D_ERROR("tag %d, li_tag_addr not freed.\n", i);
./src/cart/crt_group.c:				D_ERROR("Badly formed URI '%s'\n", tmp_uri);
./src/cart/crt_group.c:				D_ERROR("Failed to parse uri=%s correctly\n",
./src/cart/crt_group.c:			D_ERROR("Entry already present\n");
./src/cart/crt_group.c:		D_ERROR("need not create lookup cache for sub-group.\n");
./src/cart/crt_group.c:			D_ERROR("d_hash_table_create() failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("d_hash_table_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:			D_ERROR("d_hash_table_destroy() failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:			D_ERROR("d_hash_table_destroy() failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("d_hash_table_destroy() failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("Record for rank %d is not found\n", rank);
./src/cart/crt_group.c:			D_ERROR("Failed to set uri for %d:%d, uri=%s\n",
./src/cart/crt_group.c:		D_ERROR("tag %d out of range [0, %d].\n",
./src/cart/crt_group.c:			D_ERROR("Insertion failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:			D_ERROR("crt_hg_addr_free failed, ctx_idx %d, tag %d, "
./src/cart/crt_group.c:		D_ERROR("d_hash_table_traverse failed, ctx_idx %d, rc: %d.\n",
./src/cart/crt_group.c:			D_ERROR("crt_grp_lc_ctx_invalid failed, group %s, "
./src/cart/crt_group.c:			D_ERROR("crt_grp_lc_ctx_invalid failed, group %s, "
./src/cart/crt_group.c:			D_ERROR("crt_hg_addr_free failed, crt_idx %d, *hg_addr"
./src/cart/crt_group.c:				D_ERROR("crt_grp_ctx_invalid failed, rc: %d.\n",
./src/cart/crt_group.c:		D_ERROR("CaRT not initialized yet.\n");
./src/cart/crt_group.c:		D_ERROR("grp_id contains invalid characters or is too long\n");
./src/cart/crt_group.c:		D_ERROR("invalid parameter of NULL rank pointer.\n");
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("Self rank was not set yet\n");
./src/cart/crt_group.c:		D_ERROR("CaRT not initialized yet.\n");
./src/cart/crt_group.c:		D_ERROR("Invalid argument: subgrp is NULL.\n");
./src/cart/crt_group.c:		D_ERROR("Invalid argument: rank_out is NULL.\n");
./src/cart/crt_group.c:		D_ERROR("Rank=%d not part of the group\n", rank_in);
./src/cart/crt_group.c:		D_ERROR("CaRT not initialized yet.\n");
./src/cart/crt_group.c:		D_ERROR("Invalid argument: subgrp is NULL.\n");
./src/cart/crt_group.c:		D_ERROR("Invalid argument: rank_out is NULL.\n");
./src/cart/crt_group.c:		D_ERROR("invalid parameter of NULL size pointer.\n");
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("invalid parameter: version pointer is NULL.\n");
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("Invalid group\n");
./src/cart/crt_group.c:		D_ERROR("crt_grp_priv_create failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("grp_priv_init_membs() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("crt_grp_lc_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("crt_hdlr_uri_lookup invalid on client.\n");
./src/cart/crt_group.c:		D_ERROR("Could not find the group %s specified\n",
./src/cart/crt_group.c:			D_ERROR("crt_self_uri_get(tag: %d) failed, "
./src/cart/crt_group.c:		D_ERROR("crt_reply_send failed, rc: %d, opc: %#x.\n",
./src/cart/crt_group.c:		D_ERROR("invalid parameter, NULL srv_grpid.\n");
./src/cart/crt_group.c:		D_ERROR("srv_grpid contains invalid characters "
./src/cart/crt_group.c:		D_ERROR("invalid parameter, NULL attached_grp.\n");
./src/cart/crt_group.c:		D_ERROR("crt group not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("crt_group_view_create() failed; rc=%d\n", rc);
./src/cart/crt_group.c:		D_ERROR("crt_grp_config_load() failed; rc=%d\n", rc);
./src/cart/crt_group.c:		D_ERROR("crt_group_attach failed, rc: %d.\n", rc);
./src/cart/crt_group.c:		D_ERROR("invalid parameter, NULL attached_grp.\n");
./src/cart/crt_group.c:		D_ERROR("crt group not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("filename can't be NULL.\n");
./src/cart/crt_group.c:		D_ERROR("mkstemp() failed on %s, error: %s.\n",
./src/cart/crt_group.c:		D_ERROR("fdopen() failed on %s, error: %s\n",
./src/cart/crt_group.c:		D_ERROR("path can't be NULL");
./src/cart/crt_group.c:		D_ERROR("specified path must be fewer than %d characters",
./src/cart/crt_group.c:		D_ERROR("bad path specified: %s", path);
./src/cart/crt_group.c:		D_ERROR("not a directory: %s", path);
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("Can only save config info for primary service grp.\n");
./src/cart/crt_group.c:		D_ERROR("cannot create temp file.\n");
./src/cart/crt_group.c:		D_ERROR("write to file %s failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("write to file %s failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("write to file %s failed (%s).\n",
./src/cart/crt_group.c:			D_ERROR("write to file %s failed (%s).\n",
./src/cart/crt_group.c:			D_ERROR("crt_rank_uri_get(%s, %d) failed "
./src/cart/crt_group.c:			D_ERROR("write to file %s failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("file %s closing failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("Failed to rename %s to %s (%s).\n",
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("Can only remove config info for primary service "
./src/cart/crt_group.c:		D_ERROR("crt_grp_attach_info_filename() failed.\n");
./src/cart/crt_group.c:		D_ERROR("Failed to remove %s (%s).\n",
./src/cart/crt_group.c:		D_ERROR("open file %s failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("read from file %s failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("grpname %s in file mismatch with grpid %s.\n",
./src/cart/crt_group.c:		D_ERROR("read from file %s failed (%s).\n",
./src/cart/crt_group.c:		D_ERROR("read from file %s failed (%s).\n",
./src/cart/crt_group.c:			D_ERROR("crt_group_node_add_internal() failed;"
./src/cart/crt_group.c:		D_ERROR("crt_grp_config_psr_load (grpid %s) failed, rc: %d.\n",
./src/cart/crt_group.c:		D_ERROR("CRT not initialized.\n");
./src/cart/crt_group.c:		D_ERROR("Invalid NULL grp_priv pointer.\n");
./src/cart/crt_group.c:		D_ERROR("crt_grp_config_load failed, rc: %d.\n", rc);
./src/cart/crt_group.c:			D_ERROR("group %s no more PSR candidate.\n",
./src/cart/crt_group.c:		D_ERROR("crt_grp_config_psr_load(grp %s, psr_rank %d), "
./src/cart/crt_group.c:			D_ERROR("crt_swim_rank_add() failed: rc=%d\n", rc);
./src/cart/crt_group.c:		D_ERROR("Only available for primary groups\n");
./src/cart/crt_group.c:		D_ERROR("crt_grp_lc_uri_insert() failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("Self rank was already set to %d\n",
./src/cart/crt_group.c:		D_ERROR("grp_add_to_membs_list() failed; rc=%d\n", rc);
./src/cart/crt_group.c:			D_ERROR("crt_hg_get_addr() failed; rc=%d\n", rc);
./src/cart/crt_group.c:			D_ERROR("crt_grp_lc_uri_insert() failed; rc=%d\n",
./src/cart/crt_group.c:		D_ERROR("Passed uri_str is NULL\n");
./src/cart/crt_group.c:		D_ERROR("Only available for primary groups\n");
./src/cart/crt_group.c:			D_ERROR("Rank %d is not part of the group\n", rank);
./src/cart/crt_group.c:			D_ERROR("Rank %d is not part of the group\n", rank);
./src/cart/crt_group.c:			D_ERROR("crt_group_rank_remove(%s,%d) failed; rc=%d\n",
./src/cart/crt_group.c:	D_ERROR("API is currently not supported\n");
./src/cart/crt_group.c:	D_ERROR("API is currently not supported\n");
./src/cart/crt_group.c:		D_ERROR("grp ptr is NULL\n");
./src/cart/crt_group.c:		D_ERROR("crt_grp_priv_create(%s) failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("grp_priv_init_membs() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("crt_grp_lc_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("Null grp handle passed\n");
./src/cart/crt_group.c:		D_ERROR("Passed grp is NULL\n");
./src/cart/crt_group.c:		D_ERROR("crt_rank_uri_get() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("grp ptr is NULL\n");
./src/cart/crt_group.c:		D_ERROR("Invalid primary group\n");
./src/cart/crt_group.c:		D_ERROR("Passed group %s is not primary\n",
./src/cart/crt_group.c:		D_ERROR("crt_grp_priv_create(%s) failed, " DF_RC "\n",
./src/cart/crt_group.c:		D_ERROR("grp_priv_init_membs() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("d_hash_table_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("d_hash_table_create() failed, " DF_RC "\n", DP_RC(rc));
./src/cart/crt_group.c:			D_ERROR("Failed to add rank %d : %d to the group\n",
./src/cart/crt_group.c:		D_ERROR("Null grp handle passed\n");
./src/cart/crt_group.c:		D_ERROR("Entry for secondary_rank = %d already exists\n",
./src/cart/crt_group.c:		D_ERROR("Failed to add entry: "DF_RC"\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("Failed to add entry: "DF_RC"\n", DP_RC(rc));
./src/cart/crt_group.c:		D_ERROR("Passed group is a primary group\n");
./src/cart/crt_group.c:		D_ERROR("Associated primary group not found\n");
./src/cart/crt_group.c:		D_ERROR("Passed group is not primary group\n");
./src/cart/crt_group.c:		D_ERROR("Failed to allocate lists\n");
./src/cart/crt_group.c:		D_ERROR("Should never get here\n");
./src/cart/crt_group.c:		D_ERROR("Failed to get grp_priv\n");
./src/cart/crt_group.c:		D_ERROR("Failed to get grp_priv\n");
./src/cart/crt_group.c:		D_ERROR("Passed group is not primary\n");
./src/cart/crt_group.c:		D_ERROR("Invalid operation %d\n", op);
./src/cart/crt_group.c:		D_ERROR("Modification has no members\n");
./src/cart/crt_group.c:		D_ERROR("URI array is null\n");
./src/cart/crt_group.c:			D_ERROR("grp_add_to_memb_list %d failed; rc=%d\n",
./src/cart/crt_group.c:	D_ERROR("Failure when adding node %d, rc=%d\n",
./src/cart/crt_group.c:		D_ERROR("Failed to get grp_priv\n");
./src/cart/crt_group.c:		D_ERROR("Passed group is primary\n");
./src/cart/crt_group.c:		D_ERROR("Invalid operation %d\n", op);
./src/cart/crt_group.c:		D_ERROR("Modification has no members\n");
./src/cart/crt_group.c:			D_ERROR("Primary rank list is empty\n");
./src/cart/crt_group.c:			D_ERROR("Prim list size=%d differs from sec=%d\n",
./src/cart/crt_group.c:	D_ERROR("Failure when adding rank %d, rc=%d\n",
./src/cart/crt_group.c:		D_ERROR("Failed to lookup grp\n");
./src/cart/crt_group.c:		D_ERROR("Passed rank_list is NULL\n");
./src/cart/crt_group.c:		D_ERROR("Passed 0-sized rank_list\n");
./src/cart/crt_group.c:		D_ERROR("Failed to copy rank list\n");
./src/cart/crt_iv.c:				D_ERROR("Bulk transfer failed for key=%p\n",
./src/cart/crt_iv.c:					D_ERROR("crt_reply_send(): "DF_RC"\n",
./src/cart/crt_iv.c:				D_ERROR("Failed to process pending request\n");
./src/cart/crt_iv.c:	D_ERROR("Failed to lookup IVNS for %s:%d\n",
./src/cart/crt_iv.c:		D_ERROR("Passed ivns is NULL\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid group passed\n");
./src/cart/crt_iv.c:		D_ERROR("Failed to create internal ivns\n");
./src/cart/crt_iv.c:		D_ERROR("NULL ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("NULL ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("NULL priv passed\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("NULL ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("NULL id passed\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns passed\n");
./src/cart/crt_iv.c:		D_ERROR("ivns_internal was NULL\n");
./src/cart/crt_iv.c:		D_ERROR("class_id=%d exceeds num_class=%d\n", class_id,
./src/cart/crt_iv.c:		D_ERROR("ivo_on_put(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_reply_send(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_bulk_free(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("output was NULL\n");
./src/cart/crt_iv.c:		D_ERROR("crt_bulk_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("Bulk transfer failed; "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("crt_bulk_free(): "DF_RC"\n", DP_RC(rc2));
./src/cart/crt_iv.c:			D_ERROR("crt_ivf_key_in_progres_set() failed\n");
./src/cart/crt_iv.c:		D_ERROR("crt_bulk_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_req_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("Failed to send rpc to remote node = %d\n", dest_node);
./src/cart/crt_iv.c:		D_ERROR("Failed to lookup ivns internal!\n");
./src/cart/crt_iv.c:		D_ERROR("Returned iv_ops were NULL\n");
./src/cart/crt_iv.c:		D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("bulk transfer failed; "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("Forward requested for root node\n");
./src/cart/crt_iv.c:			D_ERROR("ivo_on_put(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("Failed to issue fetch rpc; "DF_RC"\n",
./src/cart/crt_iv.c:		D_ERROR("ERROR happened: "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_reply_send(opc: %#x): "DF_RC"\n",
./src/cart/crt_iv.c:		D_ERROR("Failed to look up ivns_id! ivns_id=%s:%d\n",
./src/cart/crt_iv.c:		D_ERROR("Returned iv_ops were NULL, class_id: %d\n",
./src/cart/crt_iv.c:		D_ERROR("crt_reply_send(opc: %#x): "DF_RC"\n",
./src/cart/crt_iv.c:		D_ERROR("Unknown shortcut=%d specified\n", shortcut);
./src/cart/crt_iv.c:		D_ERROR("iv_key is NULL\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns\n");
./src/cart/crt_iv.c:		D_ERROR("Failed to get iv_ops for class_id = %d\n", class_id);
./src/cart/crt_iv.c:		D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("ivns_internal was NULL. ivns_id=%s:%d\n",
./src/cart/crt_iv.c:			D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("Failed to allocate temporary iovs\n");
./src/cart/crt_iv.c:			D_ERROR("crt_bulk_access(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("ivo_on_refresh(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("ivo_on_put(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("ivo_on_refresh(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("Unknown event type %#x", sync_type->ivs_event);
./src/cart/crt_iv.c:		D_ERROR("ivns_internal was NULL. ivns_id=%s:%d\n",
./src/cart/crt_iv.c:		D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("Failed to allocate temporary iovs\n");
./src/cart/crt_iv.c:			D_ERROR("crt_bulk_access(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("ivo_pre_sync(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("ivns_internal was NULL. ivns_id=%s:%d\n",
./src/cart/crt_iv.c:		D_ERROR("Unknown ivs_mode %d\n", sync_type->ivs_mode);
./src/cart/crt_iv.c:		D_ERROR("Unknown ivs_event %d\n", sync_type->ivs_event);
./src/cart/crt_iv.c:			D_ERROR("ctt_bulk_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_corpc_req_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_req_send(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("Failed to transfer data back\n");
./src/cart/crt_iv.c:				D_ERROR("ivo_on_put(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("Failed to respond on rpc: %p",
./src/cart/crt_iv.c:		D_ERROR("crt_req_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("crt_bulk_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_req_send(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("wrong opc: cb_info %p: rpc %p: opc %#x\n",
./src/cart/crt_iv.c:			D_ERROR("crt_ivu_rpc_issue(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("bulk update transfer failed; "DF_RC"\n",
./src/cart/crt_iv.c:		D_ERROR("Invalid internal ivns\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid class id passed\n");
./src/cart/crt_iv.c:		D_ERROR("ivo_on_get(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_bulk_create(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("crt_bulk_transfer(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:			D_ERROR("ivs_mode must be set to CRT_IV_SYNC_NONE\n");
./src/cart/crt_iv.c:			D_ERROR("ivs_event must be set to "
./src/cart/crt_iv.c:		D_ERROR("Invalid sync specified\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns specified\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid class_id specified\n");
./src/cart/crt_iv.c:			D_ERROR("crt_ivu_rpc_issue(): "DF_RC"\n", DP_RC(rc));
./src/cart/crt_iv.c:		D_ERROR("iv_value is NULL\n");
./src/cart/crt_iv.c:		D_ERROR("invalid parameter (NULL key or nchildren).\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid ivns specified\n");
./src/cart/crt_iv.c:		D_ERROR("Invalid class_id specified\n");
./src/cart/crt_iv.c:		D_ERROR("grp %s, root %d self %d failed; "DF_RC"\n",
./src/cart/crt_self_test_service.c:			D_ERROR("crt_bulk_create failed; ret=%d\n", ret);
./src/cart/crt_self_test_service.c:		D_ERROR("Sending BULK_PUT and/or replying with BULK_GET"
./src/cart/crt_self_test_service.c:			D_ERROR("Failed to allocate buf_entry; ret=%d\n", ret);
./src/cart/crt_self_test_service.c:		D_ERROR("self-test: No test sessions available to reserve\n");
./src/cart/crt_self_test_service.c:		D_ERROR("self-test: crt_reply_send failed; ret = %d\n", ret);
./src/cart/crt_self_test_service.c:		D_ERROR("Self-test session %ld not found\n", session_id);
./src/cart/crt_self_test_service.c:		D_ERROR("self-test: crt_reply_send failed; ret = %d\n", ret);
./src/cart/crt_self_test_service.c:		D_ERROR("self-test: crt_reply_send failed; ret = %d\n", ret);
./src/cart/crt_self_test_service.c:		D_ERROR("crt_req_decref failed; ret=%d\n", ret);
./src/cart/crt_self_test_service.c:		D_ERROR("BULK_GET failed; bci_rc=%d\n", cb_info->bci_rc);
./src/cart/crt_self_test_service.c:		D_ERROR("BULK_GET failed; bci_rc=%d\n", cb_info->bci_rc);
./src/cart/crt_self_test_service.c:			D_ERROR("self-test service BULK_GET failed; ret=%d\n",
./src/cart/crt_self_test_service.c:		D_ERROR("Unable to locate session_id %ld\n", session_id);
./src/cart/crt_self_test_service.c:		D_ERROR("Only bulk send/GET reply/PUT are supported\n");
./src/cart/crt_self_test_service.c:		D_ERROR("Opcode / self-test session params mismatch\n");
./src/cart/crt_self_test_service.c:				D_ERROR("Failed to allocate buf_entry;"
./src/cart/crt_self_test_service.c:			D_ERROR("self-test service BULK_GET failed; ret=%d\n",
./src/cart/crt_self_test_service.c:			D_ERROR("self-test service BULK_GET failed; ret=%d\n",
./src/cart/crt_hg.c:		D_ERROR("Invalid parameter of crt_hg_pool_enable, hg_ctx %p, "
./src/cart/crt_hg.c:			D_ERROR("HG_Create() failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:			D_ERROR("HG_Destroy() failed, hg_hdl %p, hg_ret: %d.\n",
./src/cart/crt_hg.c:		D_ERROR("crt_hg_pool_enable() hg_ctx %p, failed, " DF_RC "\n",
./src/cart/crt_hg.c:		D_ERROR("HG_Addr_free() failed, hg_ret %d.\n", ret);
./src/cart/crt_hg.c:		D_ERROR("HG_Addr_self() failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:		D_ERROR("HG_Addr_to_string() failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:		D_ERROR("crt_hg_reg(rpcid: %#x), failed rc: %d.\n",
./src/cart/crt_hg.c:		D_ERROR("crt_hg_reg(rpcid: %#x), failed rc: %d.\n",
./src/cart/crt_hg.c:		D_ERROR("HG_Registered_disable_response(rpcid: %#x), "
./src/cart/crt_hg.c:		D_ERROR("CaRT already initialized.\n");
./src/cart/crt_hg.c:		D_ERROR("Could not initialize HG class.\n");
./src/cart/crt_hg.c:		D_ERROR("crt_hg_get_addr() failed, rc: %d.\n", rc);
./src/cart/crt_hg.c:		D_ERROR("crt_hg_reg_rpcid() for prov=%d idx=%d failed; rc=%d\n",
./src/cart/crt_hg.c:		D_ERROR("Failed to init hg class for prov=%d idx=%d\n",
./src/cart/crt_hg.c:		D_ERROR("Could not create HG context.\n");
./src/cart/crt_hg.c:		D_ERROR("HG_Context_set_data() failed, ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:		D_ERROR("crt_hg_pool_init() failed, context idx %d hg_ctx %p, "
./src/cart/crt_hg.c:			D_ERROR("Could not destroy HG context, hg_ret: %d.\n",
./src/cart/crt_hg.c:		D_ERROR("HG_Get_info failed.\n");
./src/cart/crt_hg.c:		D_ERROR("HG_Context_get_data failed.\n");
./src/cart/crt_hg.c:		D_ERROR("crt_hg_unpack_header failed, rc: %d.\n", rc);
./src/cart/crt_hg.c:		D_ERROR("opc: %#x, lookup failed.\n", opc);
./src/cart/crt_hg.c:		D_ERROR("crt_rpc_priv_init rc=%d, opc=%#x\n", rc, opc);
./src/cart/crt_hg.c:			D_ERROR("_unpack_body failed, rc: %d, opc: %#x.\n",
./src/cart/crt_hg.c:		D_ERROR("NULL crp_hg_hdl, opc: %#x.\n", opc);
./src/cart/crt_hg.c:			D_ERROR("HG_Progress failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:			D_ERROR("HG_Trigger failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:		D_ERROR("HG_Bulk_create failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:		D_ERROR("HG_Bulk_bind failed, hg_ret %d.\n", hg_ret);
./src/cart/crt_hg.c:		D_ERROR("crt_bulk_get_sgnum failed, rc: %d.\n", rc);
./src/cart/crt_hg.c:		D_ERROR("crt_bulk_get_len failed, rc: %d.\n", rc);
./src/cart/crt_hg.c:		D_ERROR("HG_Bulk_access failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg.c:			D_ERROR("crt_hg_bulk_transfer_cb,hg_cbinfo->ret: %d.\n",
./src/cart/crt_hg.c:		D_ERROR("bulk_cbinfo->bci_cb failed, rc: %d.\n", rc);
./src/cart/crt_hg.c:		D_ERROR("HG_Bulk_(bind)transfer failed, hg_ret: %d.\n", hg_ret);
./src/cart/crt_hg_proc.c:		D_ERROR("Proc is not initilalized.\n");
./src/cart/crt_hg_proc.c:		D_ERROR("invalid parameter - NULL proc_op.\n");
./src/cart/crt_hg_proc.c:		D_ERROR("bad hg_proc_op: %d.\n", hg_proc_op);
./src/cart/crt_hg_proc.c:		D_ERROR("Invalid parameter data: %p.\n", data);
./src/cart/crt_hg_proc.c:		D_ERROR("invalid iov buf len "DF_U64" < iov len "DF_U64"\n",
./src/cart/crt_hg_proc.c:		D_ERROR("Could not get extra input buff, hg_ret: %d.", hg_ret);
./src/cart/crt_hg_proc.c:			D_ERROR("Could not get input buf, hg_ret: %d.", hg_ret);
./src/cart/crt_hg_proc.c:		D_ERROR("Could not create proc, hg_ret: %d.", hg_ret);
./src/cart/crt_hg_proc.c:		D_ERROR("crt_proc_common_hdr failed rc: %d.\n", rc);
./src/cart/crt_hg_proc.c:			D_ERROR("crt_proc_corpc_hdr failed rc: %d.\n", rc);
./src/cart/crt_hg_proc.c:		D_ERROR("crt_hg_unpack_body failed, rc: %d, opc: %#x.\n",
./src/cart/crt_hg_proc.c:		D_ERROR("Error in proc flush, hg_ret: %d, opc: %#x.",
./src/cart/crt_hg_proc.c:			D_ERROR("crt_proc_common_hdr failed rc: %d.\n", rc);
./src/cart/crt_hg_proc.c:			D_ERROR("crt_proc_corpc_hdr failed rc: %d.\n", rc);
./src/cart/crt_hg_proc.c:		D_ERROR("unpack input fails for opc: %#x\n",
./src/rsvc/srv_common.c:			D_ERROR("%s: failed to update attribute '"DF_KEY
./src/rsvc/srv_common.c:			D_ERROR("%s: failed to delete attribute '"DF_KEY
./src/rsvc/srv_common.c:			D_ERROR("%s: failed to lookup attribute '"DF_KEY
./src/rsvc/srv.c:		D_ERROR("%s: failed to create mutex: %d\n", svc->s_name, rc);
./src/rsvc/srv.c:		D_ERROR("%s: failed to create state_cv: %d\n", svc->s_name, rc);
./src/rsvc/srv.c:		D_ERROR("%s: failed to create leader_ref_cv: %d\n", svc->s_name,
./src/rsvc/srv.c:			D_ERROR("%s: failed to create map_dist_cv: %d\n",
./src/rsvc/srv.c:				D_ERROR("%s: failed to stat %s: %d\n", name,
./src/rsvc/srv.c:		D_ERROR("%s: failed to start map_distd: "DF_RC"\n", svc->s_name,
./src/rsvc/srv.c:		D_ERROR("%s: failed to step up as leader "DF_U64": "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR("%s: failed to create service stopper: "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR("Failed to start service: "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR("Failed to start replicated service: "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR("failed to stop all replicated services: "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR(DF_UUID": failed to start%s %d replicas: "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR("failed to stop%s replicas: "DF_RC"\n",
./src/rsvc/srv.c:		D_ERROR("metadata capacity too low; using %zu MB\n",
./src/rebuild/ras.c:		D_ERROR("invalid pool\n");
./src/rebuild/scan.c:			D_ERROR("rebuild_obj_send_cb failed: "DF_RC"\n",
./src/rebuild/scan.c:		D_ERROR("dbtree_destroy failed: "DF_RC"\n", DP_RC(rc));
./src/rebuild/scan.c:		D_ERROR("dbtree_iter_probe failed: "DF_RC"\n", DP_RC(rc));
./src/rebuild/scan.c:		D_ERROR("dbtree_iter_delete failed: "DF_RC"\n", DP_RC(rc));
./src/rebuild/scan.c:			D_ERROR("dbtree iterate failed: rc "DF_RC"\n",
./src/rebuild/scan.c:		D_ERROR(DF_UOID"Cannot find valid placement map"
./src/rebuild/scan.c:			D_ERROR("Failed to find rebuild shards for object "
./src/rebuild/scan.c:				D_ERROR("Failed to delete object "DF_UOID
./src/rebuild/scan.c:		D_ERROR("Open container "DF_UUID" failed: rc = %d\n",
./src/rebuild/scan.c:		D_ERROR("failed to create rebuild tree: "DF_RC"\n", DP_RC(rc));
./src/rebuild/scan.c:		D_ERROR(DF_UUID" send rebuild object list failed:%d\n",
./src/rebuild/srv.c:			D_ERROR("failed to create failed tgt list rc %d\n",
./src/rebuild/srv.c:		D_ERROR("rebuild_global_pool_tracker create failed: rc %d\n",
./src/rebuild/srv.c:			D_ERROR("rebuild targets canceled\n");
./src/rebuild/srv.c:		D_ERROR("pool map broad cast failed: rc "DF_RC"\n", DP_RC(rc));
./src/rebuild/srv.c:		D_ERROR("Get pool service term failed: rc = "DF_RC"\n",
./src/rebuild/srv.c:		D_ERROR("rebuild prepare failed: rc "DF_RC"\n", DP_RC(rc));
./src/rebuild/srv.c:		D_ERROR("pool map broadcast failed: rc "DF_RC"\n", DP_RC(rc));
./src/rebuild/srv.c:			D_ERROR("pool map broadcast failed: rc "DF_RC"\n",
./src/rebuild/srv.c:		D_ERROR("pool prop fetch failed: rc %d\n", rc);
./src/rebuild/srv.c:		D_ERROR("ds_pool_iv_prop_update failed %d.\n", rc);
./src/rebuild/srv.c:		D_ERROR("object scan failed: rc "DF_RC"\n", DP_RC(rc));
./src/rebuild/srv.c:		D_ERROR(DF_UUID": failed to look up pool\n",
./src/rebuild/srv.c:		D_ERROR(DF_UUID": failed to send RAS event\n",
./src/rebuild/srv.c:		D_ERROR(""DF_UUID" (ver=%u) rebuild failed: rc %d\n",
./src/rebuild/srv.c:			D_ERROR("iv final update fails"DF_UUID":rc %d\n",
./src/rebuild/srv.c:			D_ERROR("reschedule "DF_RC"\n", DP_RC(ret));
./src/rebuild/srv.c:			D_ERROR("rebuild_status_completed_update, "DF_UUID" "
./src/rebuild/srv.c:		D_ERROR(DF_UUID": failed to send RAS event\n",
./src/rebuild/srv.c:				D_ERROR(DF_UUID" create ult failed: %d\n",
./src/rebuild/srv.c:			D_ERROR(DF_UUID" schedule op %d ver %d failed: rc %d\n",
./src/rebuild/srv.c:		D_ERROR("failed to create %s tgt_list rc="DF_RC"\n",
./src/rebuild/srv.c:		D_ERROR("Set parameter failed: rc %d\n", rc);
./src/rebuild/srv.c:		D_ERROR("Can not start rebuild status check\n");
./src/rebuild/srv.c:			D_ERROR(DF_UUID" rebuild failed: rc %d\n",
./src/rebuild/srv.c:		D_ERROR("Can not find pool.\n");
./src/rebuild/srv.c:			D_ERROR(DF_UUID": pool group not found\n",
./src/rebuild/rebuild_iv.c:					D_ERROR("_status_completed_update, "
./src/rebuild/rebuild_iv.c:		D_ERROR("iv fetch failed "DF_RC"\n", DP_RC(rc));
./src/rebuild/rebuild_iv.c:		D_ERROR("iv update failed "DF_RC"\n", DP_RC(rc));
./src/engine/server_iv.c:		D_ERROR("Can not find class %d\n", key->class_id);
./src/engine/server_iv.c:		D_ERROR("dss_ult_periodic failed, rc "DF_RC"\n", DP_RC(rc));
./src/engine/server_iv.c:			D_ERROR("ds iv update retry failed: %d\n", rc1);
./src/engine/drpc_listener.c:			D_ERROR("dRPC listener progress error: "DF_RC"\n",
./src/engine/drpc_listener.c:		D_ERROR("Failed to create listener socket at '%s'\n",
./src/engine/drpc_listener.c:		D_ERROR("Failed to create drpc_progress_context\n");
./src/engine/drpc_listener.c:		D_ERROR("Listener setup failed, aborting ULT creation\n");
./src/engine/drpc_listener.c:		D_ERROR("Failed to create drpc listener ULT: "DF_RC"\n",
./src/engine/drpc_listener.c:		D_ERROR("Failed to allocate socket path\n");
./src/engine/drpc_listener.c:		D_ERROR("Failed to create mutex\n");
./src/engine/drpc_listener.c:		D_ERROR("ABT error re-joining thread: %d\n", rc);
./src/engine/drpc_listener.c:		D_ERROR("ABT error freeing thread: %d\n", tmp_rc);
./src/engine/drpc_listener.c:		D_ERROR("ABT error freeing mutex: %d\n", tmp_rc);
./src/engine/rpc.c:		D_ERROR("send reply failed: "DF_RC"\n", DP_RC(rc));
./src/engine/sched.c:		D_ERROR("Invalid throttle number: %d\n", percent);
./src/engine/sched.c:		D_ERROR("Invalid request type: %d\n", type);
./src/engine/sched.c:		D_ERROR("Can't throttle IO requests");
./src/engine/sched.c:				D_ERROR("XS(%d): Purge "DF_UUID" failed.\n",
./src/engine/sched.c:			D_ERROR("XS(%d): Pool "DF_UUID", req_cnt:%u, "
./src/engine/sched.c:					D_ERROR("type:%u, req_cnt:%u\n", type,
./src/engine/sched.c:		D_ERROR("XS(%d): Alloc purge item failed.\n", dx->dx_xs_id);
./src/engine/sched.c:			D_ERROR("Alloc req failed.\n");
./src/engine/sched.c:		D_ERROR("XS(%d): Create sched pool hash failed. "DF_RC".\n",
./src/engine/sched.c:		D_ERROR("Failed to allocate spi\n");
./src/engine/sched.c:		D_ERROR("Failed to insert pool hash. "DF_RC"\n", DP_RC(rc));
./src/engine/sched.c:			D_ERROR("XS(%d): get pool info "DF_UUID" failed.\n",
./src/engine/sched.c:		D_ERROR("XS(%d): query pool:"DF_UUID" space failed. "DF_RC"\n",
./src/engine/sched.c:		D_ERROR("XS(%d) traverse pool hash error. "DF_RC"\n",
./src/engine/sched.c:		D_ERROR("XS(%d): get req failed.\n", dx->dx_xs_id);
./src/engine/sched.c:			D_ERROR("Failed to get self thread. "DF_RC"\n",
./src/engine/sched.c:		D_ERROR("Failed to read ABT sched config: %d\n", ret);
./src/engine/sched.c:		D_ERROR("XS(%d) failed to pop network poll ULT: %d\n",
./src/engine/sched.c:		D_ERROR("XS(%d) failed to pop NVMe poll ULT: %d\n",
./src/engine/sched.c:		D_ERROR("XS(%d) failed to pop ULT for ABT pool(%d): %d\n",
./src/engine/sched.c:		D_ERROR("XS(%d) get ABT pool(%d) total size error: %d\n",
./src/engine/sched.c:			D_ERROR("XS(%d) sleep error: %s\n", dx->dx_xs_id,
./src/engine/sched.c:		D_ERROR("XS(%d) get ABT pool(%d) size error: %d\n",
./src/engine/sched.c:		D_ERROR("XS(%d) get ABT pools error: %d\n",
./src/engine/drpc_progress.c:		D_ERROR("Invalid dRPC listener\n");
./src/engine/drpc_progress.c:		D_ERROR("NULL drpc_progress_context passed\n");
./src/engine/drpc_progress.c:		D_ERROR("Polling failed, errno=%u\n", errno);
./src/engine/drpc_progress.c:			D_ERROR("drpc_progress_context session ctx is not a "
./src/engine/drpc_progress.c:		D_ERROR("Failed to count open drpc sessions\n");
./src/engine/drpc_progress.c:		D_ERROR("Failed to accept new drpc connection\n");
./src/engine/drpc_progress.c:		D_ERROR("Failed to send dRPC response (module=%u method=%u)\n",
./src/engine/drpc_progress.c:		D_ERROR("Could not allocate Drpc__Response\n");
./src/engine/drpc_progress.c:		D_ERROR("Failed to create drpc handler ULT: "DF_RC"\n",
./src/engine/drpc_progress.c:			D_ERROR("Error processing incoming session %u data\n",
./src/engine/drpc_progress.c:		D_ERROR("Invalid drpc_progress_context\n");
./src/engine/drpc_progress.c:		D_ERROR("Failed to convert drpc_progress_context to unixcomm "
./src/engine/init.c:		D_ERROR("failed to register DBTREE_CLASS_KV: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("failed to register DBTREE_CLASS_IV: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("failed to register DBTREE_CLASS_NV: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("failed to register DBTREE_CLASS_UV: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("failed to register DBTREE_CLASS_EC: "DF_RC"\n",
./src/engine/init.c:			D_ERROR("Failed to load module %s: %d\n",
./src/engine/init.c:			D_ERROR("invalid dss_core_offset %d "
./src/engine/init.c:		D_ERROR("Invalid NUMA node selected. "
./src/engine/init.c:		D_ERROR("NUMA node %d was not found in the topology",
./src/engine/init.c:		D_ERROR("Unable to allocate core allocation bitmap\n");
./src/engine/init.c:		D_ERROR("invalid dss_core_offset %d (set by \"-f\" option), "
./src/engine/init.c:		D_ERROR("failed to init ABT: %d\n", rc);
./src/engine/init.c:		D_ERROR("failed to handle %u/%u event: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("Failed to initialize dRPC: "DF_RC"\n", DP_RC(rc));
./src/engine/init.c:			D_ERROR("daos_init (client) failed, rc: "DF_RC"\n",
./src/engine/init.c:			D_ERROR("daos_hhash_init failed, rc: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("DAOS cannot be initialized using the configured "
./src/engine/init.c:		D_ERROR("failed to init server init state: "DF_RC"\n",
./src/engine/init.c:		D_ERROR("Failed to notify daos_server: "DF_RC"\n", DP_RC(rc));
./src/engine/init.c:		D_ERROR("invalid signo %d to register\n", signo);
./src/engine/init.c:		D_ERROR("sigaction() failure registering new and reading "
./src/engine/init.c:		D_ERROR("sigaction() failure registering new and reading old "
./src/engine/init.c:			D_ERROR("failed to wait for signals: %d\n", rc);
./src/engine/init.c:				D_ERROR("failure to gettimeofday(): %s (%d)\n",
./src/engine/init.c:					D_ERROR("failed to open file to dump ABT infos and ULTs stacks: %s (%d)\n",
./src/engine/module.c:		D_ERROR("modname %s is too long > %d\n",
./src/engine/module.c:		D_ERROR("cannot load %s: %s\n", name, dlerror());
./src/engine/module.c:		D_ERROR("failed to load %s: %s\n", modname, err);
./src/engine/module.c:		D_ERROR("inconsistent module name %s != %s\n", modname,
./src/engine/module.c:		D_ERROR("failed to init %s: "DF_RC"\n", smod->sm_name,
./src/engine/module.c:		D_ERROR("failed to register RPC for %s: "DF_RC"\n",
./src/engine/module.c:		D_ERROR("failed to register dRPC for %s: "DF_RC"\n",
./src/engine/module.c:		D_ERROR("failed to unregister RPC "DF_RC"\n", DP_RC(rc));
./src/engine/module.c:		D_ERROR("Failed to unregister dRPC "DF_RC"\n", DP_RC(rc));
./src/engine/module.c:		D_ERROR("module finalization failed for: "DF_RC"\n", DP_RC(rc));
./src/engine/module.c:			D_ERROR("failed to set up module %s: %d\n", m->sm_name,
./src/engine/module.c:			D_ERROR("failed to clean up module %s: "DF_RC"\n",
./src/engine/drpc_client.c:		D_ERROR("failed to connect to dRPC server at %s: "DF_RC"\n",
./src/engine/drpc_client.c:		D_ERROR("failed to create dRPC %d/%d: "DF_RC"\n",
./src/engine/drpc_client.c:		D_ERROR("failed to invoke dRPC %d/%d: "DF_RC"\n",
./src/engine/drpc_client.c:		D_ERROR("failed to get sched req\n");
./src/engine/drpc_client.c:		D_ERROR("failed to create thread for dRPC: %d "DF_RC"\n", rc,
./src/engine/drpc_client.c:		D_ERROR("received erroneous dRPC response: %d\n",
./src/engine/drpc_client.c:		D_ERROR("failed to allocate pool uuid\n");
./src/engine/drpc_client.c:		D_ERROR("received erroneous dRPC response: %d\n",
./src/engine/drpc_client.c:		D_ERROR("failed to unpack resp (get pool svc)\n");
./src/engine/drpc_client.c:			D_ERROR("failure fetching svc_ranks for "DF_UUID": "
./src/engine/srv.c:		D_ERROR("failed to set cpu affinity: %d\n", errno);
./src/engine/srv.c:		D_ERROR("failed to initialize TLS\n");
./src/engine/srv.c:			D_ERROR("failed to create crt ctxt: "DF_RC"\n",
./src/engine/srv.c:			D_ERROR("failed to register process cb "DF_RC"\n",
./src/engine/srv.c:			D_ERROR("failed to get xtream index: rc "DF_RC"\n",
./src/engine/srv.c:		D_ERROR("failed to init the scheduler\n");
./src/engine/srv.c:			D_ERROR("failed to init spdk context for xstream(%d) "
./src/engine/srv.c:			D_ERROR("Create ABT thread attr failed. %d\n", rc);
./src/engine/srv.c:			D_ERROR("Set ABT stack size failed. %d\n", rc);
./src/engine/srv.c:			D_ERROR("create NVMe poll ULT failed: %d\n", rc);
./src/engine/srv.c:				D_ERROR("failed to progress CART context: %d\n",
./src/engine/srv.c:		D_ERROR("Can not allocate execution stream.\n");
./src/engine/srv.c:		D_ERROR("failed to allocate 'stopping' future\n");
./src/engine/srv.c:		D_ERROR("failed to allocate 'shutdown' future\n");
./src/engine/srv.c:		D_ERROR("failed to allocate cpuset\n");
./src/engine/srv.c:		D_ERROR("create scheduler fails: "DF_RC"\n", DP_RC(rc));
./src/engine/srv.c:		D_ERROR("create xstream fails %d\n", rc);
./src/engine/srv.c:		D_ERROR("ABT_thread_attr_create fails %d\n", rc);
./src/engine/srv.c:		D_ERROR("ABT_thread_attr_set_stacksize fails %d\n", rc);
./src/engine/srv.c:		D_ERROR("create progress ULT failed: %d\n", rc);
./src/engine/srv.c:			D_ERROR("No core available for XS: %d", xs_id);
./src/engine/srv.c:			D_ERROR("Null core returned by hwloc for XS %d\n",
./src/engine/srv.c:		D_ERROR("missing arguments for acc_offload\n");
./src/engine/srv.c:		D_ERROR("Unknown type of offload\n");
./src/engine/srv.c:			D_ERROR("invalid value "DF_U64"\n", value);
./src/engine/srv.c:		D_ERROR("invalid key_id %d\n", key_id);
./src/engine/srv.c:		D_ERROR("ABT_info_print_config() error, rc = %d\n", rc);
./src/engine/srv.c:		D_ERROR("ABT_info_print_all_xstreams() error, rc = %d\n", rc);
./src/engine/srv.c:			D_ERROR("ABT_info_print_xstream() error, rc = %d, for "
./src/engine/srv.c:				D_ERROR("ABT_info_print_thread() error, "
./src/engine/srv.c:				D_ERROR("ABT_info_print_thread_stack() error, "
./src/engine/srv.c:			D_ERROR("ABT_xstream_get_main_sched() error, rc = %d, "
./src/engine/srv.c:				D_ERROR("ABT_info_print_sched() error, rc = "
./src/engine/srv.c:			D_ERROR("ABT_info_print_sched() error, rc = %d, for "
./src/engine/srv.c:			D_ERROR("ABT_sched_get_num_pools() error, rc = %d, for "
./src/engine/srv.c:			D_ERROR("ABT_sched_get_pools() error, rc = %d, for "
./src/engine/srv.c:				D_ERROR("ABT_info_print_pool() error, rc = %d, "
./src/engine/srv.c:				D_ERROR("ABT_info_print_thread_stacks_in_pool() error, rc = %d, "
./src/engine/drpc_handler.c:		D_ERROR("Failed to allocate handler registry table\n");
./src/engine/drpc_handler.c:		D_ERROR("Table not initialized\n");
./src/engine/drpc_handler.c:		D_ERROR("Module ID %d out of range\n", module_id);
./src/engine/drpc_handler.c:		D_ERROR("Tried to register a null handler\n");
./src/engine/drpc_handler.c:		D_ERROR("Tried to register module ID %d more than once\n",
./src/engine/drpc_handler.c:		D_ERROR("Table not initialized\n");
./src/engine/drpc_handler.c:		D_ERROR("Table not initialized\n");
./src/engine/drpc_handler.c:		D_ERROR("Module ID %d out of range\n", module_id);
./src/engine/drpc_handler.c:		D_ERROR("Handler for module %d not found\n", module_id);
./src/engine/drpc_handler.c:		D_ERROR("Table not initialized\n");
./src/engine/drpc_handler.c:		D_ERROR("Module ID %d out of range\n", module_id);
./src/engine/drpc_handler.c:		D_ERROR("Table not initialized\n");
./src/engine/drpc_handler.c:		D_ERROR("Message for unregistered dRPC module: %d\n",
./src/engine/profile.c:		D_ERROR("start dump ult failed: rc "DF_RC"\n", DP_RC(rc));
./src/engine/profile.c:		D_ERROR("profile init failed: rc "DF_RC"\n", DP_RC(rc));
./src/engine/tls.c:		D_ERROR("failed to initialize tls: %d\n", rc);
./src/engine/drpc_ras.c:		D_ERROR("failed to get self rank: "DF_RC"\n", DP_RC(rc));
./src/engine/drpc_ras.c:		D_ERROR("unable to generate timestamp\n");
./src/engine/drpc_ras.c:		D_ERROR("failed to retrieve xstream id");
./src/engine/drpc_ras.c:		D_ERROR("missing hostname parameter\n");
./src/engine/drpc_ras.c:		D_ERROR("missing msg parameter\n");
./src/engine/drpc_ras.c:		D_ERROR("open_memstream failed: "DF_RC"\n", DP_RC(-DER_NOMEM));
./src/engine/drpc_ras.c:		D_ERROR("null RAS event\n");
./src/engine/drpc_ras.c:			D_ERROR("received erroneous dRPC response: %d\n",
./src/engine/drpc_ras.c:		D_ERROR("failed to init RAS event %s: "DF_RC"\n",
./src/engine/drpc_ras.c:		D_ERROR("failed to send RAS event %s over dRPC: "DF_RC"\n",
./src/engine/drpc_ras.c:		D_ERROR("invalid pool\n");
./src/engine/drpc_ras.c:		D_ERROR("invalid service replicas\n");
./src/engine/drpc_ras.c:		D_ERROR("failed to convert svc replicas to proto\n");
./src/engine/ult.c:		D_ERROR("future set failure %d\n", rc);
./src/engine/ult.c:			D_ERROR("ABT_thread_attr_free failed: %d\n",
./src/pool/srv_util.c:		D_ERROR("no nodes in pool map\n");
./src/pool/srv_util.c:		D_ERROR(DF_UUID": failed to create rank list: %d\n",
./src/pool/srv_util.c:		D_ERROR("no nodes in pool map\n");
./src/pool/srv_util.c:		D_ERROR(DF_UUID": failed to create rank list: %d\n",
./src/pool/srv_util.c:		D_ERROR("Can not get rank "DF_RC"\n", DP_RC(rc));
./src/pool/srv_util.c:		D_ERROR("get failed tgts "DF_RC"\n", DP_RC(rc));
./src/pool/srv_util.c:		D_ERROR(DF_UUID": Pool cache not found\n", DP_UUID(pool_id));
./src/pool/srv_util.c:			D_ERROR(DF_UUID": Failed to get rank:%u, idx:%d\n",
./src/pool/srv_util.c:		D_ERROR(DF_UUID": Pool IV NS isn't initialized\n",
./src/pool/srv_util.c:		D_ERROR(DF_UUID": %s targets failed. "DF_RC"\n",
./src/pool/srv_util.c:		D_ERROR(DF_UUID": Failed to start targets updating ULT. %d\n",
./src/pool/srv_util.c:		D_ERROR("Failed to list pools: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_util.c:			D_ERROR(DF_UUID": Check targets status failed: %d\n",
./src/pool/srv_iv.c:		D_ERROR("prop g2l failed: rc %d\n", rc);
./src/pool/srv_iv.c:		D_ERROR("bad class id %d\n", key->class_id);
./src/pool/srv_iv.c:		D_ERROR("iv fetch failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("iv update failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("iv fetch failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("iv invalidate failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("iv invalidate failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("iv invalidate failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("pool_iv_update failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("pool_iv_update failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("iv fetch failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("pool_iv_prop_g2l failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_iv.c:		D_ERROR("daos_prop_copy failed "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("failed to register pool RPCs: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:			D_ERROR(DF_UUID": dc_mgmt_get_pool_svc_ranks() "
./src/pool/cli.c:		D_ERROR("Failed to refresh placement map: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to create local pool map: "DF_RC"\n",
./src/pool/cli.c:			D_ERROR("Couldn't get failed targets, "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("RPC error while connecting to pool: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to connect to pool: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("failed to create local pool map: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to register pool connect with agent: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("failed to obtain security credential: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("RPC error while disconnecting from pool: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to disconnect from pool: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("failed to notify agent of pool disconnect: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("Larger glob buffer needed ("DF_U64" bytes provided, "
./src/pool/cli.c:		D_ERROR("failed, rc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("failed to create local pool map: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed, rc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("Bad dpg_magic: %#x.\n", pool_glob->dpg_magic);
./src/pool/cli.c:		D_ERROR("failed, rc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("RPC error while excluding targets: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to exclude targets: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("tgt update failed count %zd\n",
./src/pool/cli.c:		D_ERROR("NULL tgts or tgts->tl_nr is zero\n");
./src/pool/cli.c:			D_ERROR(DF_UUID": failed to sys attach, rc %d.\n",
./src/pool/cli.c:			D_ERROR(DF_UUID": failed to rsvc_client_init, rc %d.\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR(DF_UUID": pool_target_addr_list_alloc failed, rc %d.\n",
./src/pool/cli.c:		D_ERROR("RPC error while querying pool: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("failed to query pool: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": failed to create pool query rpc: %d\n",
./src/pool/cli.c:		D_ERROR("RPC error while listing containers: %d\n", rc);
./src/pool/cli.c:		D_ERROR("failed to list containers %d\n", rc);
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": failed to create pool list cont rpc: "
./src/pool/cli.c:		D_ERROR("RPC error while querying pool target: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to query pool: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": failed to create pool tgt info rpc: %d\n",
./src/pool/cli.c:		D_ERROR("RPC error while querying pool: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR("failed to create rpc: "DF_RC"\n", DP_RC(rc));
./src/pool/cli.c:		D_ERROR("Invalid Arguments: n = %d, names = %p, values = %p"
./src/pool/cli.c:			D_ERROR("Invalid Arguments: names[%d] = %s",
./src/pool/cli.c:					D_ERROR("Invalid Arguments: values[%d] = %p, sizes[%d] = %lu",
./src/pool/cli.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/cli.c:		D_ERROR(DF_UUID": failed to create POOL_SVC_STOP RPC: %d\n",
./src/pool/rpc.c:			D_ERROR("ignore bad dpt_type %d.\n", entry->dpe_type);
./src/pool/srv_pool_map.c:			D_ERROR("Can't drain new "DF_TARGET"\n",
./src/pool/srv_pool_map.c:			D_ERROR("Can't drain reint "DF_TARGET"\n",
./src/pool/srv_pool_map.c:			D_ERROR("Can't reint rebuilding "DF_TARGET"\n",
./src/pool/srv_pool_map.c:			D_ERROR("Can't ADD_IN non-up "DF_TARGET"\n",
./src/pool/srv_pool_map.c:			D_ERROR("Can't EXCLUDE_OUT non-down "DF_TARGET"\n",
./src/pool/srv_pool_map.c:		D_ERROR("Invalid pool target operation: %d\n", opc);
./src/pool/srv_pool_map.c:			D_ERROR("Got request to change nonexistent target %u"
./src/pool/srv_pool_map.c:			D_ERROR("Got request to change nonexistent rank %u"
./src/pool/srv_target.c:			D_ERROR(DF_UUID"[%d]: GC pool run failed. "DF_RC"\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID"[%d]: Failed to create GC ULT. %d\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to create pool group: %d\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to create pool IV NS: %d\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to add ES pool caches: "DF_RC"\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to destroy pool group: "DF_RC"\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to delete ES pool caches: "DF_RC"\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to destroy pool group: %d\n",
./src/pool/srv_target.c:		D_ERROR("iv conn fetch %d\n", rc);
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed create ec eph equery ult: %d\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": Failed to get req for ec eph query ULT\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to look up pool: %d\n", DP_UUID(uuid),
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to start pool: %d\n", DP_UUID(uuid),
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to create fetch ult: %d\n",
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to start ec eph query ult: %d\n",
./src/pool/srv_target.c:		D_ERROR("Failed to query pool "DF_UUID", tgt_id: %d, "
./src/pool/srv_target.c:		D_ERROR(DF_UUID": failed to get index : rc "DF_RC"\n",
./src/pool/srv_target.c:		D_ERROR("Pool query on pool "DF_UUID" failed, "DF_RC"\n",
./src/pool/srv_target.c:			D_ERROR(DF_UUID": found conflicting pool handle: hdl="
./src/pool/srv_target.c:			D_ERROR(DF_UUID": failed to update group: %d\n",
./src/pool/srv_target.c:			D_ERROR(DF_UUID" failed to create pool map: "DF_RC"\n",
./src/pool/srv_target.c:			D_ERROR(DF_UUID": Can not update pool group: "DF_RC"\n",
./src/pool/srv_target.c:			D_ERROR(DF_UUID": failed update pl_map: "
./src/pool/srv_target.c:			D_ERROR(DF_UUID": failed fail-cnt update pl_map"
./src/pool/srv_target.c:			D_ERROR("dtx_resync_ult failure %d\n", ret);
./src/pool/srv_target.c:		D_ERROR("Failed to find pool "DF_UUID"\n",
./src/pool/srv_pool_scrub.c:		D_ERROR("Object scrub failed: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool_scrub.c:		D_ERROR("Lookup container '"DF_UUIDF"' failed: "DF_RC"\n",
./src/pool/srv_pool_scrub.c:		D_ERROR(DF_UUID"[%d]: Failed to create Scrubbing ULT. %d\n",
./src/pool/srv.c:		D_ERROR("Stop pools failed. "DF_RC"\n", DP_RC(rc));
./src/pool/srv.c:		D_ERROR(DF_UUID": ref: %d\n",
./src/pool/srv.c:		D_ERROR("pool list not empty\n");
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create uuid file %s: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to write uuid into %s: %d %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to fsync %s: %d\n", DP_UUID(uuid),
./src/pool/srv_pool.c:			D_ERROR("failed to open uuid file %s: %d\n", path,
./src/pool/srv_pool.c:		D_ERROR("failed to read %s: %d %d\n", path, rc, errno);
./src/pool/srv_pool.c:			D_ERROR("ignore bad dpt_type %d.\n", entry->dpe_type);
./src/pool/srv_pool.c:			D_ERROR("bad dpe_type %d.\n", entry->dpe_type);
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create POOL_CREATE RPC: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to destroy pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to remove %s: %d\n",
./src/pool/srv_pool.c:		D_ERROR("failed to create ps_lock: %d\n", rc);
./src/pool/srv_pool.c:		D_ERROR("evict ult failed: rc %d\n", rc);
./src/pool/srv_pool.c:		D_ERROR("pool "DF_UUID" event %d failed: rc %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to get ds_pool\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to look up layout version: "DF_RC"\n",
./src/pool/srv_pool.c:			D_ERROR(DF_UUID": failed to read pool map buffer: "DF_RC
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot get access data for pool: "DF_RC"\n",
./src/pool/srv_pool.c:			D_ERROR("failed to get swim for rank %u: %d\n",
./src/pool/srv_pool.c:				D_ERROR("failed to evict rank %u: %d\n",
./src/pool/srv_pool.c:		D_ERROR("ds_pool_iv_prop_update failed %d.\n", rc);
./src/pool/srv_pool.c:		D_ERROR("ds_pool_iv_srv_hdl_update failed %d.\n", rc);
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to read pool map buffer: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to distribute pool map %u: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to start pool: %d\n", DP_UUID(uuid),
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to allocate rdb path\n",
./src/pool/srv_pool.c:			D_ERROR(DF_UUID": failed to check rdb existence: %d\n",
./src/pool/srv_pool.c:		D_ERROR("failed to scan all pool services: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR("failed to create pool start ULT: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR("failed to stop all pools: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool.c:		D_ERROR("failed to stop all pool svcs: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool.c:		D_ERROR("failed to create pool stop ULT: "DF_RC"\n",
./src/pool/srv_pool.c:			D_ERROR("bad label length %zu (> %d).\n", value.iov_len,
./src/pool/srv_pool.c:			D_ERROR("bad owner length %zu (> %d).\n", value.iov_len,
./src/pool/srv_pool.c:			D_ERROR("bad owner group length %zu (> %d).\n",
./src/pool/srv_pool.c:			D_ERROR("get svc list failed: rc %d\n", rc);
./src/pool/srv_pool.c:			D_ERROR(DF_UUID": failed to look up pool map: "
./src/pool/srv_pool.c:		D_ERROR("daos_prop_dup failed.\n");
./src/pool/srv_pool.c:		D_ERROR("daos_prop_default_copy failed.\n");
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": found different cached and persistent pool "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": remote pool map buffer ("DF_U64") < required "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": being destroyed, not accepting connections\n",
./src/pool/srv_pool.c:			D_ERROR(DF_UUID": found conflicting pool handle\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot get access data for pool, "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": refusing connect attempt for "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": permission denied for connect attempt for "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to read pool map: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to connect to targets: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to disconnect from "DF_RC" targets\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to query from "DF_RC" targets\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": remote container buffer("DF_U64")"
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool list cont rpc: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to get container list for pool: %d\n",
./src/pool/srv_pool.c:			D_ERROR("ds_pool_iv_prop_fetch failed "DF_RC"\n",
./src/pool/srv_pool.c:					D_ERROR("mismatch %s - %s.\n",
./src/pool/srv_pool.c:					D_ERROR("mismatch %s - %s.\n",
./src/pool/srv_pool.c:					D_ERROR("type %d mismatch "DF_U64" - "
./src/pool/srv_pool.c:			D_ERROR("iv_prop verify failed "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to read pool map: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": Failed to get rank:%u, idx:%d\n, rc:%d",
./src/pool/srv_pool.c:		D_ERROR("failed to create local pool map: %d\n", rc);
./src/pool/srv_pool.c:		D_ERROR("failed to get num disabled tgts, rc=%d\n", rc);
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool query rpc: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to query pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR("Failed to process pool query results, rc=%d\n", rc);
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool get prop rpc: "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to get prop for pool: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool extend rpc: "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": Failed to set targets to UP state for "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool req: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": pool_target_addr_list_alloc failed, rc %d.\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": Failed to set targets to %s state: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to write prop for pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to read prop for pool, rc=%d\n",
./src/pool/srv_pool.c:			D_ERROR(DF_UUID": failed to update prop IV for pool, "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to init rsvc client: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool set prop rpc: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to set prop for pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": No ACL prop entry for pool\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": Unable to update pool with new ACL, rc=%d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to write updated ACL for pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool update ACL rpc: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to update ACL for pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": No ACL prop entry for pool\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": Failed to remove requested principal, "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to write updated ACL for pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool delete ACL rpc: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to delete ACL entry for pool: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to update pool map cache: %d\n",
./src/pool/srv_pool.c:			D_ERROR("failed to schedule reclaim rc: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR("invalid key/value size: key="DF_U64" value="DF_U64"\n",
./src/pool/srv_pool.c:		D_ERROR("Pool open handle "DF_UUID" is in RDB but not the pool",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": being destroyed, not accepting connections\n",
./src/pool/srv_pool.c:			D_ERROR("rebuild fails rc: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool.c:		D_ERROR("failed to schedule extend rc: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool.c:		D_ERROR("failed to schedule extend rc: "DF_RC"\n", DP_RC(rc));
./src/pool/srv_pool.c:		D_ERROR("invalid key/value size: key="DF_U64" value="DF_U64"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": cannot find pool service: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to create pool evict rpc: %d\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": pool destroy failed to evict handles, "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID ": remote ranks buffer(" DF_U64 ")"
./src/pool/srv_pool.c:		D_ERROR(DF_UUID ": cannot find pool service: " DF_RC "\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID ": failed to create POOL_RANKS_GET rpc, "
./src/pool/srv_pool.c:		D_ERROR(DF_UUID ": failed to get ranks, " DF_RC "\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID ": get ranks failed, " DF_RC "\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to read pool map: "DF_RC"\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to get ds_pool\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID" fetch srv hdl: %d\n", DP_UUID(pool_uuid), rc);
./src/pool/srv_pool.c:		D_ERROR(DF_UUID": failed to get ds_pool\n",
./src/pool/srv_pool.c:		D_ERROR(DF_UUID" fetch srv hdl: %d\n", DP_UUID(pool_uuid), rc);
./src/client/kv/dc_kv.c:		D_ERROR("Failed to open kv obj "DF_RC"\n", DP_RC(rc));
./src/client/kv/dc_kv.c:			D_ERROR("Failed to create task to cleanup obj hdl\n");
./src/client/kv/dc_kv.c:		D_ERROR("KV object must be of type Flat KV (OID feats).\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to open object_open task\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to register dependency\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to register completion cb\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to create object_close task\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to register dependency\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to register completion cb\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to create object_punch task\n");
./src/client/kv/dc_kv.c:		D_ERROR("Failed to register dependency\n");
./src/client/kv/dc_kv.c:		D_ERROR("Buffer size pointer is NULL\n");
./src/client/dfs/duns.c:		D_ERROR("unable to locate/bind %s, dlerror() says '%s', "
./src/client/dfs/duns.c:		D_ERROR("unable to resolve llapi_dir_create_foreign symbol, "
./src/client/dfs/duns.c:		D_ERROR("unable to resolve llapi_unlink_foreign symbol, "
./src/client/dfs/duns.c:		D_ERROR("liblustre_notfound == false && liblustre_notfound == "
./src/client/dfs/duns.c:		D_ERROR("unable to allocate XATTR_SIZE_MAX to get LOV/LMV "
./src/client/dfs/duns.c:		D_ERROR("unable to open '%s' errno %d(%s).\n", path, errno,
./src/client/dfs/duns.c:		D_ERROR("file with foreign LOV support is presently not "
./src/client/dfs/duns.c:			D_ERROR("ioctl(LL_IOC_LMV_GETSTRIPE) failed, rc: %d, "
./src/client/dfs/duns.c:			D_ERROR("Invalid DAOS LMV format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format: Container layout cannot be"
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format: pool UUID cannot be"
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS LMV format: container UUID cannot be"
./src/client/dfs/duns.c:			D_ERROR("Failed to copy path\n");
./src/client/dfs/duns.c:			D_ERROR("Invalid DAOS format (%s).\n", path);
./src/client/dfs/duns.c:				D_ERROR("Invalid DAOS format (%s).\n", path);
./src/client/dfs/duns.c:			D_ERROR("Invalid format: pool UUID cannot be parsed\n");
./src/client/dfs/duns.c:			D_ERROR("Invalid DAOS format (%s).\n", path);
./src/client/dfs/duns.c:			D_ERROR("Invalid format: cont UUID cannot be parsed\n");
./src/client/dfs/duns.c:			D_ERROR("Invalid xattr length\n");
./src/client/dfs/duns.c:			D_ERROR("Invalid DAOS unified namespace xattr: %s\n",
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format: Container layout cannot be"
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format: pool UUID cannot be"
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format (%s).\n", str);
./src/client/dfs/duns.c:		D_ERROR("Invalid DAOS xattr format: container UUID cannot be"
./src/client/dfs/duns.c:				D_ERROR("Failed to allocate container prop.");
./src/client/dfs/duns.c:					D_ERROR("failed to copy properties (%d)\n", rc);
./src/client/dfs/duns.c:		D_ERROR("Failed to create container (%d)\n", rc);
./src/client/dfs/duns.c:		D_ERROR("Failed to create LMV value\n");
./src/client/dfs/duns.c:		D_ERROR("Failed to create Lustre dir '%s' with foreign "
./src/client/dfs/duns.c:			D_ERROR("Failed to allocate container prop.");
./src/client/dfs/duns.c:				D_ERROR("failed to copy properties (%d)\n", rc);
./src/client/dfs/duns.c:		D_ERROR("Invalid path\n");
./src/client/dfs/duns.c:			D_ERROR("Invalid DUNS format: %s\n", path);
./src/client/dfs/duns.c:			D_ERROR("Failed to create container (%d)\n", rc);
./src/client/dfs/duns.c:			D_ERROR("Failed to create file %s: %s\n", path,
./src/client/dfs/duns.c:			D_ERROR("Failed copy path %s: %s\n", path,
./src/client/dfs/duns.c:			D_ERROR("Failed to statfs dir %s: %s\n",
./src/client/dfs/duns.c:			D_ERROR("Failed to create dir %s: %s\n",
./src/client/dfs/duns.c:		D_ERROR("Invalid container layout.\n");
./src/client/dfs/duns.c:			D_ERROR("Failed to create xattr value\n");
./src/client/dfs/duns.c:				D_ERROR("Failed to set DAOS xattr: %s\n",
./src/client/dfs/duns.c:				D_ERROR("Failed to set DAOS xattr: %s\n",
./src/client/dfs/duns.c:		D_ERROR("Failed to create container (%d)\n", rc);
./src/client/dfs/duns.c:		D_ERROR("duns_resolve_path() Failed on path %s (%d)\n",
./src/client/dfs/duns.c:		D_ERROR("Failed to destroy container (%d)\n", rc);
./src/client/dfs/duns.c:			D_ERROR("Failed to unlink %sfile %s: %s\n",
./src/client/dfs/duns.c:			D_ERROR("Failed to remove %sdir %s: %s\n",
./src/client/dfs/dfs.c:				D_ERROR("daos_tx_restart() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_tx_close() failed (%d)\n", ret);
./src/client/dfs/dfs.c:			D_ERROR("daos_cont_alloc_oids() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch entry %s "DF_RC"\n", name,
./src/client/dfs/dfs.c:			D_ERROR("Failed to fetch entry %s "DF_RC"\n", name,
./src/client/dfs/dfs.c:			D_ERROR("Failed to load value for symlink\n");
./src/client/dfs/dfs.c:			D_ERROR("Failed to insert entry %s (%d)\n", name, rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_array_open_with_attr() failed (%d)\n",
./src/client/dfs/dfs.c:		D_ERROR("Invalid entry type (not a dir, file, symlink).\n");
./src/client/dfs/dfs.c:			D_ERROR("daos_array_open_with_attr() failed (%d)\n",
./src/client/dfs/dfs.c:			D_ERROR("Inserting file entry %s failed (%d)\n",
./src/client/dfs/dfs.c:		D_ERROR("fetch_entry %s failed %d.\n", file->name, rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_array_open_with_attr() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("Failed to truncate file (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_array_get_size() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("Inserting dir entry %s failed (%d)\n",
./src/client/dfs/dfs.c:		D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("Inserting entry %s failed (rc = %d)\n",
./src/client/dfs/dfs.c:		D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("Failed to create DFS superblock (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch SB info (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("SB does not exist.\n");
./src/client/dfs/dfs.c:		D_ERROR("SB MAGIC verification failed.\n");
./src/client/dfs/dfs.c:		D_ERROR("Incompatible SB version.\n");
./src/client/dfs/dfs.c:		D_ERROR("Incompatible DFS Layout version.\n");
./src/client/dfs/dfs.c:		D_ERROR("Should pass a valid container handle pointer\n");
./src/client/dfs/dfs.c:		D_ERROR("Failed to allocate container prop.");
./src/client/dfs/dfs.c:			D_ERROR("failed to copy properties (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_cont_create() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_cont_open() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to insert root entry (%d).", rc);
./src/client/dfs/dfs.c:			D_ERROR("dfs_mount() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_cont_close() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to allocate prop.");
./src/client/dfs/dfs.c:		D_ERROR("daos_cont_query() failed, "DF_RC"\n", DP_RC(rc));
./src/client/dfs/dfs.c:		D_ERROR("container is not of type POSIX\n");
./src/client/dfs/dfs.c:		D_ERROR("Unable to convert owner to uid\n");
./src/client/dfs/dfs.c:		D_ERROR("Unable to convert owner to gid\n");
./src/client/dfs/dfs.c:		D_ERROR("Invalid superblock or root object ID\n");
./src/client/dfs/dfs.c:		D_ERROR("Failed to open root object (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_cont_alloc_oids() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Invalid parameter, NULL glob pointer.\n");
./src/client/dfs/dfs.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, iov_buf_len "
./src/client/dfs/dfs.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, "
./src/client/dfs/dfs.c:		D_ERROR("Bad magic value: %#x.\n", dfs_params->magic);
./src/client/dfs/dfs.c:		D_ERROR("Container uuid mismatch, in coh: "DF_UUID", "
./src/client/dfs/dfs.c:		D_ERROR("Invalid superblock or root object ID\n");
./src/client/dfs/dfs.c:		D_ERROR("daos_obj_open() failed, "DF_RC"\n", DP_RC(rc));
./src/client/dfs/dfs.c:		D_ERROR("daos_obj_open() failed, "DF_RC"\n", DP_RC(rc));
./src/client/dfs/dfs.c:			D_ERROR("daos_tx_open() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_tx_commit() failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_obj_close() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_obj_close() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("%s is not a directory\n", obj->name);
./src/client/dfs/dfs.c:				D_ERROR("daos_array_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("Invalid entry type in path.\n");
./src/client/dfs/dfs.c:			D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_array_open_with_attr() Failed (%d)\n",
./src/client/dfs/dfs.c:				D_ERROR("daos_array_get_size() Failed (%d)\n",
./src/client/dfs/dfs.c:			D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Invalid entry type (not a dir, file, symlink).\n");
./src/client/dfs/dfs.c:			D_ERROR("daos_tx_open() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Invalid entry type (not a dir, file, symlink).\n");
./src/client/dfs/dfs.c:				D_ERROR("daos_tx_commit() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Invalid object type (not a dir, file, symlink).\n");
./src/client/dfs/dfs.c:		D_ERROR("Invalid parameter, NULL glob pointer.\n");
./src/client/dfs/dfs.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, iov_buf_len "
./src/client/dfs/dfs.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, "
./src/client/dfs/dfs.c:		D_ERROR("Bad magic value: %#x.\n", obj_glob->magic);
./src/client/dfs/dfs.c:		D_ERROR("Container uuid mismatch, in coh: "DF_UUID", "
./src/client/dfs/dfs.c:		D_ERROR("daos_array_open_with_attr() failed, "DF_RC"\n",
./src/client/dfs/dfs.c:		D_ERROR("Invalid entry type (not a dir, file, symlink).\n");
./src/client/dfs/dfs.c:		D_ERROR("daos_obj_close() failed, "DF_RC"\n", DP_RC(rc));
./src/client/dfs/dfs.c:		D_ERROR("Failed to read from array object (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_array_read() failed, "DF_RC"\n",
./src/client/dfs/dfs.c:			D_ERROR("daos_array_read() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_array_write() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_array_write() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("Invalid path %s and entry name is NULL)\n",
./src/client/dfs/dfs.c:			D_ERROR("Invalid path %s and entry name is NULL\n",
./src/client/dfs/dfs.c:			D_ERROR("Invalid path %s and entry name is NULL)\n",
./src/client/dfs/dfs.c:		D_ERROR("setuid, setgid, & sticky bit are not supported.\n");
./src/client/dfs/dfs.c:			D_ERROR("Failed to lookup symlink %s\n", entry.value);
./src/client/dfs/dfs.c:		D_ERROR("Failed to update mode (rc = %d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to update attr (rc = %d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("daos_array_punch() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_obj_list_akey() failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_obj_fetch() failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_obj_update() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_tx_open() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch entry %s (%d)\n", name, rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch entry %s (%d)\n", new_name, rc);
./src/client/dfs/dfs.c:				D_ERROR("Can't rename non dir over a dir\n");
./src/client/dfs/dfs.c:				D_ERROR("daos_obj_open() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("failed to check dir %s (%d)\n",
./src/client/dfs/dfs.c:				D_ERROR("daos_obj_close() Failed (%d)\n", rc);
./src/client/dfs/dfs.c:				D_ERROR("target dir is not empty\n");
./src/client/dfs/dfs.c:			D_ERROR("Failed to remove entry %s (%d)\n",
./src/client/dfs/dfs.c:			D_ERROR("Failed to remove entry %s (%d)\n",
./src/client/dfs/dfs.c:			D_ERROR("Inserting new entry %s failed (%d)\n",
./src/client/dfs/dfs.c:		D_ERROR("Inserting entry %s failed (%d)\n", new_name, rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to copy extended attributes (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Punch entry %s failed (%d)\n", name, rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_tx_commit() failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("daos_tx_open() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch entry %s (%d)\n", name1, rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch entry %s (%d)\n", name2, rc);
./src/client/dfs/dfs.c:		D_ERROR("Punch entry %s failed (%d)\n", name1, rc);
./src/client/dfs/dfs.c:		D_ERROR("Punch entry %s failed (%d)\n", name2, rc);
./src/client/dfs/dfs.c:		D_ERROR("Inserting entry %s failed (%d)\n", name1, rc);
./src/client/dfs/dfs.c:		D_ERROR("Inserting entry %s failed (%d)\n", name2, rc);
./src/client/dfs/dfs.c:				D_ERROR("daos_tx_commit() failed (%d)\n", rc);
./src/client/dfs/dfs.c:		D_ERROR("Failed to add extended attribute %s\n", name);
./src/client/dfs/dfs.c:		D_ERROR("Failed to fetch xattr %s (%d)\n", name, rc);
./src/client/dfs/dfs.c:		D_ERROR("Invalid Container uuid\n");
./src/client/dfs/dfs.c:			D_ERROR("dfs_mount failed (%d)\n", rc);
./src/client/dfs/dfs.c:			D_ERROR("dfs_cont_create failed (%d)\n", rc);
./src/client/array/dc_array.c:		D_ERROR("Failed to create array obj "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:			D_ERROR("Failed to create task to cleanup obj hdl\n");
./src/client/array/dc_array.c:		D_ERROR("daos_array_l2g failed, rc: "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Invalid parameter, NULL glob pointer.\n");
./src/client/array/dc_array.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, iov_buf_len "
./src/client/array/dc_array.c:		D_ERROR("Container uuid mismatch, in coh: "DF_UUID", "
./src/client/array/dc_array.c:		D_ERROR("Failed local object open "DF_RC".\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Invalid parameter, NULL coh.\n");
./src/client/array/dc_array.c:		D_ERROR("Invalid parameter of glob, iov_buf %p, "
./src/client/array/dc_array.c:		D_ERROR("Bad magic value: %#x.\n", array_glob->magic);
./src/client/array/dc_array.c:		D_ERROR("Invalid parameter, cell/chunk size is 0.\n");
./src/client/array/dc_array.c:		D_ERROR("dc_array_g2l failed "DF_RC".\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Failed to open object "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Array Dkeys must be UINT64 Typed (OID feats).\n");
./src/client/array/dc_array.c:		D_ERROR("Array must be of type Flat KV (OID feats).\n");
./src/client/array/dc_array.c:		D_ERROR("Array Create must have DAOS_OF_ARRAY (OID feats).\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to create object_open task\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to create object_update task\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register prep CB\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register dependency\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register completion cb\n");
./src/client/array/dc_array.c:			D_ERROR("Failed to create task to cleanup obj hdl\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to open object "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Array Dkeys must be UINT64 Typed (OID feats).\n");
./src/client/array/dc_array.c:		D_ERROR("Array must be of type Flat KV (OID feats).\n");
./src/client/array/dc_array.c:		D_ERROR("Array Open must have DAOS_OF_ARRAY (OID feats).\n");
./src/client/array/dc_array.c:		D_ERROR("Array open_with_attr must not have DAOS_OF_ARRAY"
./src/client/array/dc_array.c:		D_ERROR("Failed to open object_open task "DF_RC"\n",
./src/client/array/dc_array.c:			D_ERROR("Failed to register dependency "DF_RC"\n",
./src/client/array/dc_array.c:			D_ERROR("Failed to register completion cb "DF_RC"\n",
./src/client/array/dc_array.c:		D_ERROR("Failed to open object_fetch task\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register prep CB\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register dependency\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register completion cb\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register completion cb\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to create object_close task "DF_RC"\n",
./src/client/array/dc_array.c:		D_ERROR("Failed to register dependency "DF_RC"\n",
./src/client/array/dc_array.c:		D_ERROR("Failed to register completion cb "DF_RC"\n",
./src/client/array/dc_array.c:		D_ERROR("Failed to create object_punch task\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to register dependency\n");
./src/client/array/dc_array.c:		D_ERROR("Failed to get array size "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Array Read Failed "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("NULL iod passed\n");
./src/client/array/dc_array.c:		D_ERROR("NULL scatter-gather list passed\n");
./src/client/array/dc_array.c:		D_ERROR("Unequal extents of memory and array descriptors\n");
./src/client/array/dc_array.c:			D_ERROR("Failed to compute dkey\n");
./src/client/array/dc_array.c:					D_ERROR("Failed to compute dkey\n");
./src/client/array/dc_array.c:				D_ERROR("Failed to create sgl "DF_RC"\n",
./src/client/array/dc_array.c:				D_ERROR("Fetch dkey "DF_U64" failed "DF_RC"\n",
./src/client/array/dc_array.c:				D_ERROR("Update dkey "DF_U64" failed (%d)\n",
./src/client/array/dc_array.c:		D_ERROR("Array size query Failed "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("daos_task_create() failed "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Task create failed "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Task create failed "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:		D_ERROR("Array DKEY enumermation Failed "DF_RC"\n", DP_RC(rc));
./src/client/array/dc_array.c:			D_ERROR("FAILED to reinit task\n");
./src/client/array/dc_array.c:			D_ERROR("Failed to compute dkey\n");
./src/client/api/mgmt.c:		D_ERROR("Blobstore UUID must be non-NULL\n");
./src/client/api/rpc.c:			D_ERROR("failed to progress CART context: %d\n", rc);
./src/client/api/object.c:	D_ERROR("Unsupported API\n");
./src/client/api/object.c:	D_ERROR("Unsupported API\n");
./src/client/api/object.c:	D_ERROR("Unsupported API\n");
./src/client/api/object.c:		D_ERROR("Can't punch multiple dkeys for now\n");
./src/client/api/object.c:	D_ERROR("Unsupported API\n");
./src/client/api/object.c:		D_ERROR("For now, num anchors should be the same as what is"
./src/client/api/object.c:		D_ERROR("dc_cont_hdl2redunfac failed, "DF_RC"\n",
./src/client/api/init.c:		D_ERROR("failed to initialize eq_lib: "DF_RC"\n", DP_RC(rc));
./src/client/api/init.c:		D_ERROR("failed to finalize eq: "DF_RC"\n", DP_RC(rc));
./src/client/api/init.c:		D_ERROR("failed to disconnect some resources may leak, "
./src/client/api/task.c:		D_ERROR("crt progress failed with "DF_RC"\n", DP_RC(rc));
./src/client/api/event.c:		D_ERROR("failed to initialize crt: "DF_RC"\n", DP_RC(rc));
./src/client/api/event.c:		D_ERROR("failed to create client context: "DF_RC"\n",
./src/client/api/event.c:			D_ERROR("failed to destroy client context: "DF_RC"\n",
./src/client/api/event.c:		D_ERROR("failed to shutdown crt: "DF_RC"\n", DP_RC(rc));
./src/client/api/event.c:		D_ERROR("Event status should be INIT: %d\n", evx->evx_status);
./src/client/api/event.c:		D_ERROR("Launch all children before launch the parent.\n");
./src/client/api/event.c:			D_ERROR("Can't find eq from handle %"PRIu64"\n",
./src/client/api/event.c:			D_ERROR("Event queue is in progress of finalizing\n");
./src/client/api/event.c:		D_ERROR("Can't start a parent event with no children\n");
./src/client/api/event.c:			D_ERROR("Can't find eq from handle %"PRIu64"\n",
./src/client/api/event.c:		D_ERROR("crt progress failed with "DF_RC"\n", DP_RC(rc));
./src/client/api/event.c:		D_ERROR("crt progress failed with "DF_RC"\n", DP_RC(rc));
./src/client/api/event.c:		D_ERROR("eqh nonexist.\n");
./src/client/api/event.c:		D_ERROR("eqx_finalizing.\n");
./src/client/api/event.c:			D_ERROR("failed to flush client context: "DF_RC"\n",
./src/client/api/event.c:			D_ERROR("Failed to destroy CART context for EQ (%d)\n",
./src/client/api/event.c:			D_ERROR("Parent event is not initialized or is already "
./src/client/api/event.c:			D_ERROR("Can't nest event\n");
./src/client/api/event.c:			D_ERROR("Invalid EQ handle %"PRIx64"\n", eqh.cookie);
./src/client/api/event.c:			D_ERROR("The DAOS client library is not initialized: "
./src/client/api/event.c:			D_ERROR("Child event %p launched: %d\n",
./src/client/api/event.c:			D_ERROR("Failed to finalize child event "DF_RC"\n",
./src/client/api/event.c:			D_ERROR("Event not linked to its parent\n");
./src/client/api/event.c:			D_ERROR("Parent event not init or launched: %d\n",
./src/client/api/event.c:			D_ERROR("Invalid EQ handle %"PRIu64"\n",
./src/client/api/pool.c:		D_ERROR("invalid pool_prop parameter.\n");
./src/client/api/pool.c:		D_ERROR("ncont must be non-NULL\n");
./src/client/api/container.c:		D_ERROR("Invalid container properties.\n");
./src/client/api/container.c:		D_ERROR("invalid cont_prop parameter.\n");
./src/client/api/container.c:		D_ERROR("invalid acl_prop parameter\n");
./src/client/api/container.c:		D_ERROR("invalid prop parameter.\n");
./src/client/api/container.c:		D_ERROR("invalid acl parameter\n");
./src/client/api/container.c:		D_ERROR("invalid acl parameter.\n");
./src/client/api/container.c:			D_ERROR("user principal invalid\n");
./src/client/api/container.c:			D_ERROR("group principal invalid\n");
./src/client/api/container.c:		D_ERROR("user or group required\n");
./src/client/api/job.c:		D_ERROR("Uname to get uname for creating default jobid");
./src/client/dfuse/il/int_posix.c:			D_ERROR("daos_pool_disconnect() failed, " DF_RC "\n",
./src/client/dfuse/il/int_posix.c:			D_ERROR("dfs_umount() failed, %d\n", rc);
./src/client/dfuse/il/int_posix.c:			D_ERROR("daos_cont_close() failed, " DF_RC "\n",
./src/client/dfuse/il/int_posix.c:		D_ERROR("ioil_fetch_cont_handles() failed, %d\n", rc);
./src/client/pydaos/pydaos_shim.c:		D_ERROR("MAGIC number does not match, expected %d got %d\n",
./src/placement/jump_map.c:		D_ERROR("Can not find obj class, invalid oid="DF_OID"\n",
./src/placement/jump_map.c:		D_ERROR("Could not find root node in pool map.");
./src/placement/jump_map.c:					D_ERROR("special oid "DF_OID
./src/placement/jump_map.c:		D_ERROR("jump_map_obj_layout_fill failed, rc "DF_RC"\n",
./src/placement/jump_map.c:		D_ERROR("pl_obj_layout_alloc failed, rc "DF_RC"\n",
./src/placement/jump_map.c:		D_ERROR("get object layout failed, rc "DF_RC"\n",
./src/placement/jump_map.c:		D_ERROR("Could not find root node in pool map.");
./src/placement/jump_map.c:		D_ERROR("cannot find active targets: %d\n", rc);
./src/placement/jump_map.c:		D_ERROR("jm_obj_placement_get failed, rc "DF_RC"\n", DP_RC(rc));
./src/placement/jump_map.c:		D_ERROR("get_layout_alloc failed, rc "DF_RC"\n", DP_RC(rc));
./src/placement/jump_map.c:		D_ERROR("Could not generate placement layout, rc "DF_RC"\n",
./src/placement/jump_map.c:		D_ERROR("pl_map version(%u) < rebuild version(%u)\n",
./src/placement/jump_map.c:		D_ERROR("jm_obj_placement_get failed, rc "DF_RC"\n", DP_RC(rc));
./src/placement/jump_map.c:		D_ERROR("pl_map version(%u) < rebuild version(%u)\n",
./src/placement/jump_map.c:		D_ERROR("jm_obj_placement_get failed, rc %d.\n", rc);
./src/placement/jump_map.c:		D_ERROR("pl_map version(%u) < rebuild version(%u)\n",
./src/placement/jump_map.c:		D_ERROR("jm_obj_placement_get failed, rc %d.\n", rc);
./src/placement/ring_map.c:		D_ERROR("Can not find obj class, invalid oid="DF_OID"\n",
./src/placement/ring_map.c:			D_ERROR("special oid "DF_OID" failed: rc %d\n",
./src/placement/ring_map.c:		D_ERROR("ring_obj_layout_fill failed, rc "DF_RC"\n", DP_RC(rc));
./src/placement/ring_map.c:		D_ERROR("ring_obj_placement_get failed, rc "DF_RC"\n",
./src/placement/ring_map.c:		D_ERROR("pl_obj_layout_alloc failed, rc "DF_RC"\n", DP_RC(rc));
./src/placement/ring_map.c:		D_ERROR("ring_obj_layout_fill failed, rc "DF_RC"\n", DP_RC(rc));
./src/placement/ring_map.c:		D_ERROR("pl_map version(%u) < rebuild version(%u)\n",
./src/placement/ring_map.c:		D_ERROR("pl_map version(%u) < reintegration version(%u)\n",
./src/placement/pl_map_common.c:		D_ERROR("obj="DF_OID": grp size (%u) (%u) is larger than "
