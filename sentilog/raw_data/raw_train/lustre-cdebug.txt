lustre-release/libcfs/libcfs/linux-crypto.c:		CDEBUG(D_INFO, "Failed to alloc crypto hash %s\n",
lustre-release/libcfs/libcfs/linux-crypto.c:		CDEBUG(D_INFO, "Failed to alloc ahash_request for %s\n",
lustre-release/libcfs/libcfs/linux-crypto.c:	CDEBUG(D_INFO, "Using crypto hash: %s (%s) speed %d MB/s\n",
lustre-release/libcfs/libcfs/linux-crypto.c:		CDEBUG(D_INFO, "Crypto hash algorithm %s test error: rc = %d\n",
lustre-release/libcfs/libcfs/linux-crypto.c:		CDEBUG(D_CONFIG, "Crypto hash algorithm %s speed = %d MB/s\n",
lustre-release/libcfs/libcfs/linux-tracefile.c:	 * XXX nikita: do NOT call portals_debug_msg() (CDEBUG/ENTRY/EXIT)
lustre-release/libcfs/libcfs/module.c:		CDEBUG_LIMIT(D_ERROR,
lustre-release/libcfs/libcfs/module.c:	CDEBUG(D_IOCTL, "libcfs ioctl cmd %lu\n", cmd);
lustre-release/libcfs/libcfs/module.c:		CDEBUG(D_IOCTL, "invalid ioctl ( type %d, nr %d, size %d )\n",
lustre-release/libcfs/libcfs/module.c:	CDEBUG (D_OTHER, "portals setup OK\n");
lustre-release/libcfs/libcfs/module.c:	CDEBUG(D_MALLOC, "before Portals cleanup: kmem %d\n",
lustre-release/libcfs/libcfs/linux-debug.c:                CDEBUG(D_HA, "Invoked LNET debug log upcall %s %s\n",
lustre-release/libcfs/libcfs/tracefile.c:	 * XXX nikita: do NOT call portals_debug_msg() (CDEBUG/ENTRY/EXIT)
lustre-release/libcfs/libcfs/tracefile.c:	 * XXX nikita: do NOT call portals_debug_msg() (CDEBUG/ENTRY/EXIT)
lustre-release/libcfs/libcfs/tracefile.c:         * XXX nikita: do NOT call portals_debug_msg() (CDEBUG/ENTRY/EXIT)
lustre-release/libcfs/libcfs/tracefile.c:        cfs_set_ptldebug_header(&header, msgdata, CDEBUG_STACK());
lustre-release/libcfs/libcfs/tracefile.c:	cfs_set_ptldebug_header(&hdr, msgdata, CDEBUG_STACK());
lustre-release/libcfs/libcfs/hash.c:		CDEBUG(D_INFO, "Try to empty hash: %s, loop: %u\n",
lustre-release/libcfs/libcfs/hash.c:		CDEBUG(D_INFO, "early quit of rehashing: %d\n", rc);
lustre-release/libcfs/libcfs/debug.c:unsigned int libcfs_console_backoff = CDEBUG_DEFAULT_BACKOFF;
lustre-release/libcfs/libcfs/debug.c:		libcfs_console_max_delay = CDEBUG_DEFAULT_MAX_DELAY;
lustre-release/libcfs/libcfs/debug.c:		libcfs_console_min_delay = CDEBUG_DEFAULT_MIN_DELAY;
lustre-release/libcfs/libcfs/debug.c:	CDEBUG(D_TRACE, "**************************************************\n");
lustre-release/libcfs/libcfs/debug.c:	CDEBUG(D_TRACE, "**************************************************\n");
lustre-release/libcfs/libcfs/linux/linux-curproc.c:			CDEBUG(D_INFO, "key: %s, entry: %s\n", key, entry);
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO, "CPU %d is invalid or it's offline\n", cpu);
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO, "CPU %d is already in partition %d\n",
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO, "CPU %d is already in cpumask\n", cpu);
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO, "CPU %d is already in partition %d cpumask\n",
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO, "Invalid CPU id %d\n", cpu);
lustre-release/libcfs/libcfs/libcfs_cpu.c:			CDEBUG(D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:		CDEBUG(D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:	CDEBUG(warn ? D_WARNING : D_INFO,
lustre-release/libcfs/libcfs/libcfs_cpu.c:			CDEBUG(D_INFO, "CPU changed [cpu %u action %lx]\n",
lustre-release/libcfs/libcfs/workitem.c:		CDEBUG(D_INFO, "%s is in progress of stopping\n",
lustre-release/libcfs/libcfs/workitem.c:			CDEBUG(is_power_of_2(++i / 20) ? D_WARNING : D_NET,
lustre-release/lustre/mdc/mdc_dev.c:		CDEBUG(D_CACHE, "object %p: [%lu -> %lu] %d pages were %s.\n",
lustre-release/lustre/mdc/mdc_dev.c:	CDEBUG(D_INODE, "rc %d, err %d\n", rc, errcode);
lustre-release/lustre/mdc/mdc_changelog.c:	CDEBUG(D_HSM, "%llu %02d%-5s %llu 0x%x t="DFID" p="DFID" %.*s\n",
lustre-release/lustre/mdc/mdc_reint.c:                CDEBUG(D_INFO, "error in handling %d\n", rc);
lustre-release/lustre/mdc/mdc_reint.c:		CDEBUG(D_INODE, "setting mtime %lld, ctime %lld\n",
lustre-release/lustre/mdc/mdc_reint.c:			CDEBUG(D_HA, "%s: resend:%d create on "DFID"/"DFID"\n",
lustre-release/lustre/mdc/mdc_reint.c:                        CDEBUG(D_HA, "resend cross eviction\n");
lustre-release/lustre/mdc/lproc_mdc.c:		CDEBUG(D_CONFIG, "activate %u: ignoring repeat request\n",
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_NET, "root fid="DFID", last_committed=%llu\n",
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_NET, "mode: %o\n", body->mbo_mode);
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_INFO, "%s: get xattr '%s' for "DFID"\n",
lustre-release/lustre/mdc/mdc_request.c:			CDEBUG(D_INFO, "OBD_MD_FLEASIZE set, should be a "
lustre-release/lustre/mdc/mdc_request.c:			CDEBUG(D_INFO, "OBD_MD_FLEASIZE set, "
lustre-release/lustre/mdc/mdc_request.c:			CDEBUG(D_INFO, "OBD_MD_FLDIREA set, should be a "
lustre-release/lustre/mdc/mdc_request.c:				CDEBUG(D_INFO, "OBD_MD_FLDIREA is set, "
lustre-release/lustre/mdc/mdc_request.c:					CDEBUG(D_INFO,
lustre-release/lustre/mdc/mdc_request.c:				CDEBUG(D_INFO,
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_HA, "updating handle from %#llx to %#llx\n",
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_INODE, "%s: "DFID" file closed with intent: %x\n",
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_HA, "couldn't find open req; expecting close error\n");
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_RPCTRACE, "request %p failed to send: rc = %d\n", req,
lustre-release/lustre/mdc/mdc_request.c:			CDEBUG(D_VFSTRACE, "offset %lx [%#llx %#llx],"
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_INODE, "read %d(%d) pages\n", rd_pgs, lu_pgs);
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_CACHE, "read %d/%d pages\n", rd_pgs, npages);
lustre-release/lustre/mdc/mdc_request.c:			CDEBUG(D_VFSTRACE, "page %lu add to page cache failed:"
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_INFO, "%s: read cache page: "DFID" at %llu: %ld\n",
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_CACHE, "blocks=%llu free=%llu avail=%llu "
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_IOCTL, "path get "DFID" from %llu #%d\n",
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_IOCTL, "path got "DFID" from %llu #%d: %s\n",
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_HSM, "CT start r%d w%d u%d g%d f%#x\n", lk->lk_rfd, lk->lk_wfd,
lustre-release/lustre/mdc/mdc_request.c:	CDEBUG(D_HSM, " Received message mg=%x t=%d m=%d l=%d actions=%d "
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_HA, "%s: recover copytool registration to MDT "
lustre-release/lustre/mdc/mdc_request.c:		CDEBUG(D_HA, "%s: recover copytool registration to MDT "
lustre-release/lustre/mdc/mdc_locks.c:		CDEBUG(D_SEC, "packed '%.*s' as security xattr name\n",
lustre-release/lustre/mdc/mdc_locks.c:		CDEBUG(D_INFO, "Increase repbuf by %d bytes, total: %d\n",
lustre-release/lustre/mdc/mdc_locks.c:	CDEBUG(D_INFO, "%s: get xattrs for "DFID"\n",
lustre-release/lustre/mdc/mdc_locks.c:		CDEBUG(D_SEC, "packed '%.*s' as security xattr name\n",
lustre-release/lustre/mdc/mdc_locks.c:		CDEBUG(D_INFO, "%s: layout return lvb %d transno %lld\n",
lustre-release/lustre/mdc/mdc_locks.c:		CDEBUG(D_INFO,
lustre-release/lustre/mdc/mdc_locks.c:			CDEBUG(D_HA, "%s: resend:%d op:%d "DFID"/"DFID"\n",
lustre-release/lustre/mdc/mdc_locks.c:			CDEBUG(D_HA, "resend cross eviction\n");
lustre-release/lustre/mdc/mdc_locks.c:	CDEBUG(D_DENTRY,"D_IT dentry %.*s intent: %s status %d disp %x rc %d\n",
lustre-release/lustre/mdc/mdc_locks.c:	CDEBUG(D_DLMTRACE, "(name: %.*s,"DFID") in obj "DFID
lustre-release/lustre/mdc/mdc_locks.c:	CDEBUG(D_DLMTRACE, "name: %.*s in inode "DFID", intent: %s flags %#llo\n",
lustre-release/lustre/mdc/mdc_lib.c:		CDEBUG(D_DENTRY, "%s: %s len %zd != %zd, concurrent rename?\n",
lustre-release/lustre/mdd/mdd_permission.c:	CDEBUG(D_SEC, "permission denied, mode %x, fsuid %u, uid %u\n",
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_INFO,
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_INFO, "seeing user at index %d/%d id=%d endrec=%llu"
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_INFO, "%s: seeing record at index %d/%d/%llu t=%x %.*s in log "
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_INFO, "%s: seeing user at index %d/%d id=%d endrec=%llu in "
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_IOCTL, "changelog starting index=%llu\n",
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_CONFIG, "connect #%d\n", mdd->mdd_connects);
lustre-release/lustre/mdd/mdd_device.c:        CDEBUG(D_IOCTL, "Registered changelog user %d\n", *id);
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_IOCTL, "%s: Purge request: id=%u\n",
lustre-release/lustre/mdd/mdd_device.c:			CDEBUG(D_IOCTL, "turning off changelogs\n");
lustre-release/lustre/mdd/mdd_device.c:		CDEBUG(D_IOCTL, "%s: Purging changelog entries for user %d "
lustre-release/lustre/mdd/mdd_device.c:		CDEBUG(D_IOCTL, "Request %llu out of range: %llu\n",
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_IOCTL, "Rewriting changelog user %u endrec to %llu\n",
lustre-release/lustre/mdd/mdd_device.c:	CDEBUG(D_IOCTL, "%s: Purge request: id=%u, endrec=%llu\n",
lustre-release/lustre/mdd/mdd_device.c:		CDEBUG(D_IOCTL, "%s: Could not clear changelog, requested "\
lustre-release/lustre/mdd/mdd_device.c:			CDEBUG(D_IOCTL, "%s: Purging changelog entries up "\
lustre-release/lustre/mdd/mdd_trans.c:	CDEBUG(D_HA, "%s: ChangeLog garbage collect thread start with PID %d\n",
lustre-release/lustre/mdd/mdd_trans.c:			CDEBUG(D_HA, "%s: a ChangeLog garbage collection "
lustre-release/lustre/mdd/mdd_object.c:				CDEBUG(D_INFO, "Filtered out "XATTR_NAME_LINK
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_INODE, "%s: no valid attribute on "DFID", previous"
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_INODE, "setting mtime %llu, ctime %llu\n",
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_LAYOUT, "cannot swap layouts with DOM component, "
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_LAYOUT, "cannot swap layout for "DFID": OST to DOM "
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_LAYOUT, "cannot swap layout for "DFID": new layout "
lustre-release/lustre/mdd/mdd_object.c:				CDEBUG(D_INFO,
lustre-release/lustre/mdd/mdd_object.c:	CDEBUG(D_INFO, DFID" eadata %p len %d\n", PFID(mdd_object_fid(child)),
lustre-release/lustre/mdd/mdd_object.c:			CDEBUG(D_HA, "Object "DFID" is retained in orphan "
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_HA, "Object "DFID" is deleted from orphan "
lustre-release/lustre/mdd/mdd_object.c:		CDEBUG(D_INODE, "readdir from dead object: "DFID"\n",
lustre-release/lustre/mdd/mdd_orphans.c:		CDEBUG(D_HA, "Found orphan "DFID", delete it\n", PFID(lf));
lustre-release/lustre/mdd/mdd_orphans.c:                        CDEBUG(D_HA, "Found orphan "DFID" count %d, skip it\n",
lustre-release/lustre/mdd/mdd_dir.c:		CDEBUG(D_INFO, "%s: Object "DFID" locates on remote server\n",
lustre-release/lustre/mdd/mdd_dir.c:				CDEBUG(D_HA, "Object "DFID" is inserted into "
lustre-release/lustre/mdd/mdd_dir.c:	CDEBUG(D_OTHER, "ea %p/%u, cr_flags %#llo, no_create %u\n",
lustre-release/lustre/mdd/mdd_dir.c:			CDEBUG(D_INFO, "%s: "DFID" is opened, count %d\n",
lustre-release/lustre/mdd/mdd_dir.c:	CDEBUG(D_INFO, "update "DFID"/"DNAME":"DFID"\n",
lustre-release/lustre/mdd/mdd_dir.c:		CDEBUG(D_INFO, DFID" doesn't exist\n", PFID(fid));
lustre-release/lustre/mdd/mdd_dir.c:		CDEBUG(D_INFO, DFID"/"DNAME"\n", PFID(&fid), PNAME(&lname));
lustre-release/lustre/mdd/mdd_dir.c:	CDEBUG(D_INFO, "update %s "DFID"/"DFID" to "DFID"/"DFID"\n",
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "log %s to resid %#llx/%#llx (%.8s)\n", name,
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_INFO, "log %s (%p) refs %d\n", cld->cld_logname, cld,
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_INFO, "log %s(%p) refs %d\n", cld->cld_logname, cld,
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_MGC, "dropping config log %s\n", cld->cld_logname);
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "do adding config log %s-%016lx\n", logname,
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "add config log %s-%016lx\n", logname,
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_INFO, "lockh %#llx\n", cld->cld_lockh.cookie);
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "end config log %s (%d)\n", logname ? logname : "client",
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_MGC, "updating log %s\n", cld->cld_logname);
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_MGC, "disconnecting, won't update log %s\n",
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "Starting requeue thread\n");
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "Ending requeue thread\n");
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_INFO, "log %s: requeue (r=%d sp=%d st=%x)\n",
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_INFO, "lockh %#llx\n", cld->cld_lockh.cookie);
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_MGC, "Lock res "DLDLMRES" (%.8s)\n",
lustre-release/lustre/mgc/mgc_request.c:			CDEBUG(D_INFO, "missing data, won't requeue\n");
lustre-release/lustre/mgc/mgc_request.c:			CDEBUG(D_MGC, "log %s: stopping, won't requeue\n",
lustre-release/lustre/mgc/mgc_request.c:			CDEBUG(D_MGC, "log %.8s: disconnecting, won't requeue\n",
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "Enqueue for %s (res %#llx)\n", cld->cld_logname,
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "register %s\n", mti->mti_svname);
lustre-release/lustre/mgc/mgc_request.c:                CDEBUG(D_MGC, "register %s got index = %d\n",
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_MGC, "InitRecov %s %d/d%d:i%d:r%d:or%d:%s\n",
lustre-release/lustre/mgc/mgc_request.c:                CDEBUG(D_MGC, "register_target %s %#x\n",
lustre-release/lustre/mgc/mgc_request.c:        CDEBUG(D_MGC, "import event %#x\n", event);
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_INFO, "%s: Reactivating import\n", obd->obd_name);
lustre-release/lustre/mgc/mgc_request.c:                        CDEBUG(D_INFO, "mgc %s: cannot find obdname %s\n",
lustre-release/lustre/mgc/mgc_request.c:                CDEBUG(D_INFO, "Find uuid %s by nid %s\n",
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_INFO, "ir apply logs %lld/%lld for %s -> %s\n",
lustre-release/lustre/mgc/mgc_request.c:                        CDEBUG(D_INFO, "process config for %s error %d\n",
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_INFO, "Latest version %lld, more %d.\n",
lustre-release/lustre/mgc/mgc_request.c:			CDEBUG(D_INFO, "nodemap config changed in transit, retrying\n");
lustre-release/lustre/mgc/mgc_request.c:			CDEBUG(D_MGC, "Failed to get MGS log %s, using local "
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "Process log %s-%016lx from %d\n", cld->cld_logname,
lustre-release/lustre/mgc/mgc_request.c:		CDEBUG(D_MGC, "Can't get cfg lock: %d\n", rcl);
lustre-release/lustre/mgc/mgc_request.c:	CDEBUG(D_MGC, "%s: configuration from log '%s' %sed (%d).\n",
lustre-release/lustre/mgc/mgc_request.c:                CDEBUG(D_MGC, "add_target %s %#x\n",
lustre-release/lustre/mgc/mgc_request.c:                CDEBUG(D_MGC, "parse_log %s from %d\n", logname,
lustre-release/lustre/mgc/mgc_request.c:				CDEBUG(D_MGC, "There is no params "
lustre-release/lustre/fld/fld_index.c:	CDEBUG(D_INFO, "%s: lookup seq = %#llx range : "DRANGE" rc = %d\n",
lustre-release/lustre/fld/fld_request.c:		CDEBUG(D_INFO, "%s: Found target (idx %llu) by seq %#llx\n",
lustre-release/lustre/fld/fld_request.c:	CDEBUG(D_INFO, "%s: Adding target %s (idx %llu)\n", fld->lcf_name,
lustre-release/lustre/fld/fld_request.c:		CDEBUG(D_INFO, "%s: Using \"%s\" hash\n",
lustre-release/lustre/fld/fld_request.c:	CDEBUG(D_INFO, "%s: Lookup fld entry (seq: %#llx) on target %s (idx %llu)\n",
lustre-release/lustre/fld/fld_cache.c:        CDEBUG(D_INFO, "%s: FLD cache - Size: %d, Threshold: %d\n",
lustre-release/lustre/fld/fld_cache.c:	CDEBUG(D_INFO, "FLD cache statistics (%s):\n", cache->fci_name);
lustre-release/lustre/fld/fld_cache.c:	CDEBUG(D_INFO, "  Cache reqs: %llu\n", cache->fci_stat.fst_cache);
lustre-release/lustre/fld/fld_cache.c:	CDEBUG(D_INFO, "  Total reqs: %llu\n", cache->fci_stat.fst_count);
lustre-release/lustre/fld/fld_cache.c:        CDEBUG(D_INFO, "%s: FLD cache - Shrunk by "
lustre-release/lustre/fld/fld_cache.c:	CDEBUG(D_INFO, "insert range "DRANGE"\n", PRANGE(&f_new->fce_range));
lustre-release/lustre/fld/fld_handler.c:	CDEBUG(D_INFO, "get index from %s\n", name);
lustre-release/lustre/fld/fld_handler.c:	CDEBUG(D_INFO, "%s: FLD req handle: error %d (range: "DRANGE")\n",
lustre-release/lustre/fld/lproc_fld.c:		CDEBUG(D_INFO, "%s: Changed hash to \"%s\"\n",
lustre-release/lustre/fld/lproc_fld.c:        CDEBUG(D_INFO, "%s: Lookup cache is flushed\n", fld->lcf_name);
lustre-release/lustre/osp/lproc_osp.c:		CDEBUG(D_CONFIG, "activate %u: ignoring repeat request\n",
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_INFO, "%s: Init last used fid "DFID"\n",
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_OTHER, "%s: %llu blocks, %llu free, %llu avail, "
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_OTHER, "%s: async updates %d\n", d->opd_obd->obd_name,
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_CACHE, "%s: processed %llu\n", d->opd_obd->obd_name,
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_CACHE, "%s: %u in flight\n", d->opd_obd->obd_name,
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_CACHE, "%s: done in %lld: rc = %d\n", d->opd_obd->obd_name,
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_HA, "%s: connect to %s (%s)\n", obd->obd_name, osdname, src);
lustre-release/lustre/osp/osp_dev.c:	CDEBUG(D_CONFIG, "connect #%d\n", osp->opd_connects);
lustre-release/lustre/osp/osp_dev.c:		CDEBUG(D_HA, "got disconnected\n");
lustre-release/lustre/osp/osp_dev.c:		CDEBUG(D_HA, "got inactive\n");
lustre-release/lustre/osp/osp_dev.c:		CDEBUG(D_HA, "got connected\n");
lustre-release/lustre/osp/lwp_dev.c:	CDEBUG(D_CONFIG, "connect #%d\n", lwp->lpd_connects);
lustre-release/lustre/osp/osp_object.c:		CDEBUG(D_INFO, "(1) set attr "DFID": rc = %d\n",
lustre-release/lustre/osp/osp_object.c:	CDEBUG(D_INODE, DFID" set xattr '%s' with size %zd\n",
lustre-release/lustre/osp/osp_object.c:	CDEBUG(D_HA, "Invalidate osp_object "DFID"\n",
lustre-release/lustre/osp/osp_object.c:	CDEBUG(D_INODE, "fid for osp_object %p is "DFID"\n", o, PFID(fid));
lustre-release/lustre/osp/osp_object.c:			CDEBUG(D_HA, "Writing gap "DFID"+%d in llog\n",
lustre-release/lustre/osp/osp_object.c:	CDEBUG(D_HA, "%s: Wrote last used FID: "DFID", index %d: %d\n",
lustre-release/lustre/osp/osp_object.c:			CDEBUG(D_INFO, "ooi_pos %d nr %d\n",
lustre-release/lustre/osp/osp_sync.c:		CDEBUG(D_OTHER, "%s: new record "DFID":%x.%u: rc = %d\n",
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_HA, "commit req %p, transno %llu\n", req, req->rq_transno);
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_HA, "reply req %p/%d, rc %d, transno %u\n", req,
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_OTHER, "%s: %d in flight, %d in progress\n",
lustre-release/lustre/osp/osp_sync.c:			CDEBUG(D_HA, "processed all old entries\n");
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_OTHER, "%s: %d in flight, %d in progress\n",
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_HA, "found record %x, %d, idx %u, id %u\n",
lustre-release/lustre/osp/osp_sync.c:			CDEBUG(D_OTHER, "%s: massive records cancel id "DFID\
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_OTHER, "%s: %d in flight, %d in progress, done %d\n",
lustre-release/lustre/osp/osp_sync.c:			CDEBUG(D_HA, "stop llog processing\n");
lustre-release/lustre/osp/osp_sync.c:				CDEBUG(D_HA, "%u changes, %u in progress,"
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_INFO, "%s: Init llog for %d - catid "DFID":%x\n",
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_HA, "%s: %llu committed\n", d->opd_obd->obd_name,
lustre-release/lustre/osp/osp_sync.c:	CDEBUG(D_HA, "%s: add commit cb at %lluns, next at %lluns, rc = %d\n",
lustre-release/lustre/osp/osp_sync.c:		CDEBUG(D_OTHER, "%s: sync forced, %d changes\n",
lustre-release/lustre/osp/osp_trans.c:		CDEBUG(mask, "i = %u fid = "DFID" op = %s "
lustre-release/lustre/osp/osp_trans.c:	CDEBUG(mask, "updates = %p magic = %x count = %d size = %zu\n", ourq,
lustre-release/lustre/osp/osp_trans.c:	CDEBUG(D_OTHER, "total %d in %u\n", total, our->our_update_nr);
lustre-release/lustre/osp/osp_trans.c:	CDEBUG(D_HA, "trans no %llu committed transno %llu\n",
lustre-release/lustre/osp/osp_trans.c:	CDEBUG(D_INFO, "%s: version %llu gen %llu oth:version %p:%llu\n",
lustre-release/lustre/osp/osp_trans.c:		CDEBUG(D_HA, "ou %p version %llu rpc_version %llu\n",
lustre-release/lustre/osp/osp_trans.c:		CDEBUG(D_HA, "%s invalidate our %p\n", osp->opd_obd->obd_name,
lustre-release/lustre/osp/osp_trans.c:	CDEBUG(D_HA, "%s: add oth %p with version %llu\n",
lustre-release/lustre/osp/osp_md_object.c:	CDEBUG(D_INFO, "write "DFID" offset = %llu length = %zu\n",
lustre-release/lustre/osp/osp_md_object.c:	CDEBUG(D_INFO, "%s "DFID" read offset %llu size %zu\n",
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_CACHE, "updated statfs %p\n", d);
lustre-release/lustre/osp/osp_precreate.c:		CDEBUG(D_CACHE, "%s: couldn't update statfs: rc = %d\n",
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_CACHE, "going to update statfs\n");
lustre-release/lustre/osp/osp_precreate.c:			CDEBUG(D_OTHER, "%s: sync forced, %d changes\n",
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_INFO, "Expect %d, actual %d ["DFID" -- "DFID"]\n",
lustre-release/lustre/osp/osp_precreate.c:		CDEBUG(D_INFO, "%s: don't send new precreate: rc = %d\n",
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_HA, "%s: current precreated pool: "DFID"-"DFID"\n",
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_HA, "%s: Got last_fid "DFID"\n", d->opd_obd->obd_name,
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_HA, "%s: going to cleanup orphans since "DFID"\n",
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_HA, "%s: Got last_id "DFID" from OST, last_created "DFID
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_INFO,
lustre-release/lustre/osp/osp_precreate.c:			CDEBUG(D_INFO, "%s: full: state=%x: rc = %x\n",
lustre-release/lustre/osp/osp_precreate.c:		CDEBUG(D_INFO, "uncommitted changes=%u in_progress=%u\n",
lustre-release/lustre/osp/osp_precreate.c:		CDEBUG(D_INFO,
lustre-release/lustre/osp/osp_precreate.c:			CDEBUG(D_HA,
lustre-release/lustre/osp/osp_precreate.c:			CDEBUG(D_HA, "returning -EINPROGRESS instead of "
lustre-release/lustre/osp/osp_precreate.c:	CDEBUG(D_OTHER, "current %lldns, fresh till %lldns\n",
lustre-release/lustre/osd-zfs/osd_object.c:		CDEBUG(D_INODE, "%s: set blksize as %u for "DFID"\n",
lustre-release/lustre/osd-zfs/osd_object.c:		CDEBUG(D_INFO, "%s: set orphan flag on "DFID" (%llx/%x)\n",
lustre-release/lustre/osd-zfs/osd_object.c:		CDEBUG(D_QUOTA, "%s: enforce quota on UID %u, GID %u,"
lustre-release/lustre/osd-zfs/osd_xattr.c:	CDEBUG(D_INODE, "Setting xattr %s with size %d\n",
lustre-release/lustre/osd-zfs/osd_index.c:		CDEBUG(D_LFSCK | D_CONSOLE | D_WARNING,
lustre-release/lustre/osd-zfs/osd_index.c:	CDEBUG(D_LFSCK, "%s: Updated (%s) remote entry for "DFID": rc = %d\n",
lustre-release/lustre/osd-zfs/osd_index.c:			CDEBUG(D_LFSCK, "%s: index object "DFID
lustre-release/lustre/osd-zfs/osd_quota.c:		CDEBUG(D_QUOTA, "%s: miss accounting obj for %s\n",
lustre-release/lustre/osd-zfs/osd_quota.c:		CDEBUG(D_QUOTA, "%s: id %s not found in DMU accounting ZAP\n",
lustre-release/lustre/osd-zfs/osd_quota.c:			CDEBUG(D_QUOTA,
lustre-release/lustre/osd-zfs/osd_quota.c:		CDEBUG(D_QUOTA, "%s: Not found in DMU accounting ZAP\n",
lustre-release/lustre/osd-zfs/osd_quota.c:		CDEBUG(D_QUOTA, "%s: id %s not found in accounting ZAP\n",
lustre-release/lustre/osd-zfs/osd_io.c:	CDEBUG(D_QUOTA, "writing %d pages, reserving %lldK of quota space\n",
lustre-release/lustre/osd-zfs/osd_io.c:		CDEBUG(D_QUOTA, "retry after sync\n");
lustre-release/lustre/osd-zfs/osd_io.c:			CDEBUG(D_INODE, "object "DFID": change block size"
lustre-release/lustre/osd-zfs/osd_io.c:		CDEBUG(D_INODE, "write %u bytes at %u\n",
lustre-release/lustre/osd-zfs/osd_io.c:			CDEBUG(D_INODE, "obj "DFID": skipping lnb[%u]: rc=%d\n",
lustre-release/lustre/osd-zfs/osd_handler.c:		CDEBUG(D_OTHER, "%s: transaction is aborted\n", osd->od_svname);
lustre-release/lustre/osd-zfs/osd_handler.c:		CDEBUG(D_OTHER, "%s: transaction hook failed: rc = %d\n",
lustre-release/lustre/osd-zfs/osd_handler.c:		CDEBUG(D_CACHE, "syncing OSD %s\n", LUSTRE_OSD_ZFS_NAME);
lustre-release/lustre/osd-zfs/osd_handler.c:		CDEBUG(D_CACHE, "synced OSD %s\n", LUSTRE_OSD_ZFS_NAME);
lustre-release/lustre/osd-zfs/osd_handler.c:	CDEBUG(D_CONFIG, "connect #%d\n", osd->od_connects);
lustre-release/lustre/osd-zfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: refresh OI map for scrub, op %d, force %s, "
lustre-release/lustre/osd-zfs/osd_scrub.c:			CDEBUG(D_LFSCK, "%s: the FID "DFID" is used by "
lustre-release/lustre/osd-zfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub prep, flags = 0x%x\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub post with result = %d\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to checkpoint, pos = %llu: "
lustre-release/lustre/osd-zfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: OI scrub fail to init env: rc = %d\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: OI scrub fail to scrub prep: rc = %d\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub start, flags = 0x%x, pos = %llu\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub: stop, pos = %llu: rc = %d\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: registered index "DFID" (%u/%u)\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:	CDEBUG(D_WARNING, "%s: restore index '%s' with "DFID": rc = %d\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:			CDEBUG(D_LFSCK, "%s: %llu has no FID-in-LMA, skip it\n",
lustre-release/lustre/osd-zfs/osd_scrub.c:			CDEBUG(D_LFSCK, "%s: initial OI scrub handled %s under "
lustre-release/lustre/osd-zfs/osd_scrub.c:			CDEBUG(D_LFSCK,
lustre-release/lustre/osd-zfs/osd_oi.c:	CDEBUG(D_INODE, "%s: FID "DFID" not in the id map cache\n",
lustre-release/lustre/osd-zfs/osd_oi.c:	CDEBUG(D_INODE, "%s: FID "DFID" not in the id map cache\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_CONFIG, "destroying %d ltd desc\n",
lustre-release/lustre/lod/lod_lov.c:	CDEBUG(D_CONFIG, "osp:%s idx:%d gen:%d\n", osp, index, gen);
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_OTHER, "%s: Set 'mds' portal and timeout\n",
lustre-release/lustre/lod/lod_lov.c:	CDEBUG(D_CONFIG, "osp:%s idx:%d gen:%d\n", osp, idx, gen);
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_INFO, "EA store size %d is not enough, need %d\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_INFO, "default striping component size %d is not "
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "buf len %zu too small for lov_user_md\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "bad userland LOV MAGIC: %#x\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "bad userland stripe pattern: %#x\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "stripe size %u not a multiple of %u\n",
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT, "stripe offset %u >= bitmap size %u\n",
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT, "stripe offset %u not in bitmap\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "invalid buf len %zu/%zu for lov_user_md with "
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "stripe count %u > # OSTs %u in the pool\n",
lustre-release/lustre/lod/lod_lov.c:	CDEBUG(D_LAYOUT, "DoM component size %u was bigger than MDT limit %u, "
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "invalid buf len %zu\n", buf->lb_len);
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "buf len %zu too small for lov_user_md\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "bad userland LOV MAGIC: %#x\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "buf len %zu is less than %u\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_LAYOUT, "entry count is zero\n");
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT, "invalid extent "DEXT"\n",
lustre-release/lustre/lod/lod_lov.c:				CDEBUG(D_LAYOUT, "invalid id %u\n",
lustre-release/lustre/lod/lod_lov.c:					CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:				CDEBUG(D_LAYOUT, "invalid DoM component "
lustre-release/lustre/lod/lod_lov.c:				CDEBUG(D_LAYOUT, "invalid DoM layout "
lustre-release/lustre/lod/lod_lov.c:				CDEBUG(D_LAYOUT, "DoM component size "
lustre-release/lustre/lod/lod_lov.c:				CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:					CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_LAYOUT, "stripe size isn't aligned, "
lustre-release/lustre/lod/lod_lov.c:			CDEBUG(D_OTHER, "%s: Swabbing lov desc %p\n",
lustre-release/lustre/lod/lod_lov.c:		CDEBUG(D_INFO, "delete pool %p\n", pool);
lustre-release/lustre/lod/lod_qos.c:#define QOS_DEBUG(fmt, ...)     CDEBUG(D_QOS, fmt, ## __VA_ARGS__)
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_CONFIG, "%s: turns inactive\n",
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_CONFIG, "%s: turns active\n",
lustre-release/lustre/lod/lod_qos.c:		CDEBUG(D_OTHER, "can't declare creation on #%u: %d\n",
lustre-release/lustre/lod/lod_qos.c:		CDEBUG(D_OTHER, "can't declare new object on #%u: %d\n",
lustre-release/lustre/lod/lod_qos.c:		CDEBUG(D_OTHER,
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_OTHER,
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_OTHER, "can't declare new object on #%u: %d\n",
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_LAYOUT, "Invalid magic %x\n", magic);
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_LAYOUT, "%s: invalid pattern: %x\n",
lustre-release/lustre/lod/lod_qos.c:			CDEBUG(D_LAYOUT, "%s: invalid stripe count: %u\n",
lustre-release/lustre/lod/lod_qos.c:				CDEBUG(D_LAYOUT, "%s: invalid offset, %u\n",
lustre-release/lustre/lod/lod_qos.c:		CDEBUG(D_OTHER, "tgt_count %d stripe_count %d\n",
lustre-release/lustre/lod/lod_sub_object.c:	CDEBUG(D_INFO, "%s: init llog for index %d - catid "DFID":%x\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(lod->lod_lmv_failout ? D_ERROR : D_INFO,
lustre-release/lustre/lod/lod_object.c:				CDEBUG(lod->lod_lmv_failout ? D_ERROR : D_INFO,
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, DFID": %s to set component %x to version: %u\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": set layout version: %u, comp_idx: %d\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_INFO, "try idx %d, mdt cnt %u, allocated %u\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_INFO, "%s: require stripes %u only get %d\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_INFO, "Get idx %d, for stripe %d "DFID"\n",
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_INFO, "lum magic = %x count = %u offset = %d\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: operation (%s) not supported.\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: entry count is zero.\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: requested component(s) not found.\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: invalid component id %#x, flags %#x\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: specified both id and flags.\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: no id or flags specified.\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "%s: this deletion will create "
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: requested component id:%#x not found\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: invalid xattr name: %s\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: object "DFID" isn't a composite file.\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "%s: unsupported xattr name:%s\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_INFO,
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, "repeating component %d\n", index);
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "deleting comp %d, left %d\n", i,
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID" stripe_count=%d stripe_size=%d stripe_offset=%d append_stripes=%d\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "Inherit from default: flags=%#x "
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "striping from default dir: count:%hu, "
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_INFO, "no default striping for foreign dir\n");
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_INFO,
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_INFO, "final dir stripe [%hu %d %u]\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_INFO, "%lld "DEXT"\n", size, PEXT(extent));
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_INFO, DFID" delete stripe %s "DFID"\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "ost %d no longer present\n", index);
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "statfs failed for ost %d, error %d\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "ost %d is not availble for SEL "
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "ost %d lowwm: %d highwm: %d, "
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "low space on ost %d, available %llu "
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "new component end is not aligned "
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, "prev start %llu, extension start %llu, extension end"
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "Previous component not inited\n");
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "new end %llu\n", new_end);
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "Extension component exhausted\n");
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, "After extent updates: prev start %llu, current start "
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, "extent->e_start %llu, extent->e_end %llu\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG_LIMIT(replay ? D_ERROR : D_LAYOUT,
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, "%s: "DFID": update components "DEXT"\n",
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, "primary mirror %d, "DEXT"\n", primary, PEXT(extent));
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, "primary comp %u "DEXT"\n",
lustre-release/lustre/lod/lod_object.c:				CDEBUG(D_LAYOUT, "stale: %u / %u\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID ": mirror %d OST%d unavail, rc = %d\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, DFID": mirror %d stale\n",
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT,
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "resync instantiate %d / %d\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": trying to write :"DEXT"\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": picked mirror id %u as primary\n",
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, DFID": found primary %u\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": intent to write: "DEXT"\n",
lustre-release/lustre/lod/lod_object.c:			CDEBUG(D_LAYOUT, "write instantiate %d / %d\n",
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, DFID ": received op %d in sync pending\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": cocurrent write to sync pending\n",
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": lcme id %u (%d / %zd) not exist "
lustre-release/lustre/lod/lod_object.c:		CDEBUG(D_LAYOUT, DFID": no mirror in sync\n",
lustre-release/lustre/lod/lod_object.c:	CDEBUG(D_LAYOUT, DFID": synced %u resynced %u/%zu components\n",
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_INFO, "%s: got tgt %x for sequence: %#llx\n",
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_HA, "%s: process recovery updates "DFID".%u\n",
lustre-release/lustre/lod/lod_dev.c:			CDEBUG(D_HA, "%s get update log failed %d, retry\n",
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_HA, "%s retrieved update log, duration %lld, retries %d\n",
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_HA, "%s got update logs from all MDTs.\n",
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_INFO, "%s: finish sub llog\n", obd->obd_name);
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_INFO, "%s init sub log %s\n", lod2obd(lod)->obd_name,
lustre-release/lustre/lod/lod_dev.c:			CDEBUG(D_HA, "%s: can't process %u: %d\n",
lustre-release/lustre/lod/lod_dev.c:	CDEBUG(D_CONFIG, "connect #%d\n", lod->lod_connects);
lustre-release/lustre/lod/lod_dev.c:				CDEBUG(D_INFO, "%s: %s is not ready.\n",
lustre-release/lustre/lod/lod_dev.c:				CDEBUG(D_INFO, "%s: %s is not ready.\n",
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_INFO, "pool %p\n", pool);
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_INFO, "pool %p\n", pool);
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_INFO, "pool %p\n", pool);
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(level, "pool "LOV_POOLNAMEF" has %d members\n",
lustre-release/lustre/lod/lod_pool.c:		CDEBUG(level, "pool "LOV_POOLNAMEF"[%d] = %s\n",
lustre-release/lustre/lod/lod_pool.c:		CDEBUG(D_CONFIG, "%s: cannot add proc entry "LOV_POOLNAMEF"\n",
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_INFO, "pool %p - proc %p\n", new_pool,
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_CONFIG, LOV_POOLNAMEF" is pool #%d\n",
lustre-release/lustre/lod/lod_pool.c:		CDEBUG(D_INFO, "proc entry %p\n", pool->pool_proc_entry);
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_CONFIG, "Added %s to "LOV_POOLNAMEF" as member %d\n",
lustre-release/lustre/lod/lod_pool.c:	CDEBUG(D_CONFIG, "%s removed from "LOV_POOLNAMEF"\n", ostname,
lustre-release/lustre/lod/lod_pool.c:			CDEBUG(D_CONFIG, "%s: request for an unknown pool ("
lustre-release/lustre/lod/lod_pool.c:			CDEBUG(D_CONFIG, "%s: request for an empty pool ("
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, DFID"@%p[%d:%d] -> "DFID"@%p: ostid: "DOSTID
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, "FLD lookup got mds #%x for fid="DFID"\n",
lustre-release/lustre/lov/lov_object.c:		CDEBUG(D_INODE, DFID
lustre-release/lustre/lov/lov_object.c:		CDEBUG(D_INODE, DFID
lustre-release/lustre/lov/lov_object.c:		CDEBUG(D_INODE, "COMP ID #%i: s=%llu m=%llu a=%llu c=%llu "
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, "To take share lov(%p) owner %p/%p\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, "To release share lov(%p) owner %p/%p\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, "Took exclusive lov(%p) owner %p\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, "To release exclusive lov(%p) owner %p\n",
lustre-release/lustre/lov/lov_object.c:		CDEBUG(D_INODE, "file:"DFID" wait for active IO, now: %d.\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, DFID" from %s to %s\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, DFID "Apply new layout lov %p, type %d\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, DFID" lo_layout_invalid=%d\n",
lustre-release/lustre/lov/lov_object.c:	CDEBUG(D_INODE, DFID "io %p type %d ignore/verify layout %d/%d\n",
lustre-release/lustre/lov/lov_object.c:		CDEBUG(D_INODE, "lsm %p addref %d/%d by %p.\n",
lustre-release/lustre/lov/lov_obd.c:		CDEBUG(D_CONFIG, "destroying %d lov targets\n",
lustre-release/lustre/lov/lov_obd.c:		CDEBUG(D_CONFIG, "%s: not connecting - administratively disabled\n",
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_CONFIG, "Connected tgt idx %d %s (%s) %sactive\n", index,
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_CONFIG, "connect #%d\n", lov->lov_connects);
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_CONFIG, "%s: disconnecting target %s\n",
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_INFO, "Searching in lov %p for uuid %s event(%d)\n",
lustre-release/lustre/lov/lov_obd.c:                        CDEBUG(D_INFO, "OSC %s already %sactivate!\n",
lustre-release/lustre/lov/lov_obd.c:                        CDEBUG(D_CONFIG, "%sactivate OSC %s\n",
lustre-release/lustre/lov/lov_obd.c:                        CDEBUG(D_INFO, "OSC %s already %sactive!\n",
lustre-release/lustre/lov/lov_obd.c:                        CDEBUG(D_CONFIG, "Marking OSC %s %sactive\n",
lustre-release/lustre/lov/lov_obd.c:		CDEBUG(D_INFO, "%s: lov idx %d conn %llx\n", obd_uuid2str(uuid),
lustre-release/lustre/lov/lov_obd.c:	CDEBUG(D_CONFIG, "uuid:%s idx:%u gen:%d active:%d\n",
lustre-release/lustre/lov/lov_obd.c:                CDEBUG(D_CONFIG, "tgts: %p size: %d\n",
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_CONFIG, "idx=%d ltd_gen=%d ld_tgt_count=%d\n",
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_CONFIG, "uuid: %s idx: %d gen: %d exp: %p active: %d\n",
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_CONFIG, "Removing tgt %s : %s\n",
lustre-release/lustre/lov/lov_obd.c:                            CDEBUG(D_OTHER, "%s: Swabbing lov desc %p\n",
lustre-release/lustre/lov/lov_obd.c:                CDEBUG(D_INFO, "delete pool %p\n", pool);
lustre-release/lustre/lov/lov_obd.c:                                        CDEBUG(err == -ENOTTY ?
lustre-release/lustre/lov/lov_obd.c:                                CDEBUG(D_HA, "ost %d is inactive\n", i);
lustre-release/lustre/lov/lov_obd.c:        CDEBUG(D_INFO, "Lustre LOV module (%p).\n", &lov_caches);
lustre-release/lustre/lov/lov_io.c:	CDEBUG(D_VFSTRACE, DFID "there are %zd components to be staled to "
lustre-release/lustre/lov/lov_io.c:		CDEBUG(D_LAYOUT, "designated I/O mirror state: %d\n",
lustre-release/lustre/lov/lov_io.c:		CDEBUG(D_VFSTRACE, DFID " need write intent for [%llu, %llu)\n",
lustre-release/lustre/lov/lov_io.c:	CDEBUG(D_VFSTRACE, DFID ": flr state: %d, move mirror from %d to %d, "
lustre-release/lustre/lov/lov_io.c:	CDEBUG(D_VFSTRACE, "use %sdelayed RPC state for this IO\n",
lustre-release/lustre/lov/lov_io.c:		CDEBUG(D_VFSTRACE, "component[%d] flags %#x\n",
lustre-release/lustre/lov/lov_io.c:			CDEBUG(D_VFSTRACE, "shrink: %d [%llu, %llu)\n",
lustre-release/lustre/lov/lov_io.c:	CDEBUG(D_VFSTRACE,
lustre-release/lustre/lov/lov_io.c:	CDEBUG(D_READA, DFID " cra_end = %lu, stripes = %d, rc = %d\n",
lustre-release/lustre/lov/lov_io.c:	CDEBUG(D_READA, DFID " max_index = %lu, pps = %u, index = %d, "
lustre-release/lustre/lov/lov_merge.c:	CDEBUG(D_INODE, "MDT ID "DOSTID" initial value: s=%llu m=%llu"
lustre-release/lustre/lov/lov_merge.c:		CDEBUG(D_INODE, "MDT ID "DOSTID" on OST[%u]: s=%llu m=%llu"
lustre-release/lustre/lov/lov_ea.c:	CDEBUG_LIMIT(level,
lustre-release/lustre/lov/lov_ea.c:		CDEBUG_LIMIT(level,
lustre-release/lustre/lov/lov_ea.c:		CDEBUG(level, DEXT ": id: %u, flags: %x, "
lustre-release/lustre/lov/lov_ea.c:			CDEBUG(level, "   oinfo:%p: ostid: "DOSTID
lustre-release/lustre/lov/lov_pool.c:	CDEBUG(D_INFO, "pool %p\n", pool);
lustre-release/lustre/lov/lov_pool.c:	CDEBUG(D_INFO, "pool %p\n", pool);
lustre-release/lustre/lov/lov_pool.c:	CDEBUG(D_INFO, "pool %p\n", pool);
lustre-release/lustre/lov/lov_pool.c:        CDEBUG(level, "pool "LOV_POOLNAMEF" has %d members\n",
lustre-release/lustre/lov/lov_pool.c:                CDEBUG(level, "pool "LOV_POOLNAMEF"[%d] = %s\n",
lustre-release/lustre/lov/lov_pool.c:	CDEBUG(D_INFO, "pool %p - proc %p\n",
lustre-release/lustre/lov/lov_pool.c:        CDEBUG(D_CONFIG, LOV_POOLNAMEF" is pool #%d\n",
lustre-release/lustre/lov/lov_pool.c:                CDEBUG(D_INFO, "proc entry %p\n", pool->pool_proc_entry);
lustre-release/lustre/lov/lov_pool.c:        CDEBUG(D_CONFIG, "Added %s to "LOV_POOLNAMEF" as member %d\n",
lustre-release/lustre/lov/lov_pool.c:        CDEBUG(D_CONFIG, "%s removed from "LOV_POOLNAMEF"\n", ostname,
lustre-release/lustre/lov/lov_pack.c:	CDEBUG_LIMIT(level, "objid "DOSTID", magic 0x%08x, pattern %#x\n",
lustre-release/lustre/lov/lov_pack.c:	CDEBUG_LIMIT(level, "stripe_size %u, stripe_count %u, layout_gen %u\n",
lustre-release/lustre/lov/lov_pack.c:		CDEBUG_LIMIT(level,
lustre-release/lustre/lov/lov_pack.c:		CDEBUG_LIMIT(level, "stripe %u idx %u subobj "DOSTID"\n", i,
lustre-release/lustre/lov/lov_pack.c:	CDEBUG_LIMIT(level, "pool_name "LOV_POOLNAMEF"\n", lmm->lmm_pool_name);
lustre-release/lustre/lov/lov_pack.c:		CDEBUG_LIMIT(level, "unrecognized lmm_magic %x, assuming %x\n",
lustre-release/lustre/lov/lov_page.c:	CDEBUG(D_PAGE, DFID" has no data\n", PFID(lu_object_fid(&obj->co_lu)));
lustre-release/lustre/lov/lov_offset.c:	CDEBUG(D_INODE, "[%lld->%lld] -> [(%d) %lld->%lld (%d)]\n",
lustre-release/lustre/lov/lov_request.c:			CDEBUG(D_HA, "lov idx %d inactive\n", i);
lustre-release/lustre/lov/lov_request.c:			CDEBUG(D_HA, "lov idx %d administratively disabled\n",
lustre-release/lustre/lov/lov_request.c:			CDEBUG(D_HA, "lov idx %d inactive\n", i);
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_resource.c:			CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_resource.c:			CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_INFO, "NULL ns, skipping cleanup\n");
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_DLMTRACE, "dlm namespace %s free done waiting\n",
lustre-release/lustre/ldlm/ldlm_resource.c:	CDEBUG(D_INFO, "getref res: %p count: %d\n", res,
lustre-release/lustre/ldlm/ldlm_resource.c:	CDEBUG(D_INFO, "putref res: %p count: %d\n",
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_OTHER, "Lock destroyed, not adding to resource\n");
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(D_OTHER, "Lock destroyed, not adding to resource\n");
lustre-release/lustre/ldlm/ldlm_resource.c:	CDEBUG(level, "--- Namespace: %s (rc: %d, side: %s)\n",
lustre-release/lustre/ldlm/ldlm_resource.c:	CDEBUG(level, "--- Resource: "DLDLMRES" (%p) refcount = %d\n",
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(level, "Granted locks (in reverse order):\n");
lustre-release/lustre/ldlm/ldlm_resource.c:				CDEBUG(level,
lustre-release/lustre/ldlm/ldlm_resource.c:		CDEBUG(level, "Waiting locks:\n");
lustre-release/lustre/ldlm/ldlm_extent.c:                        CDEBUG(D_INFO, 
lustre-release/lustre/ldlm/ldlm_extent.c:	CDEBUG(D_DLMTRACE, "contended locks = %d\n", contended_locks);
lustre-release/lustre/ldlm/ldlm_extent.c:		CDEBUG(D_DLMTRACE, "Failed to get resource for resid %llu/%llu\n",
lustre-release/lustre/ldlm/ldlm_extent.c:				CDEBUG(D_ERROR, "granting conflicting lock %p "
lustre-release/lustre/ldlm/ldlm_pool.c:		CDEBUG(D_DLMTRACE, "%s: Negative interval(%lld), too short period(%lld)\n",
lustre-release/lustre/ldlm/ldlm_pool.c:			CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_pool.c:	CDEBUG(D_DLMTRACE, "Lock pool %s is initialized\n", pl->pl_name);
lustre-release/lustre/ldlm/ldlm_lock.c:		CDEBUG(D_INFO, "lock export failed: lock %p, exp %p\n",
lustre-release/lustre/ldlm/ldlm_lock.c:		CDEBUG(D_INFO, "lock already destroyed: lock %p\n", lock);
lustre-release/lustre/ldlm/ldlm_lock.c:                CDEBUG(D_OTHER, "Lock destroyed, not adding to resource\n");
lustre-release/lustre/ldlm/ldlm_lock.c:                CDEBUG(D_INFO, "Reprocessing lock %p\n", pending);
lustre-release/lustre/ldlm/ldlm_lock.c:		CDEBUG(D_INFO, "Export %p, %d locks cancelled.\n",
lustre-release/lustre/ldlm/ldlm_lock.c:	CDEBUG(D_DLMTRACE, "Export %p, canceled %d locks, "
lustre-release/lustre/ldlm/ldlm_lock.c:	CDEBUG(D_DLMTRACE, "Export %p, canceled %d locks, "
lustre-release/lustre/ldlm/ldlm_flock.c:	CDEBUG(D_INFO, "reprocess deadlock req=%p\n", lock);
lustre-release/lustre/ldlm/ldlm_flock.c:	CDEBUG(D_DLMTRACE, "flags %#llx owner %llu pid %u mode %u start "
lustre-release/lustre/ldlm/ldlm_flock.c:	CDEBUG(D_DLMTRACE, "flags: %#llx data: %p getlk: %p\n",
lustre-release/lustre/ldlm/ldlm_reclaim.c:	CDEBUG(D_DLMTRACE, "NS(%s): %d locks to be reclaimed, found %d/%d "
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "Nothing to do\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "can't find connection %s\n", uuid->uuid);
lustre-release/lustre/ldlm/ldlm_lib.c:			CDEBUG(D_HA, "imp %p@%s: found existing conn %s%s\n",
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "imp %p@%s: add connection %s at %s\n",
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "imp %p@%s: remove connection %s\n",
lustre-release/lustre/ldlm/ldlm_lib.c:			CDEBUG(D_HA, "marking %s %s->%s as inactive\n",
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_INFO, "disconnect %s - %zu\n", obd->obd_name,
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_INFO,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "%s: connection from %s@%s %st%llu exp %p cur %lld last %lld\n",
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "%s: cancel recovery timer\n", obd->obd_name);
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "%s: recovery timer will expire in %ld seconds\n",
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for aborted recovery\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for expired recovery\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for duplicate req (%llu)\n",
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for next (%lld)\n", next_transno);
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for completed recovery\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for next lock\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for completed lock replay\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for aborted recovery\n");
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "waking for expired recovery\n");
lustre-release/lustre/ldlm/ldlm_lib.c:			CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "Waiting for lock\n");
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:			CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "Waiting for transno %lld\n",
lustre-release/lustre/ldlm/ldlm_lib.c:				CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "%s: started recovery thread pid %d\n", obd->obd_name,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_INFO, "1: request replay stage - %d clients from t%llu\n",
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_INFO, "2: lock replay stage - %d clients\n",
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_INFO, "3: final stage - process recovery completion pings\n");
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_INFO, "4: recovery completed in %lus - %d/%d reqs/locks\n",
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA, "RECOVERY: service %s, %d recoverable clients, "
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_HA,
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_INFO, "last_committed %llu, transno %llu, xid %llu\n",
lustre-release/lustre/ldlm/ldlm_lib.c:	CDEBUG(D_NET, "rs transno = %llu, last committed = %llu\n",
lustre-release/lustre/ldlm/ldlm_lib.c:		CDEBUG(D_HA, "Schedule reply immediately\n");
lustre-release/lustre/ldlm/ldlm_inodebits.c:	CDEBUG(D_DLMTRACE, "--- Reprocess resource "DLDLMRES" (%p)\n",
lustre-release/lustre/ldlm/ldlm_request.c:	CDEBUG(D_INFO, "local: %p, remote cookie: %#llx, flags: %#llx\n",
lustre-release/lustre/ldlm/ldlm_request.c:			CDEBUG(D_INFO,
lustre-release/lustre/ldlm/ldlm_request.c:			CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_request.c:	CDEBUG(D_DLMTRACE, "%d locks packed\n", packed);
lustre-release/lustre/ldlm/ldlm_request.c:			CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_request.c:			CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_request.c:			CDEBUG_LIMIT(rc == -ESHUTDOWN ? D_DLMTRACE : D_ERROR,
lustre-release/lustre/ldlm/ldlm_request.c:			CDEBUG_LIMIT(res == -ESHUTDOWN ? D_DLMTRACE : D_ERROR,
lustre-release/lustre/ldlm/ldlm_request.c:		CDEBUG(D_INFO, "No resource %llu\n", res_id->name[0]);
lustre-release/lustre/ldlm/ldlm_request.c:	CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_request.c:	CDEBUG(D_DLMTRACE, "Canceled %d unused locks from namespace %s\n",
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_DLMTRACE, "Client lock %p : no-op\n", lock);
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_INFO, "bad request buffer for cancel\n");
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_INODE, "blocking ast\n");
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_INODE, "completion ast\n");
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_INODE, "glimpse ast\n");
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_INODE, "cancel\n");
lustre-release/lustre/ldlm/ldlm_lockd.c:		CDEBUG(D_INODE, "convert\n");
lustre-release/lustre/ldlm/ldlm_lockd.c:			CDEBUG(D_INFO, "bad request buffer for cancel\n");
lustre-release/lustre/osc/osc_quota.c:			CDEBUG(D_QUOTA, "chkdq found noquota for %s %d\n",
lustre-release/lustre/osc/osc_quota.c:			CDEBUG(D_QUOTA, "%s: setdq to insert for %s %d (%d)\n",
lustre-release/lustre/osc/osc_quota.c:			CDEBUG(D_QUOTA, "%s: setdq to remove for %s %d (%p)\n",
lustre-release/lustre/osc/osc_cache.c:	__CDEBUG_WITH_LOC(file, func, line, mask, &cdls,		      \
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(mask, "Dump object %p extents at %s:%d, mppr: %u.\n",
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(D_CACHE, "obj %p ready %d|%c|%c wr %d|%c|%c rd %d|%c " STR,     \
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(mask, "%s: grant { dirty: %ld/%ld dirty_pages: %ld/%lu "	\
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(D_CACHE, "using %lu grant credits for brw %p page %p\n",
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(D_CACHE, "lost %u grant: %lu avail: %lu dirty: %lu/%lu\n",
lustre-release/lustre/osc/osc_cache.c:		CDEBUG(D_CACHE, "%s: sleeping for cache space @ %p for %p\n",
lustre-release/lustre/osc/osc_cache.c:		CDEBUG(D_CACHE, "%s: event for cache space @ %p never arrived "
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "wake up %p for oap %p, avail grant "
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "invalid import forcing RPC\n");
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "high prio request forcing RPC\n");
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "urgent request forcing RPC\n");
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "cache waiters forcing RPC\n");
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "full extent ready, make an RPC\n");
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "invalid import forcing RPC\n");
lustre-release/lustre/osc/osc_cache.c:			CDEBUG(D_CACHE, "Do not permit different types of IO "
lustre-release/lustre/osc/osc_cache.c:		CDEBUG(D_CACHE, "Queue writeback work for client %p.\n", cli);
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(D_INFO, "oap %p page %p obj off %llu\n",
lustre-release/lustre/osc/osc_cache.c:	CDEBUG(D_INFO, "teardown oap %p page %p at index %lu.\n",
lustre-release/lustre/osc/osc_cache.c:		CDEBUG(D_CACHE, "oap %p is not in cache.\n", oap);
lustre-release/lustre/osc/osc_object.c:		CDEBUG(D_CACHE, "set kms from %lluto %llu\n",
lustre-release/lustre/osc/osc_object.c:	CDEBUG(D_INODE, "Invalidate osc object: %p, # of active IOs: %d\n",
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_TRACE, "%p\n", opg);
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_CACHE, "%s: run LRU work for client obd\n", cli_name(cli));
lustre-release/lustre/osc/osc_page.c:		CDEBUG(D_CACHE, "%s: shrank %d/%d pages from client obd\n",
lustre-release/lustre/osc/osc_page.c:			CDEBUG(D_CACHE, "%s: queue again\n", cli_name(cli));
lustre-release/lustre/osc/osc_page.c:			CDEBUG(D_CACHE, "%s: queue LRU work\n", cli_name(cli));
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_CACHE, "%s: shrinkers: %d, force: %d\n",
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_CACHE, "%s: start to reclaim %ld pages from LRU\n",
lustre-release/lustre/osc/osc_page.c:		CDEBUG(D_CACHE, "%s: reclaimed %ld/%ld pages from LRU\n",
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_CACHE, "%s: cli %p no free slots, pages: %ld/%ld, want: %ld\n",
lustre-release/lustre/osc/osc_page.c:		CDEBUG(D_CACHE, "%s: cli %p LRU pages: %ld, busy: %ld.\n",
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_CACHE, "%s: cli %p freed %ld pages.\n",
lustre-release/lustre/osc/osc_page.c:		CDEBUG(D_CACHE, "%s: queue LRU, left: %lu/%ld.\n",
lustre-release/lustre/osc/osc_page.c:	CDEBUG(D_CACHE,
lustre-release/lustre/osc/osc_io.c:	CDEBUG(D_CACHE|D_READA, "%d %d\n", qin->pl_nr, crt);
lustre-release/lustre/osc/osc_io.c:			CDEBUG(D_CACHE, "Busy oap %p page %p for submit.\n",
lustre-release/lustre/osc/osc_io.c:	CDEBUG(D_INFO, "%d/%d %d\n", qin->pl_nr, qout->pl_nr, result);
lustre-release/lustre/osc/osc_io.c:	CDEBUG(D_INODE, "stripe KMS %sincreasing %llu->%llu %llu\n",
lustre-release/lustre/osc/osc_io.c:			CDEBUG(D_CACHE, "Busy oap %p page %p for submit.\n",
lustre-release/lustre/osc/osc_io.c:	CDEBUG(D_INFO, "%d %d\n", qin->pl_nr, result);
lustre-release/lustre/osc/osc_io.c:	CDEBUG(D_INFO, "%lu %d %zu\n",
lustre-release/lustre/osc/osc_io.c:		CDEBUG(D_CACHE, "page %p index %lu locked for %d.\n",
lustre-release/lustre/osc/osc_lock.c:		CDEBUG(D_CACHE, "object %p: [%lu -> %lu] %d pages were %s.\n",
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_INODE, "mode: %o\n", body->oa.o_mode);
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_INFO, "oa flags %x\n", oa->o_flags);
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_HA, "transno: %lld\n",
lustre-release/lustre/osc/osc_request.c:                CDEBUG(D_INFO, "oa NULL\n");
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_CACHE, "dirty: %llu undirty: %u dropped %u grant: %llu\n",
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_CACHE, "next time %lld to shrink grant\n",
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_CACHE, "got %llu extra grant\n", body->oa.o_grant);
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_CACHE, "%s, setting cl_avail_grant: %ld cl_lost_grant: %ld."
lustre-release/lustre/osc/osc_request.c:                CDEBUG(D_INFO, "Missing/short RC vector on BRW_WRITE reply\n");
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_INFO, "rc[%d]: %d req %p\n",
lustre-release/lustre/osc/osc_request.c:                        CDEBUG(D_INFO, "rc[%d] invalid (%d) req %p\n",
lustre-release/lustre/osc/osc_request.c:		LL_CDEBUG_PAGE(D_PAGE, pga[i]->pg, "off %d\n",
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_CACHE, "Using short io for data transfer, size = %d\n",
lustre-release/lustre/osc/osc_request.c:				CDEBUG(D_PAGE, "failed to checksum, rc = %d\n",
lustre-release/lustre/osc/osc_request.c:                        CDEBUG(D_PAGE, "checksum at write origin: %x\n",
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_RPCTRACE, "brw rpc %p - object "DOSTID" offset %lld<>%lld\n",
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_INFO, "%s: can't open to dump pages with "
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_INFO, "%s: wrote %d bytes\n",
lustre-release/lustre/osc/osc_request.c:                CDEBUG(D_PAGE, "checksum %x confirmed\n", client_cksum);
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_QUOTA,
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_CACHE, "Using short io read, size %d\n", rc);
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_CACHE, "page %p count %d\n",
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_PAGE, "checksum %x confirmed\n", client_cksum);
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_INODE, "request %p aa %p rc %d\n", req, aa, rc);
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_HA, "%s: resend cross eviction for object: "
lustre-release/lustre/osc/osc_request.c:			CDEBUG(D_LAYOUT, DFID": write with layout version %u\n",
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_SUPER,
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_INODE, "%s: unrecognised ioctl %#x by %s: rc = %d\n",
lustre-release/lustre/osc/osc_request.c:		CDEBUG(D_RPCTRACE, "ocd_connect_flags: %#llx ocd_version: %d"
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_CACHE, "Run writeback work for client obd %p.\n", cli);
lustre-release/lustre/osc/osc_request.c:	CDEBUG(D_INFO, "Lustre OSC module (%p).\n", &osc_caches);
lustre-release/lustre/osc/lproc_osc.c:		CDEBUG(D_CONFIG, "activate %u: ignoring repeat request\n",
lustre-release/lustre/llite/xattr.c:			CDEBUG(D_VFSTRACE, "obd_iocontrol failed. rc = %d\n",
lustre-release/lustre/llite/xattr.c:		CDEBUG(D_VFSTRACE, "Could not prepare the opdata. rc = %d\n",
lustre-release/lustre/llite/xattr.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode=" DFID "(%p), xattr %s\n",
lustre-release/lustre/llite/xattr.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), xattr %s\n",
lustre-release/lustre/llite/xattr.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p)\n",
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, "PCC create, matched %s - %d:%d:%d:%s\n",
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, "matched id %u, PCC mode %d\n", id, type);
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_INODE, "Cannot get layout for "DFID"\n",
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, DFID" L.Gen (%d) consistent, auto attached.\n",
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, DFID" layout changed from %d to %d.\n",
lustre-release/lustre/llite/pcc.c:	CDEBUG(D_CACHE, "opening pcc file '%.*s'\n", dname->len,
lustre-release/lustre/llite/pcc.c:	CDEBUG(D_CACHE, "releasing pcc file \"%.*s\"\n", dname->len,
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_MMAP,
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, "Waiting for IO completion: %d\n",
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, "Invalidate "DFID" layout gen %d\n",
lustre-release/lustre/llite/pcc.c:			CDEBUG(D_CACHE,
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, DFID" RESTORE failure: %d\n",
lustre-release/lustre/llite/pcc.c:		CDEBUG(D_CACHE, DFID" HSM REMOVE failure: %d\n",
lustre-release/lustre/llite/xattr_cache.c:			CDEBUG(D_CACHE, "find: [%s]=%.*s\n",
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "duplicate xattr: [%s]\n", xattr_name);
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "failed to allocate xattr\n");
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "failed to alloc xattr name %u\n",
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "failed to alloc xattr value %d\n",
lustre-release/lustre/llite/xattr_cache.c:	CDEBUG(D_CACHE, "set: [%s]=%.*s\n", xattr_name,
lustre-release/lustre/llite/xattr_cache.c:	CDEBUG(D_CACHE, "del xattr: %s\n", xattr_name);
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "list: buffer=%p[%d] name=%s\n",
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "md_intent_lock failed with %d for fid "DFID"\n",
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "cancelled by a parallel getxattr\n");
lustre-release/lustre/llite/xattr_cache.c:	CDEBUG(D_CACHE, "caching: xdata=%p xtail=%p\n", xdata, xtail);
lustre-release/lustre/llite/xattr_cache.c:		CDEBUG(D_CACHE, "caching [%s]=%.*s\n", xdata, *xsizes, xval);
lustre-release/lustre/llite/xattr_cache.c:			CDEBUG(D_CACHE, "not caching %s\n",
lustre-release/lustre/llite/xattr_cache.c:			CDEBUG(D_CACHE, "not caching security.selinux\n");
lustre-release/lustre/llite/vvp_io.c:				CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, "lock: %d [%lu, %lu]\n", mode, start, end);
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, DFID" ignore/verify layout %d/%d, layout version %d "
lustre-release/lustre/llite/vvp_io.c:			CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_VFSTRACE, DFID" write layout, type %u "DEXT"\n",
lustre-release/lustre/llite/vvp_io.c:			CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/vvp_io.c:                        CDEBUG(D_VFSTRACE, "lock: %d: [%lu, %lu]\n",
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, "%s: read [%llu, %llu)\n",
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_READA, "tot %zu, ra_start %lu, ra_count %lu\n",
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, "mapping %p, count %d, dirtied %d\n", mapping,
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, "commit async pages: %d, from %d, to %d\n",
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_VFSTRACE, "Committed %d pages %d bytes, tot: %ld\n",
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, "%s: write [%llu, %llu)\n",
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_INODE,
lustre-release/lustre/llite/vvp_io.c:			CDEBUG(D_VFSTRACE, "%s: write nob %zd, result: %zd\n",
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_VFSTRACE, "%s: write position mismatch: "
lustre-release/lustre/llite/vvp_io.c:		LL_CDEBUG_PAGE(D_PAGE, vmf->page, "got addr %p type NOPAGE\n",
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_PAGE, "got addr %p - SIGBUS\n", get_vmf_address(vmf));
lustre-release/lustre/llite/vvp_io.c:		CDEBUG(D_PAGE, "got addr %p - OOM\n", get_vmf_address(vmf));
lustre-release/lustre/llite/vvp_io.c:                CDEBUG(D_PAGE, "llite: fault and truncate race happened!\n");
lustre-release/lustre/llite/vvp_io.c:			CDEBUG(D_PAGE,
lustre-release/lustre/llite/vvp_io.c:	CDEBUG(D_VFSTRACE, DFID" ignore/verify layout %d/%d, layout version %d "
lustre-release/lustre/llite/llite_nfs.c:	CDEBUG(D_INFO, "searching inode for:(%lu,"DFID")\n", hash, PFID(fid));
lustre-release/lustre/llite/llite_nfs.c:		CDEBUG(D_INFO, "can't get object attrs, fid "DFID", rc %d\n",
lustre-release/lustre/llite/llite_nfs.c:	CDEBUG(D_INFO, "Get dentry for fid: "DFID"\n", PFID(fid));
lustre-release/lustre/llite/llite_nfs.c:	CDEBUG(D_INFO, "%s: encoding for ("DFID") maxlen=%d minlen=%d\n",
lustre-release/lustre/llite/llite_nfs.c:	CDEBUG(D_INFO, "%s: getting parent for ("DFID")\n",
lustre-release/lustre/llite/llite_nfs.c:		CDEBUG(D_INFO, "parent for "DFID" is "DFID"\n",
lustre-release/lustre/llite/llite_mmap.c:        CDEBUG(D_MMAP, "vm_flags: %lx (%lu %d)\n", vma->vm_flags,
lustre-release/lustre/llite/llite_mmap.c:                        CDEBUG(D_MMAP, "Race on page_mkwrite %p/%lu, page has "
lustre-release/lustre/llite/llite_mmap.c:	CDEBUG(D_MMAP, "%s mkwrite with %d\n", current->comm, result);
lustre-release/lustre/llite/llite_mmap.c:		CDEBUG(D_MMAP, "delaying new page-fault for inode %p to "
lustre-release/lustre/llite/llite_mmap.c:	CDEBUG(D_MMAP, "%s fault %d/%d\n", current->comm, fault_ret, result);
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_RPCTRACE, "ocd_connect_flags: %#llx ocd_version: %d "
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_SUPER, "rootfid "DFID"\n", PFID(&sbi->ll_root_fid));
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_INFO, "max LOV ea size: %d\n", *lmmsize);
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_INFO, "max LMV ea size: %d\n", *lmmsize);
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_CONFIG, "Parsing opts %s\n", options);
lustre-release/lustre/llite/llite_lib.c:		CDEBUG(D_SUPER, "next opt=%s\n", s1);
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_VFSTRACE, "VFS Op: cfg_instance %s-%016lx (sb %p)\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_CONFIG, "llite sb uuid: %s\n", sbi->ll_sb_uuid.uuid);
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_CONFIG, "Found profile %s: mdc=%s osc=%s\n", profilenm,
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_VFSTRACE, "VFS Op: cfg_instance %s-%016lx (sb %p)\n",
lustre-release/lustre/llite/llite_lib.c:		CDEBUG(D_INODE, "lli %p slave "DFID" master "DFID"\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_INODE, "%s: "DFID" set dir layout:\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_INODE, "update lsm %p of "DFID"\n", lli->lli_lsm_md,
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p)\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_VFSTRACE, "%s: setattr inode "DFID"(%p) from %llu to %llu, "
lustre-release/lustre/llite/llite_lib.c:			CDEBUG(D_INODE,"file "DFID" too large %llu > %llu\n",
lustre-release/lustre/llite/llite_lib.c:		CDEBUG(D_INODE, "setting mtime %lld, ctime %lld, now = %lld\n",
lustre-release/lustre/llite/llite_lib.c:			CDEBUG(D_INFO, DFID "HSM set dirty failed: rc2 = %d\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_SUPER, "MDC blocks %llu/%llu objects %llu/%llu\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_SUPER, "OSC blocks %llu/%llu objects %llu/%llu\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_VFSTRACE, "VFS Op:sb=%s (%p)\n", sb->s_id, sb);
lustre-release/lustre/llite/llite_lib.c:			CDEBUG(D_INODE,
lustre-release/lustre/llite/llite_lib.c:		CDEBUG(D_VFSTRACE, "inode="DFID", updating i_size %llu\n",
lustre-release/lustre/llite/llite_lib.c:        CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p)\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_SEC, "flush context for user %d\n",
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_VFSTRACE, "VFS Op: superblock %p count %d active %d\n", sb,
lustre-release/lustre/llite/llite_lib.c:	CDEBUG(D_WARNING,
lustre-release/lustre/llite/dir.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p) pos/size"
lustre-release/lustre/llite/dir.c:		CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/dir.c:		CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/dir.c:			CDEBUG(D_IOCTL, "bad userland LOV MAGIC:"
lustre-release/lustre/llite/dir.c:		CDEBUG(D_INFO, "md_getattr failed on inode "DFID": rc %d\n",
lustre-release/lustre/llite/dir.c:			CDEBUG(D_HSM, "Could not read file data version of "
lustre-release/lustre/llite/dir.c:			CDEBUG(D_HSM, "Could not read file data version. "
lustre-release/lustre/llite/dir.c:			CDEBUG(D_HSM, "File data version mismatched. "
lustre-release/lustre/llite/dir.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), cmd=%#x\n",
lustre-release/lustre/llite/dir.c:			CDEBUG(D_INFO, "IOC_MDC_LOOKUP missing filename\n");
lustre-release/lustre/llite/dir.c:			CDEBUG(D_INFO, "IOC_MDC_LOOKUP missing filename\n");
lustre-release/lustre/llite/dir.c:			CDEBUG(D_INFO, "IOC_MDC_LOOKUP missing filename\n");
lustre-release/lustre/llite/super25.c:	CDEBUG(D_INFO, "Lustre client module (%p).\n",
lustre-release/lustre/llite/namei.c:		CDEBUG(D_VFSTRACE, "got inode: "DFID"(%p): rc = %d\n",
lustre-release/lustre/llite/namei.c:		CDEBUG(D_INODE, "inode "DFID" layout has no DoM stripe\n",
lustre-release/lustre/llite/namei.c:			CDEBUG(D_INODE, "cannot flush DoM data "
lustre-release/lustre/llite/namei.c:			CDEBUG(D_INODE, "cannot invalidate layout of "
lustre-release/lustre/llite/namei.c:		CDEBUG(D_INODE, "invalidating inode "DFID" lli = %p, "
lustre-release/lustre/llite/namei.c:			CDEBUG(D_INODE, "Invalidate s"DFID" m"DFID"\n",
lustre-release/lustre/llite/namei.c:			CDEBUG(D_INODE, "ldlm_cli_cancel: rc = %d\n", rc);
lustre-release/lustre/llite/namei.c:			CDEBUG(D_DENTRY,
lustre-release/lustre/llite/namei.c:	CDEBUG(D_DENTRY, "Add dentry %p inode %p refc %d flags %#x\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_DENTRY, "it %p it_disposition %x\n", it,
lustre-release/lustre/llite/namei.c:				CDEBUG(D_SEC, "server returned security context"
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p), intent=%s\n",
lustre-release/lustre/llite/namei.c:			CDEBUG(D_SEC, "cannot get security xattr name for "
lustre-release/lustre/llite/namei.c:			CDEBUG(D_SEC, "'%.*s' is security xattr for "DFID"\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p), flags=%u\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p), file %p,"
lustre-release/lustre/llite/namei.c:	CDEBUG(D_DLMTRACE, "setting l_ast_data to inode "DFID"(%p)\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p), intent=%s\n",
lustre-release/lustre/llite/namei.c:		CDEBUG(D_INODE,
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p) mode %o dev %x\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p), "
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, unhashed %d\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p), target=%.*s\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op: inode="DFID"(%p), dir="DFID"(%p), "
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p)\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p)\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p)\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%.*s, dir="DFID"(%p)\n",
lustre-release/lustre/llite/namei.c:	CDEBUG(D_VFSTRACE, "VFS Op:oldname=%.*s, src_dir="DFID
lustre-release/lustre/llite/vvp_object.c:		CDEBUG(D_VFSTRACE, DFID ": losing layout lock\n",
lustre-release/lustre/llite/vvp_object.c:		CDEBUG(D_VFSTRACE, DFID ": writeback failed: %d\n",
lustre-release/lustre/llite/vvp_object.c:		CDEBUG(D_VFSTRACE, DFID ": still has %lu pages remaining\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "alloc sa entry %.*s(%p) index %llu\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "free sa entry %.*s(%p) index %llu\n",
lustre-release/lustre/llite/statahead.c:        CDEBUG(D_READA, "Handling (init) async glimpse: inode = "
lustre-release/lustre/llite/statahead.c:        CDEBUG(D_READA, "Handled (init) async glimpse: inode= "
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "%s: setting %.*s"DFID" l_data to inode %p\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "sa_entry %.*s rc %d\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "agl thread started: sai %p, parent %.*s\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "agl thread stopped: sai %p, parent %.*s\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "start agl thread: sai %p, parent %.*s\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "statahead thread starting: sai %p, parent %.*s\n",
lustre-release/lustre/llite/statahead.c:			CDEBUG(D_READA, "error reading dir "DFID" at %llu"
lustre-release/lustre/llite/statahead.c:			CDEBUG(D_READA, "Statahead for dir "DFID" hit "
lustre-release/lustre/llite/statahead.c:		CDEBUG(D_READA, "stop agl thread: sai %p pid %u\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "statahead thread stopped: sai %p, parent %.*s\n",
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "deauthorize statahead for "DFID"\n",
lustre-release/lustre/llite/statahead.c:				CDEBUG(D_READA, "%.*s skip hidden file %.*s\n",
lustre-release/lustre/llite/statahead.c:				CDEBUG(D_READA,
lustre-release/lustre/llite/statahead.c:		CDEBUG(D_READA,
lustre-release/lustre/llite/statahead.c:	CDEBUG(D_READA, "start statahead thread: [pid %d] [parent %.*s]\n",
lustre-release/lustre/llite/statahead.c:		CDEBUG(D_READA, "revalidate statahead %.*s: %d.\n",
lustre-release/lustre/llite/symlink.c:		 * If the total CDEBUG() size is larger than a page, it
lustre-release/lustre/llite/symlink.c:		CDEBUG(D_INODE, "using cached symlink %s%.*s, len = %d\n",
lustre-release/lustre/llite/symlink.c:	CDEBUG(D_VFSTRACE, "VFS Op\n");
lustre-release/lustre/llite/symlink.c:	CDEBUG(D_VFSTRACE, "VFS Op\n");
lustre-release/lustre/llite/symlink.c:	CDEBUG(D_VFSTRACE, "VFS Op\n");
lustre-release/lustre/llite/glimpse.c:	CDEBUG(D_DLMTRACE, "Glimpsing inode "DFID"\n", PFID(fid));
lustre-release/lustre/llite/file.c:		CDEBUG(rc ? D_ERROR : D_INODE, "Clean up lease "DFID" %d/%d\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p)\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_INFO, "Get data along with open at %llu len %i, size %llu\n",
lustre-release/lustre/llite/file.c:		CDEBUG(D_VFSTRACE, "lock enqueue: err: %d\n", rc);
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), flags %o\n",
lustre-release/lustre/llite/file.c:			CDEBUG(D_INODE, "ldlm_cli_cancel: %d\n", rc);
lustre-release/lustre/llite/file.c:	CDEBUG(D_INODE, "%s: biased close of file "DFID"\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_INODE, "lease for "DFID" broken? %d, bias: %x\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, DFID" updating i_size %llu\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "%s: desiginated mirror: %d\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "%s: %s ppos: %llu, count: %zu\n",
lustre-release/lustre/llite/file.c:				CDEBUG(D_VFSTRACE, "Range lock "RL_FMT"\n",
lustre-release/lustre/llite/file.c:			CDEBUG(D_VFSTRACE, "Range unlock "RL_FMT"\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/file.c:		CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "iot: %d, result: %zd\n", iot, result);
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "result: %zu, original count %zu\n", result, count);
lustre-release/lustre/llite/file.c:                CDEBUG(D_INFO, "md_getattr_name failed "
lustre-release/lustre/llite/file.c:	CDEBUG(D_INFO, "group lock %lu obtained\n", arg);
lustre-release/lustre/llite/file.c:	CDEBUG(D_INFO, "group lock %lu released\n", arg);
lustre-release/lustre/llite/file.c:	CDEBUG(D_INODE, "%s: Releasing file "DFID".\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "Lock request: file=%.*s, inode=%p, mode=%s "
lustre-release/lustre/llite/file.c:		CDEBUG(D_VFSTRACE, "%s: advice with value '%d' not recognized,"
lustre-release/lustre/llite/file.c:			CDEBUG(D_VFSTRACE, "%s: Invalid flags (%x) for %s: "
lustre-release/lustre/llite/file.c:			CDEBUG(D_VFSTRACE, "%s: Invalid mode (%d) for %s: "
lustre-release/lustre/llite/file.c:			CDEBUG(D_VFSTRACE, "%s: Invalid flags (%x) for %s: "
lustre-release/lustre/llite/file.c:			CDEBUG(D_VFSTRACE, "%s: Invalid range (%llu to %llu) "
lustre-release/lustre/llite/file.c:	CDEBUG(D_INODE, "Set lease with mode %u\n", fmode);
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), cmd=%x\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), to=%llu=%#llx(%d)\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), start %lld, end %lld,"
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID" file_lock=%p\n",
lustre-release/lustre/llite/file.c:		CDEBUG(D_INFO, "Unknown fcntl lock type: %d\n", fl_type);
lustre-release/lustre/llite/file.c:	CDEBUG(D_DLMTRACE, "inode="DFID", pid=%u, flags=%#llx, mode=%u, "
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "migrate "DFID"/%s to MDT%04x stripe count %d\n",
lustre-release/lustre/llite/file.c:	 * by CDEBUG_LIMIT too.
lustre-release/lustre/llite/file.c:		CDEBUG_LIMIT(D_TTY | D_CONSOLE,
lustre-release/lustre/llite/file.c:        CDEBUG(D_INFO, "trying to match res "DFID" mode %s\n", PFID(fid),
lustre-release/lustre/llite/file.c:	CDEBUG(D_INFO, "trying to match res "DFID"\n", PFID(fid));
lustre-release/lustre/llite/file.c:		CDEBUG_LIMIT((rc == -EACCES || rc == -EIDRM) ? D_INFO : D_ERROR,
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p),name=%s\n",
lustre-release/lustre/llite/file.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), inode mode %x mask %o\n",
lustre-release/lustre/llite/file.c:		CDEBUG(D_OTHER, "squash creds (%d:%d)=>(%d:%d)\n",
lustre-release/lustre/llite/file.c:		CDEBUG(D_VFSTRACE,
lustre-release/lustre/llite/file.c:	CDEBUG(D_INODE, DFID" LVB_READY=%d l_lvb_data=%p l_lvb_len=%d\n",
lustre-release/lustre/llite/file.c:		CDEBUG(D_INODE, "%s: "DFID"(%p) wait for layout reconf\n",
lustre-release/lustre/llite/file.c:		CDEBUG(D_INODE, "%s file="DFID" waiting layout return: %d\n",
lustre-release/lustre/llite/lcommon_misc.c:	CDEBUG(D_HA, "updating def/max_easize: %d/%d\n",
lustre-release/lustre/llite/lcommon_misc.c:		CDEBUG(D_SUPER, "Changing connect_flags: %#llx -> %#llx\n",
lustre-release/lustre/llite/rw26.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), size=%zd (max %lu), "
lustre-release/lustre/llite/rw26.c:				CDEBUG(D_VFSTRACE, "DIO size now %zu\n",
lustre-release/lustre/llite/rw26.c:	CDEBUG(D_VFSTRACE, "VFS Op:inode="DFID"(%p), size=%zd (max %lu), "
lustre-release/lustre/llite/rw26.c:					CDEBUG(D_VFSTRACE, "DIO size now %zu\n",
lustre-release/lustre/llite/rw26.c:	CDEBUG(D_VFSTRACE, "Writing %lu of %d to %d bytes\n", index, from, len);
lustre-release/lustre/llite/rw26.c:	CDEBUG(D_VFSTRACE, "pos %llu, len %u, copied %u\n", pos, len, copied);
lustre-release/lustre/llite/rw.c:#define RAS_CDEBUG(ras) \
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA,							     \
lustre-release/lustre/llite/rw.c:		CDEBUG(D_READA, "%s\n", msg);
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA, "rs %lu re %lu ro %llu rl %llu rb %llu\n",	\
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA, "start %llu, end %llu start_left %llu end_left %llu\n",
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA,
lustre-release/lustre/llite/rw.c:				CDEBUG(D_READA, "idx: %lu, ra: %lu, rpc: %lu\n",
lustre-release/lustre/llite/rw.c:				CDEBUG(D_READA,
lustre-release/lustre/llite/rw.c:				CDEBUG(D_READA,
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA,
lustre-release/lustre/llite/rw.c:	RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA, DFID": ria: %lu/%lu, bead: %lu/%lu, hit: %d\n",
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA, "reserved pages: %lu/%lu/%lu, ra_cur %d, ra_max %lu\n",
lustre-release/lustre/llite/rw.c:	CDEBUG(D_READA,
lustre-release/lustre/llite/rw.c:		RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:	RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:        RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:        RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:	RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:			RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:		CDEBUG(D_READA, "kmsp %llu mwp %lu mp %lu\n", kms_pages,
lustre-release/lustre/llite/rw.c:		CDEBUG(D_READA, DFID " pages at %lu miss.\n",
lustre-release/lustre/llite/rw.c:			RAS_CDEBUG(ras);
lustre-release/lustre/llite/rw.c:		CDEBUG(D_READA, DFID "%d pages read ahead at %lu\n",
lustre-release/lustre/llite/dcache.c:	CDEBUG(D_DENTRY, "found name %.*s(%p) flags %#x refc %d\n",
lustre-release/lustre/llite/dcache.c:	CDEBUG(D_DENTRY, "%s dentry %.*s (%p, parent %p, inode %p) %s%s\n",
lustre-release/lustre/llite/dcache.c:	CDEBUG(D_DENTRY, "ldd on dentry %.*s (%p) parent %p inode %p refc %d\n",
lustre-release/lustre/llite/dcache.c:		CDEBUG(D_DLMTRACE, "releasing lock with cookie %#llx from it %p\n",
lustre-release/lustre/llite/dcache.c:			CDEBUG(D_DLMTRACE, "releasing remote lock with cookie"
lustre-release/lustre/llite/dcache.c:        CDEBUG(D_INFO, "intent %p released\n", it);
lustre-release/lustre/llite/dcache.c:	CDEBUG(D_INODE, "marking dentries for inode "DFID"(%p) invalid\n",
lustre-release/lustre/llite/dcache.c:		CDEBUG(D_DENTRY, "dentry in drop %.*s (%p) parent %p "
lustre-release/lustre/llite/dcache.c:		CDEBUG(D_DLMTRACE, "setting l_data to inode "DFID"(%p)\n",
lustre-release/lustre/llite/dcache.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%s, flags=%u\n",
lustre-release/lustre/llite/dcache.c:	CDEBUG(D_VFSTRACE, "VFS Op:name=%s, flags=%u\n",
lustre-release/lustre/target/tgt_grant.c:	CDEBUG_LIMIT(level, "%s: cli %s/%p dirty %ld pend %ld grant %ld\n",
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE, "%s: processing self export: %ld %ld "
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE, "%s: cli %s/%p free: %llu avail: %llu\n",
lustre-release/lustre/target/tgt_grant.c:		CDEBUG_LIMIT(mask,
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE, "%s: cli %s/%p shrink %ld ted_grant %ld total %llu\n",
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE, "Replaying write, skipping accounting\n");
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE, "Recoverable resend arrived, skipping "
lustre-release/lustre/target/tgt_grant.c:			CDEBUG(D_CACHE, "%s: cli %s/%p claims %ld+%d GRANT, "
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE, "%s: cli %s/%p idx %d no space for %d\n",
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE,
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE, "fs has no space left and statfs too old\n");
lustre-release/lustre/target/tgt_grant.c:	CDEBUG(D_CACHE, "%s: cli %s/%p ocd_grant: %d want: %llu left: %llu\n",
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_CACHE, "%s: fs has no space left and statfs too old\n",
lustre-release/lustre/target/tgt_grant.c:		CDEBUG(D_RPCTRACE, "%s: not enough space for create %llu\n",
lustre-release/lustre/target/tgt_fmd.c:			CDEBUG(D_INFO,
lustre-release/lustre/target/update_recovery.c:	CDEBUG(D_HA, "%s: insert record batchid = %llu transno = %llu"
lustre-release/lustre/target/update_recovery.c:		CDEBUG(D_HA, "%s update batchid from %llu" " to %llu\n",
lustre-release/lustre/target/update_recovery.c:	CDEBUG(D_HA, "destroy x%llu t%llu\n", dtrq->dtrq_xid,
lustre-release/lustre/target/update_recovery.c:	CDEBUG(D_HA, "%s: Next update transno %llu\n",
lustre-release/lustre/target/update_recovery.c:	CDEBUG(D_HA, "Update of "DFID "on MDT%u is not committed\n", PFID(fid),
lustre-release/lustre/target/update_recovery.c:	CDEBUG(D_HA, "xid=%llu transno=%llu\n", lrd->lrd_xid, lrd->lrd_transno);
lustre-release/lustre/target/update_recovery.c:		CDEBUG(D_HA, "replay %uth update\n", i);
lustre-release/lustre/target/update_recovery.c:			CDEBUG(D_HA, "error during execution of #%u from"
lustre-release/lustre/target/update_recovery.c:		CDEBUG(D_HA, "%s: executed %u/%u: rc = %d\n",
lustre-release/lustre/target/update_trans.c:	CDEBUG(mask, "%s tmt %p refcount %d committed %d result %d batchid %llu\n",
lustre-release/lustre/target/update_trans.c:		CDEBUG(mask, "st %p obd %s committed %d started %d stopped %d "
lustre-release/lustre/target/update_trans.c:			CDEBUG(mask, " cookie "DFID".%u\n",
lustre-release/lustre/target/update_trans.c:		CDEBUG(D_INFO, "%s: Add update log "DFID".%u: rc = %d\n",
lustre-release/lustre/target/update_trans.c:		CDEBUG(D_INFO, "%s: Add update log "DFID".%u: rc = %d\n",
lustre-release/lustre/target/update_trans.c:			CDEBUG(D_HA, "%s: batchid %llu cancel update log "
lustre-release/lustre/target/update_trans.c:	CDEBUG(D_HA, "%s: %llu batchid updated\n",
lustre-release/lustre/target/update_trans.c:	CDEBUG(D_INFO, "%s: update batchid %llu: rc = %d\n",
lustre-release/lustre/target/update_trans.c:		CDEBUG(D_HA, "%s: committed batchid %llu\n",
lustre-release/lustre/target/update_trans.c:	CDEBUG(D_HA, "%s: start commit thread committed batchid %llu\n",
lustre-release/lustre/target/update_trans.c:		CDEBUG(D_HA, "%s: batchid: %llu committed batchid "
lustre-release/lustre/target/update_trans.c:	CDEBUG(D_INFO, "%s stopping distribute txn commit thread.\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: destroy "DFID"\n", dt_obd_name(th->th_dev),
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_OTHER, "%s: create "DFID": dof %u, mode %o\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert create reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_OTHER, "%s: attr set "DFID"\n", dt_obd_name(th->th_dev),
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert attr_set reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "write "DFID" pos %llu buf %p, len %lu\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: set xattr buf %p name %s flag %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert xattr set reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: del xattr name '%s' on "DFID"\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert xattr del reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert ref_add reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert ref_del reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: index insert "DFID" name: %s fid "DFID", type %u\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: index delete "DFID" name: %s\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert idx insert reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: delete idx insert reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_lib.c:	CDEBUG(D_INFO, "%s: insert destroy reply %p index %d: rc = %d\n",
lustre-release/lustre/target/barrier.c:		CDEBUG(D_SNAPSHOT, "%s: change barrier status from %u to %u\n",
lustre-release/lustre/target/barrier.c:	CDEBUG(D_SNAPSHOT, "%s: barrier freezing %s done.\n",
lustre-release/lustre/target/barrier.c:	CDEBUG(D_SNAPSHOT,
lustre-release/lustre/target/barrier.c:	CDEBUG(D_SNAPSHOT, "%s: handled barrier request: status %u, "
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_HA, "operation %d on unconnected OST from %s\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_ERROR, "%s: No target for connected export\n",
lustre-release/lustre/target/tgt_handler.c:	CDEBUG(D_INFO, "Checksum for algo %s\n", cfs_crypto_hash_name(cfs_alg));
lustre-release/lustre/target/tgt_handler.c:			CDEBUG(D_INFO, "%s: can't open to dump pages with "
lustre-release/lustre/target/tgt_handler.c:			CDEBUG(D_INFO, "%s: wrote %d bytes\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_PAGE, "checksum %x confirmed upon retry\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_PAGE, "index %d offset = %d len = %d left = %d\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_PAGE, "checksum at read origin: %x\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_INFO, "reorder BULK\n");
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_PAGE, "index %d offset = %d len = %d left = %d\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG_LIMIT(D_INFO, "client csum %x, server csum %x\n",
lustre-release/lustre/target/tgt_handler.c:		CDEBUG(D_INFO, "Client use short io for data transfer,"
lustre-release/lustre/target/tgt_handler.c:			CDEBUG(D_INFO, "Checksum %u from %s OK: %x\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_HA, "%s: read %s header. magic=0x%08x "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_HA, "%s: write %s header. magic=0x%08x "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_TRACE, "%s: free reply data %p: xid %llu, transno %llu, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_TRACE, "%s: release reply data %p: xid %llu, transno %llu, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: read lcd @%lld uuid = %s, last_transno = %llu"
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_RPCTRACE, "%s: committing for initial connect of %s\n",
lustre-release/lustre/target/tgt_lastrcvd.c:		CDEBUG(D_ERROR, "%s: No target for connected export\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: update last_rcvd client data for UUID = %s, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: read last_rcvd server data for UUID = %s, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: write last_rcvd server data for UUID = %s, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_SUPER,
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: update last_rcvd server data for UUID = %s, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_HA, "%s: transno %lld is committed\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: new client at index %d (%llu) with UUID '%s' "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: client at idx %d with UUID '%s' added, "
lustre-release/lustre/target/tgt_lastrcvd.c:		CDEBUG(D_ERROR, "%s: No target for connected export\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INFO, "%s: del client at idx %u, off %lld, UUID '%s'\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(rc == 0 ? D_INFO : D_ERROR,
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_TRACE, "add reply %p: xid %llu, transno %llu, "
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "transno = %llu, last_committed = %llu\n",
lustre-release/lustre/target/tgt_lastrcvd.c:			CDEBUG(D_INFO, "skipping zeroed client at offset %d\n",
lustre-release/lustre/target/tgt_lastrcvd.c:		CDEBUG(D_HA, "RCVRNG CLIENT uuid: %s idx: %d lr: %llu"
lustre-release/lustre/target/tgt_lastrcvd.c:		CDEBUG(D_OTHER, "client at idx %d has last_transno = %llu\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "=======,=BEGIN DUMPING LAST_RCVD========\n");
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: server last_transno: %llu\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: server mount_count: %llu\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: server data size: %u\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: per-client data start: %u\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: per-client data size: %u\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: last_rcvd size: %lu\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: server subdir_count: %u\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "%s: last_rcvd clients: %lu\n", tgt_name(tgt),
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_INODE, "========END DUMPING LAST_RCVD========\n");
lustre-release/lustre/target/tgt_lastrcvd.c:			CDEBUG(D_HA, "More than one transaction %llu\n",
lustre-release/lustre/target/tgt_lastrcvd.c:		CDEBUG(D_INFO, "%s: new reply_data file, initializing\n",
lustre-release/lustre/target/tgt_lastrcvd.c:			CDEBUG(D_HA, "%s: restore reply %p: xid %llu, "
lustre-release/lustre/target/tgt_lastrcvd.c:		CDEBUG(D_INFO, "%s: %d reply data have been recovered\n",
lustre-release/lustre/target/tgt_lastrcvd.c:	CDEBUG(D_TRACE, "%s: lookup reply xid %llu, found %d last_xid %llu\n",
lustre-release/lustre/target/update_records.c:	CDEBUG(mask, "master transno = %llu batchid = %llu flags = %x"
lustre-release/lustre/target/update_records.c:		CDEBUG(mask, "update %dth "DFID" %s params_count = %hu\n", i,
lustre-release/lustre/target/update_records.c:			CDEBUG(mask, "param = %p %dth off = %hu size = %hu\n",
lustre-release/lustre/target/update_records.c:		CDEBUG(D_INFO, "max_op_size = %zu update_op = %zu\n",
lustre-release/lustre/target/update_records.c:		CDEBUG(D_INFO, "max_param_size = %zu params size = %zu\n",
lustre-release/lustre/target/update_records.c:		CDEBUG(D_INFO, "%s %uth param offset = %d size = %zu\n",
lustre-release/lustre/target/update_records.c:	CDEBUG(D_INFO, "%huth "DFID" %s param_count = %u\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "%s: fork reply reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "%s: insert attr get reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "%s: "DFID" get xattr %s len %d\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "%s: "DFID" list xattr len %d\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "lookup "DFID" %s get "DFID" rc %d\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "%s: insert lookup reply %p index %d: rc = %d\n",
lustre-release/lustre/target/out_handler.c:	CDEBUG(D_INFO, "%s: "DFID" index insert %s: rc = %d\n",
lustre-release/lustre/target/out_handler.c:			CDEBUG(D_INFO, "error during execution of #%u from"
lustre-release/lustre/target/out_handler.c:		CDEBUG(D_INFO, "%s: executed %u/%u: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: namespace LFSCK hit first non-repaired "
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: invalid lfsck_namespace magic "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: fail to load lfsck_namespace, "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: fail to store lfsck_namespace: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK %s flags for "DFID" in the "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK remove invalid linkEA "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK insert orphan for the "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK insert object "DFID" with "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK create orphan dir for "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK remove %s linkEA entry "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK conditionally destroy the "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK rebuild linkEA for the "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant found bad name "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK rebuild dotdot name entry for "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK repaired the object "DFID"'s "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: some MDT(s) maybe NOT take part in the"
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: clear linkea overflow timestamp for the object "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: repair agent entry for "DFID": rc = %d\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:				CDEBUG(D_LFSCK, "%s: namespace LFSCK finds "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK reset: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK checkpoint at the pos [%llu"
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: namespace LFSCK prep failed: "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK prep done, start pos [%llu, "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_INFO,
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK post done: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK handles notify %u from MDT %x, "
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: MDT %x failed/stopped at "
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK,
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant found dangling "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: dir scan find invalid FID "DFID
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: cannot talk with MDT %x which "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant fail to handle "
lustre-release/lustre/lfsck/lfsck_namespace.c:				CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant "
lustre-release/lustre/lfsck/lfsck_namespace.c:					CDEBUG(D_LFSCK, "%s: namespace LFSCK "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: start to scan backend /lost+found\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: fail to iterate backend "
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: the orphan %.*s with IGIF "DFID
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: stop to scan backend /lost+found: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK phase2 scan start\n",
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK phase2 scan stop at the No. %d "
lustre-release/lustre/lfsck/lfsck_namespace.c:			CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant fail "
lustre-release/lustre/lfsck/lfsck_namespace.c:		CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant fail "
lustre-release/lustre/lfsck/lfsck_namespace.c:	CDEBUG(D_LFSCK, "%s: update name entry "DFID"/%s with the FID "DFID
lustre-release/lustre/lfsck/lfsck_bookmark.c:			CDEBUG(D_LFSCK, "%s: invalid lfsck_bookmark magic "
lustre-release/lustre/lfsck/lfsck_bookmark.c:			CDEBUG(D_LFSCK, "%s: fail to load lfsck_bookmark, "
lustre-release/lustre/lfsck/lfsck_bookmark.c:		CDEBUG(D_LFSCK, "%s: fail to store lfsck_bookmark: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: LFSCK assistant fail to "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s LOV EA magic %u for the file "DFID"\n",
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "The DoM entry for "DFID" is not "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "Unsupported LOV EA pattern %u for the file "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_INFO, "foreign LOV EA, magic %x, len %u, type %x, flags %x, for file "DFID"\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "foreign LOV EA internal size %u does not match EA full size %zu for file "DFID"\n",
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "the PFL file "DFID" contains invalid "
lustre-release/lustre/lfsck/lfsck_layout.c:				CDEBUG(D_LFSCK, "found invalid FPL ID %u "
lustre-release/lustre/lfsck/lfsck_layout.c:				CDEBUG(D_LFSCK, "found invalid FPL extent "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK init OST-objects accessing bitmap\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK fini OST-objects accessing bitmap\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: fail to update OST-objects accessing "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: failed to load lfsck_layout: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: lfsck_layout size %u != %u; reset it\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: invalid lfsck_layout magic %#x != %#x, "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: fail to store lfsck_layout: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK will create LAST_ID for <seq> "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK finds crashed "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK will sync the LAST_ID for "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK failed to store "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK failed to store "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK cannot find the "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK finds invalid "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK hit first non-repaired "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK double scan: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK double scan result %u: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: insert the paris "DFID" => "DFID", comp_id = %u, "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: delete the dangling record for "DFID
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: remove layout HOLE for "DFID
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK assistant add new COMP for "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK assistant extend layout EA for "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK assistant created layout EA for "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s layout LFSCK assistant failed to "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK destroyed the empty "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK assistant replaced the conflict "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant failed to recreate "
lustre-release/lustre/lfsck/lfsck_layout.c:					CDEBUG(D_LFSCK, "%s: found invalid "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s layout LFSCK assistant fill "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: the parent "DFID" contains "
lustre-release/lustre/lfsck/lfsck_layout.c:				CDEBUG(D_LFSCK, "%s layout LFSCK assistant "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK assistant starts the orphan "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant skip the orphan "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK assistant finished the orphan "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant found "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant found "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant repaired "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant repaired "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK assistant repaired "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: the parent "DFID" contains "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK assistant fail to "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK phase2 scan start\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK phase2 scan dangling stop "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK phase2 scan stop: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK slave gets the MDT %x "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK slave fail to "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave queries master: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave notifies master\n",
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK slave fail to "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave repaired pfid for "DFID
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK reset: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK master checkpoint at the pos ["
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave checkpoint at the pos ["
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK prep failed: "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave prep done, start pos ["
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK master prep done, start pos ["
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: get invalid layout EA for "DFID
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: cannot talk with OST %x which "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK master %s bad lmm_oi for "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK failed to "
lustre-release/lustre/lfsck/lfsck_layout.c:				CDEBUG(D_LFSCK, "%s: layout LFSCK failed to "
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK finds crashed "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK master post done: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:			CDEBUG(D_LFSCK, "%s: layout LFSCK has rebuilt "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave post done: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave phase2 scan start\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK slave phase2 scan finished, "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: layout LFSCK master handles notify %u "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: layout LFSCK slave handle notify %u "
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "destroy orphan OST-object "DFID": rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: init the orphan iteration: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: fini the orphan iteration\n",
lustre-release/lustre/lfsck/lfsck_layout.c:	CDEBUG(D_LFSCK, "%s: return orphan "DFID", PFID "DFID", owner %u:%u, "
lustre-release/lustre/lfsck/lfsck_layout.c:		CDEBUG(D_LFSCK, "%s: the given hash %llu for orphan "
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: unexpected PDO lock mode %u on the obj "
lustre-release/lustre/lfsck/lfsck_lib.c:	CDEBUG(D_LFSCK, "%s: remove name entry "DFID"/%s: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: partially created the object "DFID
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: update LPF fid "DFID
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: reset invalid LPF fid "DFID
lustre-release/lustre/lfsck/lfsck_lib.c:			CDEBUG(D_LFSCK, "%s: scan .lustre/lost+found/ "
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: reset invalid LPF fid "DFID
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: reset invalid LPF fid "DFID
lustre-release/lustre/lfsck/lfsck_lib.c:			CDEBUG(D_LFSCK, "%s: fail to notify %s %x for %s "
lustre-release/lustre/lfsck/lfsck_lib.c:			CDEBUG(D_LFSCK, "%s: fail to notify %s %x for %s: "
lustre-release/lustre/lfsck/lfsck_lib.c:			CDEBUG(D_LFSCK, "%s: invalid query reply for %s: "
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: unexpected event: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_lib.c:			CDEBUG(D_LFSCK, "%s: fail to notify %s %x for "
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: unknown async request %d: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_lib.c:			CDEBUG(D_LFSCK, "%s: Fail to query %s %x for stat %s: "
lustre-release/lustre/lfsck/lfsck_lib.c:	CDEBUG(D_LFSCK, "%s: waiting for assistant to do %s post, rc = %d\n",
lustre-release/lustre/lfsck/lfsck_lib.c:	CDEBUG(D_LFSCK, "%s: the assistant has done %s post, rc = %d\n",
lustre-release/lustre/lfsck/lfsck_lib.c:	CDEBUG(D_LFSCK, "%s: waiting for assistant to do %s double_scan, "
lustre-release/lustre/lfsck/lfsck_lib.c:	CDEBUG(D_LFSCK, "%s: the assistant has done %s double_scan, "
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG_LIMIT(rc ? D_ERROR : D_LFSCK,
lustre-release/lustre/lfsck/lfsck_lib.c:		CDEBUG(D_LFSCK, "%s: LFSCK fail to load "
lustre-release/lustre/lfsck/lfsck_engine.c:		CDEBUG(D_INFO,
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: lfsck_post at the component %u: "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: scan dir exit for engine stop, "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: scan dir failed at rec(), "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: scan dir exit for engine stop, "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s dir engine fail to locate next "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: OIT scan exit for engine stop, "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: OIT scan failed at rec(): "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: OIT scan find invalid FID "DFID
lustre-release/lustre/lfsck/lfsck_engine.c:					CDEBUG(D_LFSCK, "%s: invalid IDIF "DFID
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: OIT scan failed at find target "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s oit engine fail to locate next at "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: OIT scan exit for engine stop, "
lustre-release/lustre/lfsck/lfsck_engine.c:		CDEBUG(D_LFSCK, "%s: master engine fail to init iteration: "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: master engine fail to verify the "
lustre-release/lustre/lfsck/lfsck_engine.c:	CDEBUG(D_LFSCK, "LFSCK entry: oit_flags = %#x, dir_flags = %#x, "
lustre-release/lustre/lfsck/lfsck_engine.c:	CDEBUG(D_LFSCK, "LFSCK exit: oit_flags = %#x, dir_flags = %#x, "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: LFSCK assistant fail to query "
lustre-release/lustre/lfsck/lfsck_engine.c:				CDEBUG(D_LFSCK, "%s: LFSCK assistant fail to "
lustre-release/lustre/lfsck/lfsck_engine.c:				CDEBUG(D_LFSCK, "%s: LFSCK assistant fail to "
lustre-release/lustre/lfsck/lfsck_engine.c:				CDEBUG(D_LFSCK, "%s: LFSCK assistant fail to "
lustre-release/lustre/lfsck/lfsck_engine.c:		CDEBUG(D_LFSCK, "%s: LFSCK assistant unexpected LFSCK event: "
lustre-release/lustre/lfsck/lfsck_engine.c:	CDEBUG(D_LFSCK, "%s: %s LFSCK assistant thread start\n",
lustre-release/lustre/lfsck/lfsck_engine.c:		CDEBUG(D_LFSCK, "%s: LFSCK assistant fail to notify others "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: %s LFSCK assistant thread post\n",
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: LFSCK assistant notified "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: LFSCK assistant sync before "
lustre-release/lustre/lfsck/lfsck_engine.c:			CDEBUG(D_LFSCK, "%s: LFSCK assistant phase2 "
lustre-release/lustre/lfsck/lfsck_engine.c:				CDEBUG(D_LFSCK, "%s: LFSCK assistant unknown "
lustre-release/lustre/lfsck/lfsck_engine.c:		CDEBUG(D_LFSCK, "%s: LFSCK assistant failed to notify "
lustre-release/lustre/lfsck/lfsck_engine.c:	CDEBUG(D_LFSCK, "%s: LFSCK assistant sync before exit\n",
lustre-release/lustre/lfsck/lfsck_engine.c:	CDEBUG(D_LFSCK, "%s: LFSCK assistant synced before exit: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_engine.c:		CDEBUG(D_LFSCK, "%s: LFSCK assistant phase2 scan "
lustre-release/lustre/lfsck/lfsck_engine.c:	CDEBUG(D_LFSCK, "%s: %s LFSCK assistant thread exit: rc = %d\n",
lustre-release/lustre/lfsck/lfsck_striped_dir.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK set the master MDT-object of "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:	CDEBUG(D_LFSCK, "%s: record slave LMV EA for the striped directory "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:		CDEBUG(D_INFO,
lustre-release/lustre/lfsck/lfsck_striped_dir.c:			CDEBUG(D_LFSCK,
lustre-release/lustre/lfsck/lfsck_striped_dir.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK updated the %s LMV EA "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK notify LMV EA updated for the "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK set master LMV EA for the object "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:	CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant found bad name hash "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:		CDEBUG(D_LFSCK, "%s: namespace LFSCK repair the shard "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:			CDEBUG(D_LFSCK, "%s: cannot talk with MDT %x which "
lustre-release/lustre/lfsck/lfsck_striped_dir.c:		CDEBUG(D_LFSCK, "%s: namespace LFSCK assistant fail to handle "
lustre-release/lustre/ofd/ofd_fs.c:	CDEBUG(D_INODE, "%s: write last_objid "DOSTID": rc = %d\n",
lustre-release/lustre/ofd/ofd_lvb.c:	CDEBUG(D_DLMTRACE, "res: "DFID" initial lvb size: %llu, "
lustre-release/lustre/ofd/ofd_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb size: "
lustre-release/lustre/ofd/ofd_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb mtime: "
lustre-release/lustre/ofd/ofd_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb atime: "
lustre-release/lustre/ofd/ofd_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb ctime: "
lustre-release/lustre/ofd/ofd_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb blocks: "
lustre-release/lustre/ofd/ofd_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb size from disk: "
lustre-release/lustre/ofd/ofd_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb mtime from disk: "
lustre-release/lustre/ofd/ofd_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb atime from disk: "
lustre-release/lustre/ofd/ofd_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb ctime from disk: "
lustre-release/lustre/ofd/ofd_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb blocks from disk: "
lustre-release/lustre/ofd/ofd_dev.c:		CDEBUG(D_CONFIG, "pass param %s down the stack.\n",
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_INFO, "object init, fid = "DFID"\n",
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_INFO, "object free, fid = "DFID"\n",
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_OTHER, "ost lock [%llu,%llu], lh=%p\n", begin, end, &lh);
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_OTHER, "extents count %u\n", fiemap->fm_mapped_extents);
lustre-release/lustre/ofd/ofd_dev.c:			CDEBUG(D_OTHER, "ost lock [%llu,%llu]\n",
lustre-release/lustre/ofd/ofd_dev.c:		CDEBUG(D_OTHER, "ost lock [%llu,%llu]\n",
lustre-release/lustre/ofd/ofd_dev.c:		CDEBUG(D_INODE, "get FIEMAP of object "DFID"\n", PFID(fid));
lustre-release/lustre/ofd/ofd_dev.c:		CDEBUG(D_HA, "%s: LAST FID is "DFID"\n", ofd_name(ofd),
lustre-release/lustre/ofd/ofd_dev.c:			CDEBUG(D_INODE, DFID": get layout version: %u\n",
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_HA, "%s: after destroy: set last_id to "DOSTID"\n",
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_INFO, "ofd_create("DOSTID")\n", POSTID(&oa->o_oi));
lustre-release/lustre/ofd/ofd_dev.c:			CDEBUG(D_HA,
lustre-release/lustre/ofd/ofd_dev.c:		CDEBUG(D_HA, "ofd_last_id() = %llu -> diff = %lld\n",
lustre-release/lustre/ofd/ofd_dev.c:				CDEBUG(D_HA, "%s: failed to acquire grant "
lustre-release/lustre/ofd/ofd_dev.c:			CDEBUG(D_HA, "%s: precreate FID "DOSTID" is over "
lustre-release/lustre/ofd/ofd_dev.c:			CDEBUG(D_HA, "%s: reserve %d objects in group %#llx"
lustre-release/lustre/ofd/ofd_dev.c:				CDEBUG(D_HA, "%s: Slow creates, %d/%lld objects"
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_HA, "%s: Destroy object "DOSTID" count %d\n", ofd_name(ofd),
lustre-release/lustre/ofd/ofd_dev.c:			CDEBUG(D_INODE,
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_INODE, "calling punch for object "DFID", valid = %#llx"
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_RPCTRACE, "Prolong locks for req %p with x%llu"
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_DLMTRACE, "%s: refreshed %u locks timeout for req %p\n",
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_DLMTRACE,
lustre-release/lustre/ofd/ofd_dev.c:	CDEBUG(D_DLMTRACE, "%s: refreshed %u locks timeout for req %p.\n",
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_HA, "%s: Received MDS connection for group %u\n",
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_HA,
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_HA, "%s: get connection from MDS %d\n", obd->obd_name,
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_HA, "%s: recovery is over\n", ofd_name(ofd));
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_IOCTL, "invalid export %p\n", exp);
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_IOCTL, "invalid client export %p\n", exp);
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_SUPER | D_CACHE,
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_CACHE, "%llu blocks: %llu free, %llu avail; "
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_HA, "%s: Destroy object "DFID"\n", ofd_name(ofd), PFID(fid));
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_INODE, "%s: destroying non-existent object "DFID"\n",
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_INFO, "ofd_create("DOSTID")\n", POSTID(&oa->o_oi));
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_HA,
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_IOCTL, "handling ioctl cmd %#x\n", cmd);
lustre-release/lustre/ofd/ofd_obd.c:		CDEBUG(D_RPCTRACE, "syncing ost %s\n", obd->obd_name);
lustre-release/lustre/ofd/ofd_obd.c:	CDEBUG(D_INFO, "write 1 page synchronously for checking io rc %d\n",
lustre-release/lustre/ofd/ofd_io.c:			CDEBUG(D_LFSCK, "%s: fail to verify OST local stored "
lustre-release/lustre/ofd/ofd_io.c:			CDEBUG(D_LFSCK, "%s: fail to verify the client given "
lustre-release/lustre/ofd/ofd_io.c:			CDEBUG(D_LFSCK, "%s: both the client given PFID and "
lustre-release/lustre/ofd/ofd_io.c:			CDEBUG(D_LFSCK, "%s: fixed the staled OST PFID xattr "
lustre-release/lustre/ofd/ofd_io.c:			CDEBUG(D_LFSCK, "%s: fail to fix the OST PFID xattr "
lustre-release/lustre/ofd/ofd_io.c:	CDEBUG(D_INODE, DFID " verify layout version: %u vs. %u/%u, rc: %d\n",
lustre-release/lustre/ofd/ofd_io.c:	CDEBUG(D_INODE, "export %p soft sync count is reset\n", ossc->ossc_exp);
lustre-release/lustre/ofd/ofd_io.c:		CDEBUG(D_INODE, "retry after force commit, retries:%d\n",
lustre-release/lustre/ofd/ofd_objects.c:		CDEBUG(D_INODE, "Version mismatch %#llx != %#llx\n",
lustre-release/lustre/ofd/ofd_objects.c:	CDEBUG(D_OTHER, "Sub %d from %d for "DFID", th_sync %d\n",
lustre-release/lustre/ofd/ofd_objects.c:	CDEBUG(D_OTHER, "Add %d to %d for "DFID", th_sync %d\n",
lustre-release/lustre/ofd/ofd_objects.c:			CDEBUG(D_INODE, "object %#llx/%#llx exists: "
lustre-release/lustre/ofd/ofd_objects.c:	CDEBUG(D_OTHER, "%s: create new object "DFID" nr %d\n",
lustre-release/lustre/ofd/ofd_objects.c:	CDEBUG((objects == 0 && rc == 0) ? D_ERROR : D_OTHER,
lustre-release/lustre/ofd/ofd_objects.c:		CDEBUG(D_INODE, DFID": OST("DFID") layout version %u -> %u\n",
lustre-release/lustre/mgs/mgs_nids.c:		CDEBUG(D_MGS, "fsname %s, entry size %d, pages %d/%d/%d/%d.\n",
lustre-release/lustre/mgs/mgs_nids.c:	CDEBUG(D_MGS, "Read IR logs %s return with %d, version %llu\n",
lustre-release/lustre/mgs/mgs_nids.c:		CDEBUG(D_MGS, "IR: current version is %llu\n",
lustre-release/lustre/mgs/mgs_nids.c:	CDEBUG(D_MGS, "Revoke recover lock of %s completed after %lld.%09lds\n",
lustre-release/lustre/mgs/mgs_nids.c:		CDEBUG(D_MGS, "%s woken up, phase is %d\n",
lustre-release/lustre/mgs/mgs_nids.c:		CDEBUG(D_MGS, "Try to revoke recover lock of %s\n",
lustre-release/lustre/mgs/mgs_nids.c:	CDEBUG(D_MGS, "Reading IR log %s bufsize %ld.\n",
lustre-release/lustre/mgs/mgs_nids.c:	CDEBUG(D_MGS, "change fsr state of %s from %s to %s\n",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Skipping backup file %.*s\n",
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_INFO, "cmd %x %s %s\n", lcfg->lcfg_command,
lustre-release/lustre/mgs/mgs_llog.c:                CDEBUG(D_MGS, "OST index for %s is %u (%s)\n",
lustre-release/lustre/mgs/mgs_llog.c:                CDEBUG(D_MGS, "MDT index is %u\n", index);
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_INFO, "get_db = %d\n", rc);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Created new db: rc = %d\n", rc);
lustre-release/lustre/mgs/mgs_llog.c:                        CDEBUG(D_MGS, "Server %s updating index %d\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "Set index for %s to %d\n", mti->mti_svname,
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_ERROR, "Unhandled lrh_type: %#x\n", rec->lrh_type);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_ERROR, "Insane cfg\n");
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Matched rec %u marker %d flag %x %s %s\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "mgs check %s/%s/%s\n", logname, devname, comment);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_ERROR, "%s: mgs check %s/%s failed: rc = %d\n",
lustre-release/lustre/mgs/mgs_llog.c:                CDEBUG(D_MGS, "Changing rec %u marker %d %x->%x: %s %s\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "modify %s/%s/%s fl=%x\n", logname, devname, comment,
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "lcfg %s %#x %s %s %s %s\n", cfgname,
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS,
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "add nid %s with uuid %s, "
lustre-release/lustre/mgs/mgs_llog.c:				CDEBUG(D_MGS, "add nid %s for failover %s\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "Copied idx=%d, rc=%d, len=%d, cmd %x %s %s\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "Skipped idx=%d, rc=%d, len=%d, cmd %x %s %s\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "Replace NIDs for %s in %s\n", devname, logname);
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Device name %s without fsname\n",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Device name %s with wrong index\n",
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Config llog Name=%s, Record Index=%u, "
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Config llog Name=%s, Invalid config file.",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Skip idx=%d, rc=%d, len=%d, "
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Skip idx=%d, rc=%d, len=%d, "
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "Copied idx=%d, rc=%d, len=%d, cmd %x %s %s\n",
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "%s: Clear config log %s\n",
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Changing log %s\n", dirent->mde_name);
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "steal llog re = %d\n", rc);
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_MGS, "Writing lmv(%s) log for %s\n", lmvname,logname);
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_MGS, "Writing lov(%s) log for %s\n", lovname, logname);
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "add nid %s for failover uuid %s, "
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_MGS, "adding mdc for %s to log %s:lmv(%s)\n",
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "add nid %s for mdt\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "adding osp index %d to %s\n", mti->mti_stripe_index,
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "add nid %s for mdt\n",
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_MGS, "writing new mdt %s\n", mti->mti_svname);
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_INFO, "adding osc for %s to log %s\n",
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "add nid %s\n",
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_MGS, "writing new ost %s\n", mti->mti_svname);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "global '%s' removed\n", sys);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "global '%s' val=%s\n", sys, tmp);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "global '%s' removed\n", quota);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "global '%s'\n", quota);
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "next param '%s'\n", ptr);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Adding failnode with param %s\n",
lustre-release/lustre/mgs/mgs_llog.c:        CDEBUG(D_MGS, "next param '%s'\n", ptr);
lustre-release/lustre/mgs/mgs_llog.c:                        CDEBUG(D_MGS, "Adding failnode\n");
lustre-release/lustre/mgs/mgs_llog.c:                CDEBUG(D_MGS, "lov param %s\n", ptr);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "%.3s param %s\n", ptr, ptr + 4);
lustre-release/lustre/mgs/mgs_llog.c:                CDEBUG(D_MGS, "%.3s param %s\n", ptr, ptr + 4);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "%.3s param %s\n", ptr, ptr + 4);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "Update params for %s\n", mti->mti_svname);
lustre-release/lustre/mgs/mgs_llog.c:                CDEBUG(D_MGS, "remaining string: '%s', param: '%s'\n",
lustre-release/lustre/mgs/mgs_llog.c:				CDEBUG(D_MGS, "Removing log %s\n",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Unknown cfg marker entry with %d "
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Unknown cfg pool (%x) entry with %d "
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "Fork the config-log from %s to %s\n",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Skip invalid configuration file %s\n",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Fail to locate file %s: rc = %d\n",
lustre-release/lustre/mgs/mgs_llog.c:				CDEBUG(D_MGS,
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Fail to fork %s: rc = %d\n",
lustre-release/lustre/mgs/mgs_llog.c:			CDEBUG(D_MGS, "Fail to erase old %s: rc = %d\n",
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "%s don't contain an index\n", mti->mti_svname);
lustre-release/lustre/mgs/mgs_llog.c:		CDEBUG(D_MGS, "%s is seen as a file system name\n", mti->mti_svname);
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "set_conf_param fs='%s' device='%s' param='%s'\n",
lustre-release/lustre/mgs/mgs_llog.c:	CDEBUG(D_MGS, "set_param2 fs='%s' device='%s' param='%s'\n",
lustre-release/lustre/mgs/mgs_handler.c:		CDEBUG(D_MGS, "fs: %s index: %d is ready to reconnect.\n",
lustre-release/lustre/mgs/mgs_handler.c:	CDEBUG(D_MGS, "fs: %s index: %d is registered to MGS.\n",
lustre-release/lustre/mgs/mgs_handler.c:		CDEBUG(D_MGS, "Server %s is running on %s\n",
lustre-release/lustre/mgs/mgs_handler.c:                CDEBUG(D_MGS, "updating %s, index=%d\n", mti->mti_svname,
lustre-release/lustre/mgs/mgs_handler.c:	CDEBUG(D_MGS, "replying with %s, index=%d, rc=%d\n", mti->mti_svname,
lustre-release/lustre/mgs/mgs_handler.c:        CDEBUG(D_IOCTL, "handling ioctl cmd %#x\n", cmd);
lustre-release/lustre/mgs/mgs_handler.c:	CDEBUG(D_INFO, "MGS %s started\n", obd->obd_name);
lustre-release/lustre/mgs/mgs_handler.c:	CDEBUG(D_INFO, "object init, fid = "DFID"\n",
lustre-release/lustre/mdt/mdt_reint.c:	CDEBUG(D_INODE, "FID "DFID" version is %#llx\n",
lustre-release/lustre/mdt/mdt_reint.c:		CDEBUG(D_INODE, "Version mismatch %#llx != %#llx\n",
lustre-release/lustre/mdt/mdt_reint.c:			CDEBUG(D_INFO, "%s: name "DNAME" cannot find "DFID"\n",
lustre-release/lustre/mdt/mdt_reint.c:		CDEBUG(D_INFO, "%s: name "DNAME": "DFID" is on another MDT\n",
lustre-release/lustre/mdt/mdt_reint.c:		CDEBUG(D_INFO, "%s: "DFID" does not exist.\n",
lustre-release/lustre/mdt/mdt_reint.c:			CDEBUG(D_INFO, "link target "DNAME" existed!\n",
lustre-release/lustre/mdt/mdt_reint.c:			CDEBUG(D_INFO, "skip parent "DFID", reovke "DNAME"\n",
lustre-release/lustre/mdt/mdt_reint.c:					CDEBUG(D_INFO, "skip stripe "DFID
lustre-release/lustre/mdt/mdt_reint.c:				CDEBUG(D_INFO,
lustre-release/lustre/mdt/mdt_reint.c:		CDEBUG(D_INFO, "lock "DFID":"DNAME"\n",
lustre-release/lustre/mdt/mdt_reint.c:			CDEBUG(D_INFO, DFID" doesn't exist, skip "DNAME"\n",
lustre-release/lustre/mdt/mdt_reint.c:			CDEBUG(D_INFO, "busy lock on "DFID" "DNAME"\n",
lustre-release/lustre/mdt/mdt_reint.c:	CDEBUG(D_INODE, "migrate "DFID"/"DNAME" to "DFID"\n", PFID(rr->rr_fid1),
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_OTHER, "%s is in nosquash_nids list\n",
lustre-release/lustre/mdt/mdt_lib.c:	CDEBUG(D_OTHER, "squash req from %s, (%d:%d/%x)=>(%d:%d/%x)\n",
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_SEC, "local client %s: auth uid %u "
lustre-release/lustre/mdt/mdt_lib.c:				CDEBUG(D_SEC,
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_SEC, "mdt blocked setuid attempt (%u -> %u) from %s\n",
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_SEC, "mdt blocked setgid attempt (%u:%u/%u:%u -> %u) "
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_SEC, "local client %s: auth uid %u "
lustre-release/lustre/mdt/mdt_lib.c:			CDEBUG(D_SEC, "Deny access without identity: uid %u\n",
lustre-release/lustre/mdt/mdt_lib.c:                CDEBUG(D_SEC, "mdt blocked setuid attempt (%u -> %u) from %s\n",
lustre-release/lustre/mdt/mdt_lib.c:                CDEBUG(D_SEC, "mdt blocked setgid attempt (%u:%u/%u:%u -> %u) "
lustre-release/lustre/mdt/mdt_lib.c:				CDEBUG(D_SEC, "Deny access without identity: "
lustre-release/lustre/mdt/mdt_lib.c:	CDEBUG(level, "objid "DOSTID", magic 0x%08X, pattern %#X\n",
lustre-release/lustre/mdt/mdt_lib.c:	CDEBUG(level, "stripe_size=0x%x, stripe_count=0x%x\n",
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(level, "stripe %u idx %u subobj "DOSTID"\n",
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG_LIMIT(level,
lustre-release/lustre/mdt/mdt_lib.c:	CDEBUG(level,
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(level, "idx %u subobj "DFID"\n", i, PFID(&fid));
lustre-release/lustre/mdt/mdt_lib.c:	CDEBUG(D_INFO, "Shrink to md_size = %d cookie/acl_size = %d\n",
lustre-release/lustre/mdt/mdt_lib.c:                CDEBUG(D_INFO, "Enlarge reply buffer, need extra %d bytes\n",
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_INFO, "Enlarge reply ACL buffer to %d bytes\n",
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_INFO, "not running in a request/reply context\n");
lustre-release/lustre/mdt/mdt_lib.c:		CDEBUG(D_INFO, "Unknown attr bits: %#llx\n", in);
lustre-release/lustre/mdt/mdt_lib.c:                CDEBUG(D_INFO, "no xattr data supplied\n");
lustre-release/lustre/mdt/mdt_lib.c:			CDEBUG(D_SEC,
lustre-release/lustre/mdt/mdt_lib.c:			CDEBUG(D_SEC,
lustre-release/lustre/mdt/mdt_hsm.c:	CDEBUG(D_HSM, "Progress on "DFID": len=%llu : rc = %d\n",
lustre-release/lustre/mdt/mdt_hsm.c:		CDEBUG(D_HSM, "Copytool progress on "DFID" failed : rc = %d; %s.\n",
lustre-release/lustre/mdt/mdt_hsm.c:		CDEBUG(D_HSM, "Finished "DFID" : rc = %d; cancel cookie=%#llx\n",
lustre-release/lustre/mdt/mdt_hsm.c:		CDEBUG(D_HSM, "Incompatible masks provided (set %#llx"
lustre-release/lustre/mdt/mdt_hsm.c:		CDEBUG(D_HSM, "Incompatible masks provided (set %#llx"
lustre-release/lustre/mdt/mdt_hsm.c:			CDEBUG(D_HSM, "Could not set an archive number for "
lustre-release/lustre/mdt/mdt_hsm.c:			CDEBUG(D_HSM, "archive id %u from old clients "
lustre-release/lustre/mdt/mdt_hsm.c:		CDEBUG(D_HSM, "Incompatible flag change on "DFID
lustre-release/lustre/mdt/mdt_recovery.c:		CDEBUG(D_INFO, "More than one transaction\n");
lustre-release/lustre/mdt/mdt_recovery.c:		CDEBUG(D_HA, "Stealing %d locks from rs %p x%lld.t%lld"
lustre-release/lustre/mdt/mdt_lproc.c:	CDEBUG(D_CONFIG, "%s: identity upcall set to %s\n", mdt_obd_name(mdt),
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INFO, "nodemap fileset is %s\n", nodemap_fileset);
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INFO, "Getting fileset %s\n", fileset);
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_SUPER | D_CACHE, "blocks cached %llu granted %llu"
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_CACHE, "%llu blocks: %llu free, %llu avail; "
lustre-release/lustre/mdt/mdt_handler.c:				CDEBUG(D_INODE, "%s: grow the "DFID
lustre-release/lustre/mdt/mdt_handler.c:			CDEBUG(D_INODE, "%s: client prepared buffer size %d "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INODE, DFID": nlink=%d, mode=%o, valid=%#llx\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_VFSTRACE, DFID": returning size %llu\n",
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_INODE, "after getattr rc = %d, ma_valid = %#llx ma_lmm=%p\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INFO, "%s: RPC from %s: does not need LOVEA.\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(rc == -ENOENT ? D_OTHER : D_ERROR,
lustre-release/lustre/mdt/mdt_handler.c:				CDEBUG(D_INODE, "%s: Read shorter symlink %d "
lustre-release/lustre/mdt/mdt_handler.c:			/* If the total CDEBUG() size is larger than a page, it
lustre-release/lustre/mdt/mdt_handler.c:			CDEBUG(D_INODE, "symlink dest %s%.*s, len = %d\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INODE, "changing the max MD size to %u\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INODE, "partial getattr_name child_fid = "DFID", "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INODE, "getattr with lock for "DFID"/"DNAME", "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INODE, "getattr with lock for "DFID"/"DFID", "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_OTHER, "object "DFID" open, skip\n",
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_INFO, "Allocate object for "DFID"\n", PFID(f));
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_INFO, "Find object for "DFID"\n", PFID(f));
lustre-release/lustre/mdt/mdt_handler.c:			CDEBUG(D_INODE, "ldlm_cli_cancel: %d\n", rc);
lustre-release/lustre/mdt/mdt_handler.c:			CDEBUG(D_INFO, "%s: "DFID" convert PDO lock to"
lustre-release/lustre/mdt/mdt_handler.c:                                CDEBUG(D_HA, "found sync-lock,"
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_INFO, DFID "got layout change request from client: "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INFO, "%s: layout_size %d\n",
lustre-release/lustre/mdt/mdt_handler.c:        CDEBUG(D_INFO, "object init, fid = "DFID"\n",
lustre-release/lustre/mdt/mdt_handler.c:        CDEBUG(D_INFO, "object free, fid = "DFID"\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_RPCTRACE, "%s: cli %s supports cksum type %x, return "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_RPCTRACE, "%s: cli %s does not support "
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_IOCTL, "server disconnect error: rc = %d\n", rc);
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_IOCTL, "path get "DFID" from %llu #%d\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_INFO, "%s: "DFID" is invalid, f_seq should be >= %#llx"
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_IOCTL, "cannot find "DFID": rc = %d\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_IOCTL, "nonlocal object "DFID": rc = %d\n",
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_INFO, "fid "DFID", path %s recno %#llx linkno %u\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_IOCTL, "No GETINFO key\n");
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_IOCTL, "%s: cannot get RMF_GETINFO_VALLEN buffer\n",
lustre-release/lustre/mdt/mdt_handler.c:		CDEBUG(D_IOCTL, "%s: cannot get get-info RPC out buffer\n",
lustre-release/lustre/mdt/mdt_handler.c:	CDEBUG(D_IOCTL, "getting version for "DFID"\n", PFID(fid));
lustre-release/lustre/mdt/mdt_handler.c:        CDEBUG(D_IOCTL, "handling ioctl cmd %#x\n", cmd);
lustre-release/lustre/mdt/mdt_identity.c:        CDEBUG(D_INFO, "The upcall is: '%s'\n", cache->uc_upcall);
lustre-release/lustre/mdt/mdt_identity.c:		CDEBUG(D_HA, "%s: invoked upcall %s %s %s, time %ldus\n",
lustre-release/lustre/mdt/mdt_identity.c:	CDEBUG(D_OTHER, "parse mdt identity@%p: %d:%d, ngroups %u, nperms %u\n",
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_INODE, "transno = %llu, last_committed = %llu\n",
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_HA, "%s: transno = %llu < last_transno = %llu\n",
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_DENTRY, DFID " Change mfd open_flags %#llo -> %#llo.\n",
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_INODE, "after open, ma_valid bit = %#llx lmm_size = %d\n",
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_HA, "delete orphan mfd = %p, fid = "DFID", "
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_HA, "orphan mfd not found, fid = "DFID", "
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_HA, "Store old cookie %#llx in new mfd\n",
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_INODE, "This is reconstruct open: disp=%#llx, result=%d\n",
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INODE, "normal open:"DFID" lease count: %d, lm: %d\n",
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_INODE, "%s: Requested bits lock:"DFID ", ibits = %#llx/%#llx"
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INODE, "Will create layout, get EX layout lock:"DFID
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INODE, "acq_lease "DFID": openers: %d, want: %d\n",
lustre-release/lustre/mdt/mdt_open.c:				CDEBUG(D_INODE, "Fail to find parent "DFID
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INFO, "%s: "DFID" is on remote MDT.\n",
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_INODE, "Fail to find parent "DFID
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_INODE, "I am going to open "DFID"/("DNAME"->"DFID") "
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INFO, "No object(1), continue as regular open.\n");
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_INFO, "no object for "DFID": %d\n",
lustre-release/lustre/mdt/mdt_open.c:				CDEBUG(D_CACHE,
lustre-release/lustre/mdt/mdt_open.c:				CDEBUG(D_CACHE,
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_HSM, DFID" data_version mismatches: "
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INODE,
lustre-release/lustre/mdt/mdt_open.c:	CDEBUG(D_INODE, "%s: %sclosing file handle "DFID" with intent: %llx\n",
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_HSM, "%s: File " DFID " release failed: %d\n",
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_INODE,
lustre-release/lustre/mdt/mdt_open.c:			CDEBUG(D_INODE,
lustre-release/lustre/mdt/mdt_open.c:		CDEBUG(D_INODE, "no handle for file close: fid = "DFID
lustre-release/lustre/mdt/mdt_coordinator.c:	CDEBUG(level, "%s: HAL header: version %X count %d"
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(level, "%s %d: fid="DFID" dfid="DFID
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM,
lustre-release/lustre/mdt/mdt_coordinator.c:	CDEBUG(D_HSM, "%s: coordinator thread starting, pid=%d\n",
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM, "coordinator resumes\n");
lustre-release/lustre/mdt/mdt_coordinator.c:			CDEBUG(D_HSM, "Coordinator stops\n");
lustre-release/lustre/mdt/mdt_coordinator.c:			CDEBUG(D_HSM, "disable state, coordinator sleeps\n");
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM, "coordinator starts reading llog\n");
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM, "found %d requests to send\n",
lustre-release/lustre/mdt/mdt_coordinator.c:			CDEBUG(D_HSM, "no agent available, "
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM, "%s: coordinator thread exiting, process=%d,"
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM, "%s: coordinator thread started\n",
lustre-release/lustre/mdt/mdt_coordinator.c:			CDEBUG(D_INODE,
lustre-release/lustre/mdt/mdt_coordinator.c:	CDEBUG(D_HSM, "Progress received for fid="DFID" cookie=%#llx"
lustre-release/lustre/mdt/mdt_coordinator.c:		CDEBUG(D_HSM, "updating record: fid="DFID" cookie=%#llx action=%s "
lustre-release/lustre/mdt/mdt_coordinator.c:	CDEBUG(D_HSM, "fid="DFID" action=%s flags=%#llx"
lustre-release/lustre/mdt/mdt_coordinator.c:	CDEBUG(D_HSM, "%s: receive new policy: '%s'\n", mdt_obd_name(mdt),
lustre-release/lustre/mdt/mdt_coordinator.c:	CDEBUG(D_HSM, "%s: new policy: rm=%#llx add=%#llx set=%#llx\n",
lustre-release/lustre/mdt/mdt_hsm_cdt_agent.c:		CDEBUG(D_HSM, "agent %s registered for all archives\n",
lustre-release/lustre/mdt/mdt_hsm_cdt_agent.c:		CDEBUG(D_HSM, "agent %s registered for %d archives\n",
lustre-release/lustre/mdt/mdt_hsm_cdt_agent.c:	CDEBUG(D_HSM, "agent %s unregistration: %d\n", obd_uuid2str(uuid), rc);
lustre-release/lustre/mdt/mdt_hsm_cdt_agent.c:				CDEBUG(D_HSM, "%s: added HSM remove request "
lustre-release/lustre/mdt/mdt_hsm_cdt_agent.c:	CDEBUG(D_HSM, "Agent %s selected for archive %d\n", obd_uuid2str(&uuid),
lustre-release/lustre/mdt/mdt_hsm_cdt_agent.c:		CDEBUG(D_HSM, "Lost connection to agent '%s', unregistering\n",
lustre-release/lustre/mdt/mdt_som.c:		CDEBUG(D_INODE, DFID": Reading som attrs: "
lustre-release/lustre/mdt/mdt_som.c:	CDEBUG(D_INODE,
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_RPCTRACE, "Prolong DOM lock for req %p with x%llu\n",
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_DLMTRACE, "%s: refresh DOM lock for "DFID"\n",
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG_LIMIT(level,
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG_LIMIT(level,
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG_LIMIT(level,
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_INODE, "WRITE IO to stale object "DFID"\n",
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_INODE, "skip commit to stale object "DFID"\n",
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_INODE, "retry after force commit, retries:%d\n",
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_INODE, "calling punch for object "DFID", valid = %#llx"
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_DLMTRACE, "size %llu\n", res_lvb->lvb_size);
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_DLMTRACE, "Glimpse from the client owning lock\n");
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_INFO, DFID" has no composite layout",
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_INODE, DFID": layout version: %u\n",
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_INFO, "File size %llu, reply sizes %d/%d\n",
lustre-release/lustre/mdt/mdt_io.c:	CDEBUG(D_INFO, "Read %i (wanted %u) bytes from %llu\n", copied,
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_INFO, "Read-on-open is failed, rc = %d", rc);
lustre-release/lustre/mdt/mdt_io.c:		CDEBUG(D_DLMTRACE,
lustre-release/lustre/mdt/mdt_hsm_cdt_client.c:	CDEBUG(D_HSM, "fid="DFID" action=%s rq_flags=%#llx"
lustre-release/lustre/mdt/mdt_xattr.c:		CDEBUG(D_INFO, "Valid bits: %#llx\n",
lustre-release/lustre/mdt/mdt_xattr.c:	CDEBUG(D_INODE, "getxattr "DFID"\n", PFID(&info->mti_body->mbo_fid1));
lustre-release/lustre/mdt/mdt_xattr.c:		CDEBUG(D_INODE, "listxattr\n");
lustre-release/lustre/mdt/mdt_xattr.c:			CDEBUG(D_INFO, "listxattr failed: %d\n", rc);
lustre-release/lustre/mdt/mdt_xattr.c:	CDEBUG(D_INODE, "setxattr for "DFID": %s %s\n", PFID(rr->rr_fid1),
lustre-release/lustre/mdt/mdt_xattr.c:		CDEBUG(D_INFO, "valid bits: %#llx\n", valid);
lustre-release/lustre/mdt/mdt_hsm_cdt_requests.c:		CDEBUG(D_HSM, "%s fid="DFID" dfid="DFID
lustre-release/lustre/mdt/mdt_hsm_cdt_actions.c:	CDEBUG(D_HSM, "%slrh=[type=%X len=%d idx=%d] fid="DFID
lustre-release/lustre/mdt/mdt_hsm_cdt_actions.c:		CDEBUG(D_HSM, "%s: search %#llx, found %#llx\n",
lustre-release/lustre/mdt/mdt_hsm_cdt_actions.c:	CDEBUG(D_HSM, "llog successfully initialized, start from %lld\n",
lustre-release/lustre/mdt/mdt_hsm_cdt_actions.c:	CDEBUG(D_HSM, "show from cat %d index %d eof=%d\n",
lustre-release/lustre/mdt/mdt_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb size from disk: "
lustre-release/lustre/mdt/mdt_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb mtime from disk: "
lustre-release/lustre/mdt/mdt_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb atime from disk: "
lustre-release/lustre/mdt/mdt_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb ctime from disk: "
lustre-release/lustre/mdt/mdt_lvb.c:		CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb blocks from disk: "
lustre-release/lustre/mdt/mdt_lvb.c:		CDEBUG(D_INFO, "Skip LVB update, export is %s, obd is %s\n",
lustre-release/lustre/mdt/mdt_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb size: "
lustre-release/lustre/mdt/mdt_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb mtime: "
lustre-release/lustre/mdt/mdt_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb atime: "
lustre-release/lustre/mdt/mdt_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb ctime: "
lustre-release/lustre/mdt/mdt_lvb.c:			CDEBUG(D_DLMTRACE, "res: "DFID" updating lvb blocks: "
lustre-release/lustre/mdt/mdt_lvb.c:			CDEBUG_LIMIT(level, "%s: small buffer size %d for EA "
lustre-release/lustre/fid/fid_store.c:                CDEBUG(D_INFO, "%s: Space - "DRANGE"\n",
lustre-release/lustre/fid/fid_request.c:	CDEBUG_LIMIT(debug_mask, "%s: Allocated %s-sequence "DRANGE"]\n",
lustre-release/lustre/fid/fid_request.c:                        CDEBUG(D_INFO, "%s: New range - "DRANGE"\n",
lustre-release/lustre/fid/fid_request.c:	CDEBUG(D_INFO, "%s: Allocated sequence [%#llx]\n", seq->lcs_name,
lustre-release/lustre/fid/fid_request.c:		CDEBUG(D_INFO, "%s: New sequence [0x%16.16llx]\n",
lustre-release/lustre/fid/fid_request.c:	CDEBUG(D_INFO, "%s: Allocated FID "DFID"\n", seq->lcs_name,  PFID(fid));
lustre-release/lustre/fid/fid_handler.c:		CDEBUG(D_INFO, "%s: Detached sequence client\n", seq->lss_name);
lustre-release/lustre/fid/fid_handler.c:		CDEBUG(D_HA, "%s: Sequence controller is already "
lustre-release/lustre/fid/fid_handler.c:        CDEBUG(D_INFO, "%s: Attached sequence controller %s\n",
lustre-release/lustre/fid/fid_handler.c:			CDEBUG(D_HA, "%s: Can't allocate super-sequence:"
lustre-release/lustre/fid/fid_handler.c:	CDEBUG(D_INFO, "%s: Allocated meta-sequence " DRANGE"\n",
lustre-release/lustre/fid/lproc_fid.c:		CDEBUG(D_INFO, "%s: Space: " DRANGE "\n",
lustre-release/lustre/fid/lproc_fid.c:	CDEBUG(D_INFO, "%s: Width: %llu\n",
lustre-release/lustre/fid/lproc_fid.c:		CDEBUG(D_INFO, "%s: Space: " DRANGE "\n",
lustre-release/lustre/fid/lproc_fid.c:		CDEBUG(D_INFO, "%s: Sequence size: %llu\n", seq->lcs_name,
lustre-release/lustre/ptlrpc/sec_null.c:			CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/layout.c:                        CDEBUG(D_RPCTRACE, "Dump of %sfield %s follows\n",
lustre-release/lustre/ptlrpc/layout.c:                        CDEBUG(D_RPCTRACE, "Dump of swabbed field %s "
lustre-release/lustre/ptlrpc/layout.c:                        CDEBUG(D_RPCTRACE, "Dump of %sarray field %s, "
lustre-release/lustre/ptlrpc/layout.c:                        CDEBUG(D_RPCTRACE, "Dump of swabbed array field %s, "
lustre-release/lustre/ptlrpc/layout.c:			CDEBUG(D_RPCTRACE, "Field %s has no dumper function;"
lustre-release/lustre/ptlrpc/layout.c:	CDEBUG(D_RPCTRACE, "END REQ CAPSULE DUMP\n");
lustre-release/lustre/ptlrpc/layout.c:	CDEBUG(D_INFO, "Reply packed: %d, allocated: %d, field len %d -> %d\n",
lustre-release/lustre/ptlrpc/layout.c:	CDEBUG(D_SEC, "retrieved sepol %s\n", sepol);
lustre-release/lustre/ptlrpc/nodemap_handler.c:	CDEBUG(D_INFO, "GETting nodemap %s(p=%p) : new refcount %d\n",
lustre-release/lustre/ptlrpc/nodemap_handler.c:	CDEBUG(D_INFO, "PUTting nodemap %s(p=%p) : new refcount %d\n",
lustre-release/lustre/ptlrpc/nodemap_handler.c:		CDEBUG(D_INFO, "found nid %s\n", libcfs_nid2str(nid));
lustre-release/lustre/ptlrpc/nodemap_handler.c:		CDEBUG(D_INFO, "%s: nodemap null on export %s (at %s)\n",
lustre-release/lustre/ptlrpc/gss/gss_krb5_mech.c:	CDEBUG(D_SEC, "successfully imported rfc1964 context\n");
lustre-release/lustre/ptlrpc/gss/gss_krb5_mech.c:	CDEBUG(D_SEC, "successfully imported v2 context\n");
lustre-release/lustre/ptlrpc/gss/gss_krb5_mech.c:	CDEBUG(D_SEC, "successfully copied reverse context\n");
lustre-release/lustre/ptlrpc/gss/gss_cli_upcall.c:		CDEBUG(D_SEC, "ctx %p(%u->%s) not uptodate, "
lustre-release/lustre/ptlrpc/gss/gss_mech_switch.c:	CDEBUG(D_SEC, "register %s mechanism\n", gm->gm_name);
lustre-release/lustre/ptlrpc/gss/gss_mech_switch.c:	CDEBUG(D_SEC, "Unregister %s mechanism\n", gm->gm_name);
lustre-release/lustre/ptlrpc/gss/gss_mech_switch.c:	CDEBUG(D_SEC, "deleting %p\n", *context_handle);
lustre-release/lustre/ptlrpc/gss/sec_gss.c:        CDEBUG(D_SEC, "create %s%s@%p\n", (svcctx ? "reverse " : ""),
lustre-release/lustre/ptlrpc/gss/sec_gss.c:	CDEBUG(D_SEC, "%s@%p: create ctx %p(%u->%s)\n",
lustre-release/lustre/ptlrpc/gss/sec_gss.c:        CDEBUG(D_SEC, "prepare gss error notify(0x%x/0x%x) to %s\n",
lustre-release/lustre/ptlrpc/gss/sec_gss.c:        CDEBUG(D_SEC, "processing gss init(%d) request from %s\n", gw->gw_proc,
lustre-release/lustre/ptlrpc/gss/sec_gss.c:                CDEBUG(D_SEC, "invalid gss context handle for destroy.\n");
lustre-release/lustre/ptlrpc/gss/gss_pipefs.c:        CDEBUG(D_SEC, "do gc on sec %s@%p\n", sec->ps_policy->sp_name, sec);
lustre-release/lustre/ptlrpc/gss/gss_svc_upcall.c:                CDEBUG(D_SEC, "reverse svcctx %p (rsc %p) expire soon\n",
lustre-release/lustre/ptlrpc/gss/gss_svc_upcall.c:                CDEBUG(D_SEC, "reverse svcctx %p (rsc %p) update seq to %u\n",
lustre-release/lustre/ptlrpc/gss/gss_svc_upcall.c:		CDEBUG(D_SEC, "cache_check return ENOENT, drop\n");
lustre-release/lustre/ptlrpc/gss/gss_svc_upcall.c:		CDEBUG(D_SEC, "cache_check is good\n");
lustre-release/lustre/ptlrpc/gss/gss_svc_upcall.c:        CDEBUG(D_SEC, "server create rsc %p(%u->%s)\n",
lustre-release/lustre/ptlrpc/gss/gss_svc_upcall.c:			CDEBUG(D_SEC, "create rsc with idx %#llx\n",
lustre-release/lustre/ptlrpc/gss/gss_null_mech.c:		CDEBUG(D_SEC, "Invalid input buffer for null context\n");
lustre-release/lustre/ptlrpc/gss/gss_null_mech.c:	CDEBUG(D_SEC, "successfully imported null context\n");
lustre-release/lustre/ptlrpc/gss/gss_null_mech.c:	CDEBUG(D_SEC, "successfully copied reverse null context\n");
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:	CDEBUG(D_SEC, "ctx %p: start timer %llds\n", ctx, timeout);
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:        CDEBUG(D_SEC, "ctx %p, key %p\n", ctx, gctx_kr->gck_key);
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:	CDEBUG(D_SEC, "destroying ctx %p\n", ctx);
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:        CDEBUG(D_SEC, "destroy %s@%p\n", sec->ps_policy->sp_name, sec);
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:        CDEBUG(D_SEC, "requesting key for %s\n", desc);
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:        CDEBUG(D_SEC, "obtained key %08x for %s\n", key->serial, desc);
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:			CDEBUG(D_SEC, "installed key %p <-> ctx %p (sec %p)\n",
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:			CDEBUG(D_SEC, "No more key found for current user\n");
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:	CDEBUG(D_SEC, "sec %p(%d, nctx %d), uid %d, grace %d, force %d\n",
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:	CDEBUG(D_SEC, "key %p instantiated, ctx %p\n", key,
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:                CDEBUG(D_SEC, "update too soon: key %p(%x) flags %lx\n",
lustre-release/lustre/ptlrpc/gss/gss_keyring.c:        CDEBUG(D_SEC, "destroy key %p\n", key);
lustre-release/lustre/ptlrpc/gss/gss_sk_mech.c:	CDEBUG(D_SEC, "successfully imported sk%s context\n",
lustre-release/lustre/ptlrpc/gss/gss_sk_mech.c:	CDEBUG(D_SEC, "successfully copied reverse sk context\n");
lustre-release/lustre/ptlrpc/gss/gss_sk_mech.c:		CDEBUG(D_SEC, "Token received too short, expected %d "
lustre-release/lustre/ptlrpc/gss/gss_sk_mech.c:		CDEBUG(D_SEC, "Failed to create checksum to validate\n");
lustre-release/lustre/ptlrpc/gss/gss_sk_mech.c:		CDEBUG(D_SEC, "Token received too short, expected %d "
lustre-release/lustre/ptlrpc/sec_bulk.c:		CDEBUG(D_SEC, "released %ld pages, %ld left\n",
lustre-release/lustre/ptlrpc/sec_bulk.c:	CDEBUG(D_SEC, "add %d pages to total %lu\n", npages,
lustre-release/lustre/ptlrpc/sec_bulk.c:	CDEBUG(D_SEC, "added %d pages into pools\n", npages);
lustre-release/lustre/ptlrpc/sec_bulk.c:		CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/nrs_orr.c:		CDEBUG(D_CONFIG, "%s: The %s NRS policy was registered on a "
lustre-release/lustre/ptlrpc/nrs_orr.c:			CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_orr.c:			CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_orr.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_orr.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nodemap_idmap.c:		CDEBUG(D_INFO, "Insert a new idmap %d:%d\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "%p %s: changing import state from %s to %s\n",
lustre-release/lustre/ptlrpc/import.c:	CDEBUG(D_HA, "setting import %s INVALID\n", obd2cli_tgt(imp->imp_obd));
lustre-release/lustre/ptlrpc/import.c:				CDEBUG(D_HA, "import %s@%s for %s not "
lustre-release/lustre/ptlrpc/import.c:                CDEBUG(D_HA, "%s: import %p already %s (conn %u, was %u): %s\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_RPCTRACE, "Sleeping %llds for inflight to error out\n",
lustre-release/lustre/ptlrpc/import.c:	CDEBUG(D_HA, "%s: waking up pinger s:%s\n", obd2cli_tgt(imp->imp_obd),
lustre-release/lustre/ptlrpc/import.c:	CDEBUG(D_HA, "%s: recovery started, waiting %u seconds\n",
lustre-release/lustre/ptlrpc/import.c:	CDEBUG(D_HA, "%s: recovery finished s:%s\n", obd2cli_tgt(imp->imp_obd),
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "%s: connect to NID %s last attempt %lld\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "%s: tried all connections, increasing latency "
lustre-release/lustre/ptlrpc/import.c:                        CDEBUG(D_HA, "%s: Connection changing to"
lustre-release/lustre/ptlrpc/import.c:        CDEBUG(D_HA, "%s: import %p using connection %s/%s\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "%s: Resetting ns_connect_flags to server "
lustre-release/lustre/ptlrpc/import.c:	CDEBUG(D_HA, "%s: connect to target with instance %u\n",
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_HA, "connected to replayable target: %s\n",
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_HA, "connect to %s during recovery\n",
lustre-release/lustre/ptlrpc/import.c:				CDEBUG(level,
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_HA, "reconnected to %s@%s after partition\n",
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_HA, "%s: reconnected but import is invalid; "
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_HA, "%s: reconnected to %s during replay\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "evicted/aborted by %s@%s during recovery;"
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "recovery of %s on %s failed (%d)\n",
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_WARNING,
lustre-release/lustre/ptlrpc/import.c:			CDEBUG(D_HA, "%s: LAST_REPLAY message error: %d, "
lustre-release/lustre/ptlrpc/import.c:        CDEBUG(D_HA, "thread invalidate import %s to %s@%s\n",
lustre-release/lustre/ptlrpc/import.c:                CDEBUG(D_HA, "evicted from %s@%s; invalidating\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG(D_HA, "replay requested by %s\n",
lustre-release/lustre/ptlrpc/import.c:		CDEBUG_LIMIT(imp->imp_was_idle ?
lustre-release/lustre/ptlrpc/import.c:	CDEBUG_LIMIT(imp->imp_idle_debug, "%s: disconnect after %llus idle\n",
lustre-release/lustre/ptlrpc/import.c:        CDEBUG(D_OTHER, "add %u to %p time=%lu v=%u (%u %u %u %u)\n",
lustre-release/lustre/ptlrpc/import.c:                CDEBUG(D_OTHER, "AT %p change: old=%u new=%u delta=%d "
lustre-release/lustre/ptlrpc/sec_plain.c:			CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/nodemap_storage.c:		CDEBUG(D_INFO, "removing old index, creating new one\n");
lustre-release/lustre/ptlrpc/nodemap_storage.c:	CDEBUG(D_INFO, "found config entry, nm_id %d type %d\n",
lustre-release/lustre/ptlrpc/nodemap_storage.c:		CDEBUG(D_INFO, "nodemap config changed inflight, old %llu, new %llu\n",
lustre-release/lustre/ptlrpc/nodemap_storage.c:		CDEBUG(D_INFO, "walked index, hashend %llx\n", ii->ii_hash_end);
lustre-release/lustre/ptlrpc/nodemap_storage.c:	CDEBUG(D_INFO, "reading nodemap log, name '%s', size = %u\n",
lustre-release/lustre/ptlrpc/sec_config.c:                        CDEBUG(D_CONFIG, "ignore the unmatched deletion\n");
lustre-release/lustre/ptlrpc/sec_config.c:                CDEBUG(D_SEC, "<%02d> from %x to %x, net %x, rpc %x\n", n,
lustre-release/lustre/ptlrpc/sec_config.c:	CDEBUG(D_SEC, "free sptlrpc conf %s\n", conf->sc_fsname);
lustre-release/lustre/ptlrpc/sec_config.c:        CDEBUG(D_SEC, "create sptlrpc conf %s\n", conf->sc_fsname);
lustre-release/lustre/ptlrpc/sec_config.c:	CDEBUG(D_SEC, "processing rule: %s.%s\n", target, param);
lustre-release/lustre/ptlrpc/sec_config.c:	CDEBUG(D_SEC, "obd %s\n", obd->u.cli.cl_target_uuid.uuid);
lustre-release/lustre/ptlrpc/llog_server.c:		CDEBUG(D_INFO, "%s: opening log %s\n", obd->obd_name, name);
lustre-release/lustre/ptlrpc/llog_server.c:		CDEBUG(D_WARNING, "%s: bad ctxt ID: idx=%d name=%s\n",
lustre-release/lustre/ptlrpc/llog_server.c:		CDEBUG(D_WARNING, "%s: no ctxt. group=%p idx=%d name=%s\n",
lustre-release/lustre/ptlrpc/llog_server.c:		CDEBUG(D_WARNING, "%s: bad ctxt ID: idx=%d\n",
lustre-release/lustre/ptlrpc/llog_server.c:		CDEBUG(D_WARNING, "%s: bad ctxt ID: idx=%d\n",
lustre-release/lustre/ptlrpc/llog_server.c:		CDEBUG(D_WARNING, "%s: bad ctxt ID: idx=%d\n",
lustre-release/lustre/ptlrpc/nrs_tbf.c:	CDEBUG(D_RPCTRACE, "TBF starts rule@%p rate %llu gen %llu\n",
lustre-release/lustre/ptlrpc/nrs_tbf.c:			CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_tbf.c:			CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_tbf.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_tbf.c:	CDEBUG(D_RPCTRACE, "NRS stop %s request from %s, seq: %llu\n",
lustre-release/lustre/ptlrpc/client.c:	CDEBUG(D_INFO, "%s -> %p\n", uuid->uuid, c);
lustre-release/lustre/ptlrpc/client.c:		CDEBUG(D_ADAPTTO,
lustre-release/lustre/ptlrpc/client.c:		CDEBUG((lustre_msg_get_flags(req->rq_reqmsg) & MSG_RESENT) ?
lustre-release/lustre/ptlrpc/client.c:		CDEBUG(D_ADAPTTO,
lustre-release/lustre/ptlrpc/client.c:		CDEBUG_LIMIT(imp->imp_idle_debug,
lustre-release/lustre/ptlrpc/client.c:	CDEBUG(D_INFO, "Client save versions [%#llx/%#llx]\n",
lustre-release/lustre/ptlrpc/client.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/client.c:			CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/client.c:	CDEBUG(D_RPCTRACE, "INTERRUPTED SET %p\n", set);
lustre-release/lustre/ptlrpc/client.c:		CDEBUG(D_RPCTRACE, "set %p going to sleep for %lld seconds\n",
lustre-release/lustre/ptlrpc/client.c:		CDEBUG(D_INFO, "%s: skip recheck: last_committed %llu\n",
lustre-release/lustre/ptlrpc/client.c:	CDEBUG(D_RPCTRACE, "%s: committing for last_committed %llu gen %d\n",
lustre-release/lustre/ptlrpc/client.c:		CDEBUG(D_HA, "resend bulk old x%llu new x%llu\n",
lustre-release/lustre/ptlrpc/nrs.c:	CDEBUG(D_INFO, "Unregistering policy %s from NRS core.\n",
lustre-release/lustre/ptlrpc/sec.c:	CDEBUG(D_SEC, "%s: registered\n", policy->sp_name);
lustre-release/lustre/ptlrpc/sec.c:	CDEBUG(D_SEC, "%s: unregistered\n", policy->sp_name);
lustre-release/lustre/ptlrpc/sec.c:				CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:	CDEBUG(D_SEC, "found delayed sec adapt expired, do it now\n");
lustre-release/lustre/ptlrpc/sec.c:	CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "req %p: flavor has changed %x -> %x\n",
lustre-release/lustre/ptlrpc/sec.c:	CDEBUG(D_SEC, "%s@%p: being destroied\n", sec->ps_policy->sp_name, sec);
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "%s %s: reverse sec using flavor %s\n",
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "%s %s: select security flavor %s\n",
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "import %s->%s: changing flavor %s -> %s\n",
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "import %s->%s netid %x: select flavor %s\n",
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "exp %p: just changed: %x->%x\n", exp,
lustre-release/lustre/ptlrpc/sec.c:			CDEBUG(D_SEC, "is good but not root(%d:%d:%d:%d:%d)\n",
lustre-release/lustre/ptlrpc/sec.c:			CDEBUG(D_SEC, "exp %p (%x|%x|%x): do delayed adapt\n",
lustre-release/lustre/ptlrpc/sec.c:			CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:				CDEBUG(D_SEC,
lustre-release/lustre/ptlrpc/sec.c:			CDEBUG(D_SEC, "mark middle expired\n");
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "exp %p (%x|%x|%x): %x not match middle\n", exp,
lustre-release/lustre/ptlrpc/sec.c:				CDEBUG(D_SEC, "exp %p (%x|%x|%x): match the oldest one (%lld)\n",
lustre-release/lustre/ptlrpc/sec.c:			CDEBUG(D_SEC, "mark oldest expired\n");
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "exp %p (%x|%x|%x): %x not match found\n",
lustre-release/lustre/ptlrpc/sec.c:		CDEBUG(D_SEC, "exp %p (%x|%x|%x): skip the last one\n",
lustre-release/lustre/ptlrpc/sec.c:			CDEBUG(D_SEC, "exp %p (%s): updated flavor %x->%x\n",
lustre-release/lustre/ptlrpc/connection.c:	CDEBUG(D_INFO, "conn=%p refcount %d to %s\n",
lustre-release/lustre/ptlrpc/connection.c:	CDEBUG(D_INFO, "PUT conn=%p refcount %d to %s\n",
lustre-release/lustre/ptlrpc/connection.c:	CDEBUG(D_INFO, "conn=%p refcount %d to %s\n",
lustre-release/lustre/ptlrpc/nrs_crr.c:		CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_crr.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/service.c:		CDEBUG(D_OTHER,
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_NET, "%s: Started, listening on portal %d\n",
lustre-release/lustre/ptlrpc/service.c:			CDEBUG(D_HA, "%s: Think about evicting %s from %lld\n",
lustre-release/lustre/ptlrpc/service.c:		CDEBUG(D_RPCTRACE, "Dropping req %p for failed obd %s\n",
lustre-release/lustre/ptlrpc/service.c:		CDEBUG(D_INFO, "armed %s at %+llds\n",
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_ADAPTTO,
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE, "got req x%llu\n", req->rq_xid);
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_NET, "got req %llu\n", request->rq_xid);
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/service.c:		CDEBUG(D_HA,
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_INFO, "Stopping thread %s #%u\n",
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_NET, "service thread %d (#%d) started\n", thread->t_id,
lustre-release/lustre/ptlrpc/service.c:			CDEBUG(D_RPCTRACE, "Posted buffers: %d\n",
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE, "%s: service thread [%p:%u] %d exiting: rc = %d\n",
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_INFO, "Stopping threads for service %s\n",
lustre-release/lustre/ptlrpc/service.c:		CDEBUG(D_INFO, "waiting for stopping-thread %s #%u\n",
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE, "%s[%d] started %d min %d max %d\n",
lustre-release/lustre/ptlrpc/service.c:			CDEBUG(D_INFO, "Waiting for creating thread %s #%d\n",
lustre-release/lustre/ptlrpc/service.c:		CDEBUG(D_INFO, "Creating thread %s #%d race, retry later\n",
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_RPCTRACE, "starting thread '%s'\n", thread->t_name);
lustre-release/lustre/ptlrpc/service.c:	CDEBUG(D_NET, "%s: tearing down\n", service->srv_name);
lustre-release/lustre/ptlrpc/recover.c:        CDEBUG(D_HA, "%s: starting recovery\n", obd2cli_tgt(imp->imp_obd));
lustre-release/lustre/ptlrpc/recover.c:	CDEBUG(D_HA, "import %p from %s committed %llu last %llu\n",
lustre-release/lustre/ptlrpc/recover.c:	CDEBUG(D_HA, "import %s of %s@%s abruptly disconnected: reconnecting\n",
lustre-release/lustre/ptlrpc/recover.c:                CDEBUG(D_HA, "setting import %s VALID\n",
lustre-release/lustre/ptlrpc/recover.c:		CDEBUG(D_HA, "%s: recovery started, waiting %u jiffies\n",
lustre-release/lustre/ptlrpc/recover.c:		CDEBUG(D_HA, "%s: recovery finished\n",
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(D_HA, "IR up\n");
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(D_HA, "IR down\n");
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(level == LUSTRE_IMP_FULL ? D_INFO : D_HA,
lustre-release/lustre/ptlrpc/pinger.c:		CDEBUG(D_HA,
lustre-release/lustre/ptlrpc/pinger.c:		CDEBUG(D_INFO, "next wakeup in %lld (%lld)\n",
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(D_HA, "adding pingable import %s->%s\n",
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(D_HA, "removing pingable import %s->%s\n",
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(D_HA, "Starting Ping Evictor\n");
lustre-release/lustre/ptlrpc/pinger.c:		CDEBUG(D_HA, "evicting all exports of obd %s older than %lld\n",
lustre-release/lustre/ptlrpc/pinger.c:				CDEBUG(D_HA, "Last request was at %lld\n",
lustre-release/lustre/ptlrpc/pinger.c:	CDEBUG(D_HA, "Exiting Ping Evictor\n");
lustre-release/lustre/ptlrpc/lproc_ptlrpc.c:			CDEBUG(D_INFO, "IR: %s is connecting to an obsoleted "
lustre-release/lustre/ptlrpc/lproc_ptlrpc.c:			CDEBUG(D_INFO, "IR: %s has already been connecting to "
lustre-release/lustre/ptlrpc/sec_gc.c:	CDEBUG(D_SEC, "added sec %p(%s)\n", sec, sec->ps_policy->sp_name);
lustre-release/lustre/ptlrpc/sec_gc.c:	CDEBUG(D_SEC, "del sec %p(%s)\n", sec, sec->ps_policy->sp_name);
lustre-release/lustre/ptlrpc/sec_gc.c:	CDEBUG(D_SEC, "hand over ctx %p(%u->%s)\n",
lustre-release/lustre/ptlrpc/sec_gc.c:		CDEBUG(D_SEC, "gc pick up ctx %p(%u->%s)\n",
lustre-release/lustre/ptlrpc/sec_gc.c:		CDEBUG(D_SEC, "sec %p(%s) has 0 gc time\n",
lustre-release/lustre/ptlrpc/sec_gc.c:	CDEBUG(D_SEC, "check on sec %p(%s)\n", sec, sec->ps_policy->sp_name);
lustre-release/lustre/ptlrpc/sec_gc.c:			CDEBUG(D_SEC, "deletion pending, start over\n");
lustre-release/lustre/ptlrpc/events.c:                CDEBUG(D_RPCTRACE, "truncate req %p rpc %d - %d+%d\n", req,
lustre-release/lustre/ptlrpc/events.c:        CDEBUG((ev->status == 0) ? D_NET : D_ERROR,
lustre-release/lustre/ptlrpc/events.c:        CDEBUG((ev->status == 0) ? D_NET : D_ERROR,
lustre-release/lustre/ptlrpc/events.c:		CDEBUG(D_INFO, "incoming req@%p x%llu msgsize %u\n",
lustre-release/lustre/ptlrpc/events.c:	CDEBUG(D_RPCTRACE, "peer: %s (source: %s)\n",
lustre-release/lustre/ptlrpc/events.c:		CDEBUG(D_INFO, "Buffer complete: %d buffers still posted\n",
lustre-release/lustre/ptlrpc/events.c:        CDEBUG((ev->status == 0) ? D_NET : D_ERROR,
lustre-release/lustre/ptlrpc/events.c:	CDEBUG(D_NET, "%s->%s\n", uuid->uuid, libcfs_id2str(*peer));
lustre-release/lustre/ptlrpc/events.c:        CDEBUG(D_NET, "My pid is: %x\n", pid);
lustre-release/lustre/ptlrpc/events.c:                CDEBUG (D_NET, "Can't init network interface: %d\n", rc);
lustre-release/lustre/ptlrpc/niobuf.c:	CDEBUG (D_INFO, "peer_id %s\n", libcfs_id2str(peer_id));
lustre-release/lustre/ptlrpc/niobuf.c:	CDEBUG(D_NET, "Sending %d bytes to portal %d, xid %lld, offset %u\n",
lustre-release/lustre/ptlrpc/niobuf.c:	CDEBUG(D_NET, "Transferring %u pages %u bytes via portal %d "
lustre-release/lustre/ptlrpc/niobuf.c:	CDEBUG(D_NET, "Setup %u bulk %s buffers: %u pages %u bytes, "
lustre-release/lustre/ptlrpc/niobuf.c:		CDEBUG(D_ADAPTTO, "No early reply support: flags=%#x "
lustre-release/lustre/ptlrpc/niobuf.c:                CDEBUG(D_HA, "sending ENODEV from failed obd %d\n",
lustre-release/lustre/ptlrpc/niobuf.c:		CDEBUG(D_HA, "muting rpc for failed imp obd %s\n",
lustre-release/lustre/ptlrpc/niobuf.c:		CDEBUG(D_NET, "Setup reply buffer: %u bytes, xid %llu"
lustre-release/lustre/ptlrpc/niobuf.c:        CDEBUG(D_NET, "LNetMEAttach: portal %d\n",
lustre-release/lustre/ptlrpc/ptlrpcd.c:						CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/nrs_fifo.c:		CDEBUG(D_RPCTRACE, "NRS start %s request from %s, seq: %llu"
lustre-release/lustre/ptlrpc/nrs_fifo.c:	CDEBUG(D_RPCTRACE, "NRS stop %s request from %s, seq: %llu\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_INFO, "msg %p buffer[%d] not present (count %d)\n",
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "%s lov_user_md %p:\n", msg, lum);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_magic: %#x\n", lum->lmm_magic);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_pattern: %#x\n", lum->lmm_pattern);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_object_id: %llu\n", lmm_oi_id(&lum->lmm_oi));
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_object_gr: %llu\n", lmm_oi_seq(&lum->lmm_oi));
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_stripe_size: %#x\n", lum->lmm_stripe_size);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_stripe_count: %#x\n", lum->lmm_stripe_count);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlmm_stripe_offset/lmm_layout_gen: %#x\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlmm_pool_name: %s\n", v3->lmm_pool_name);
lustre-release/lustre/ptlrpc/pack_generic.c:			CDEBUG(lvl, "\tlmm_pool_name: %s\n", v3->lmm_pool_name);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\ttarget list:\n");
lustre-release/lustre/ptlrpc/pack_generic.c:			CDEBUG(lvl, "\t\t%u\n", v3->lmm_objects[i].l_ost_idx);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "%s: bad magic: %x\n", msg, lum->lmm_magic);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "%s: lov_comp_md_v1 %p:\n", msg, lum);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlcm_magic: %#x\n", comp_v1->lcm_magic);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlcm_size: %#x\n", comp_v1->lcm_size);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlcm_layout_gen: %#x\n", comp_v1->lcm_layout_gen);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlcm_flags: %#x\n", comp_v1->lcm_flags);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlcm_entry_count: %#x\n\n", comp_v1->lcm_entry_count);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(lvl, "\tlcm_mirror_count: %#x\n\n", comp_v1->lcm_mirror_count);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tentry %d:\n", i);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlcme_id: %#x\n", ent->lcme_id);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlcme_flags: %#x\n", ent->lcme_flags);
lustre-release/lustre/ptlrpc/pack_generic.c:			CDEBUG(lvl, "\tlcme_timestamp: %llu\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlcme_extent.e_start: %llu\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlcme_extent.e_end: %llu\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlcme_offset: %#x\n", ent->lcme_offset);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(lvl, "\tlcme_size: %#x\n\n", ent->lcme_size);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_IOCTL, "swabbing lov_user_md v1\n");
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_IOCTL, "swabbing lov_user_md v3\n");
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_IOCTL, "swabbing lov_user_comp_md v1\n");
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_IOCTL, "swabbing lov_user_md\n");
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_IOCTL, "Invalid LOV magic %08x\n", lum->lmm_magic);
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_IOCTL, "swabbing lov_mds_md\n");
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_RPCTRACE, "niobuf_remote: offset=%llu, len=%d, flags=%x\n",
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_RPCTRACE, "obdo: o_valid = %#llx\n", valid);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: id = "DOSTID"\n", POSTID(&oa->o_oi));
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_parent_seq = %#llx\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_size = %lld\n", oa->o_size);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_mtime = %lld\n", oa->o_mtime);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_atime = %lld\n", oa->o_atime);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_ctime = %lld\n", oa->o_ctime);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_blocks = %lld\n", oa->o_blocks);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_grant = %lld\n", oa->o_grant);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_blksize = %d\n", oa->o_blksize);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_mode = %o\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_uid = %u\n", oa->o_uid);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_uid_h = %u\n", oa->o_uid_h);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_gid = %u\n", oa->o_gid);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_gid_h = %u\n", oa->o_gid_h);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_flags = %x\n", oa->o_flags);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_nlink = %u\n", oa->o_nlink);
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_checksum (o_nlink) = %u\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_parent_oid = %x\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_stripe_idx = %u\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_parent_ver = %x\n",
lustre-release/lustre/ptlrpc/pack_generic.c:		CDEBUG(D_RPCTRACE, "obdo: o_handle = %lld\n",
lustre-release/lustre/ptlrpc/pack_generic.c:	CDEBUG(D_RPCTRACE, "rmf_rcs: %d\n", *rc);
lustre-release/lustre/quota/qmt_dev.c:	CDEBUG(D_QUOTA, "%s: initiating QMT shutdown\n", qmt->qmt_svname);
lustre-release/lustre/quota/qsd_lock.c:		CDEBUG(D_QUOTA, "%s: losing global index lock for %s type\n",
lustre-release/lustre/quota/qsd_lock.c:	CDEBUG(D_QUOTA, "%s: update default quota setting from QMT.\n",
lustre-release/lustre/quota/qsd_lock.c:	CDEBUG(D_QUOTA,
lustre-release/lustre/quota/qsd_lib.c:		CDEBUG(D_QUOTA, "qqi reference count %u, repeat: %d\n",
lustre-release/lustre/quota/qsd_lib.c:		CDEBUG(D_QUOTA, "%s: no %s space accounting support: rc = %ld\n",
lustre-release/lustre/quota/qsd_lib.c:	CDEBUG(D_QUOTA, "%s: initiating QSD shutdown\n", qsd->qsd_svname);
lustre-release/lustre/quota/qsd_lib.c:	CDEBUG(D_QUOTA, "%s: QSD shutdown completed\n", qsd->qsd_svname);
lustre-release/lustre/quota/qmt_lock.c:		CDEBUG(D_QUOTA, DFID" initialized lvb\n", PFID(&qti->qti_fid));
lustre-release/lustre/quota/qmt_lock.c:		CDEBUG(D_QUOTA, "%s: nobody to notify\n", qmt->qmt_svname);
lustre-release/lustre/quota/qsd_writeback.c:			CDEBUG(D_QUOTA, "%s: skipping deferred update ver:"
lustre-release/lustre/quota/qsd_writeback.c:	CDEBUG(D_QUOTA, "%s: found deferred update record. "
lustre-release/lustre/quota/qsd_writeback.c:	CDEBUG(D_QUOTA, "%s: schedule update. global:%s, version:%llu\n",
lustre-release/lustre/quota/qsd_writeback.c:			CDEBUG(D_QUOTA, "%s: discarding glb update from glimpse"
lustre-release/lustre/quota/qsd_config.c:	CDEBUG(D_QUOTA, "processing quota parameter: fs:%s cfgstr:%s\n", fsname,
lustre-release/lustre/quota/lquota_disk.c:	CDEBUG(D_QUOTA, "look-up/create %sglobal idx file ("DFID")\n",
lustre-release/lustre/quota/lquota_disk.c:	CDEBUG(D_QUOTA, "lookup slave index file for %s\n",
lustre-release/lustre/quota/lquota_disk.c:	CDEBUG(D_QUOTA, "lookup/create slave index file for %s\n",
lustre-release/lustre/quota/qsd_entry.c:		CDEBUG(D_QUOTA, "%s: updating global index hardlimit: %llu, "
lustre-release/lustre/quota/qsd_entry.c:		CDEBUG(D_QUOTA, "%s: update granted to %llu for id %llu"
lustre-release/lustre/quota/qsd_reint.c:		CDEBUG_LIMIT(rc != -EAGAIN ? D_ERROR : D_QUOTA,
lustre-release/lustre/quota/qsd_reint.c:	CDEBUG(D_QUOTA, "%s: global quota lock successfully acquired, glb "
lustre-release/lustre/quota/qsd_reint.c:	CDEBUG(D_QUOTA, "%s: processing %d pages for %s index\n",
lustre-release/lustre/quota/qsd_reint.c:			CDEBUG(D_QUOTA, "%s: processing page %d/%d with %d "
lustre-release/lustre/quota/qsd_reint.c:	CDEBUG(D_QUOTA, "%s: reintegration process for fid "DFID" successfully "
lustre-release/lustre/quota/qsd_reint.c:	CDEBUG(D_QUOTA, "%s: Starting reintegration thread for "DFID"\n",
lustre-release/lustre/quota/qsd_reint.c:		CDEBUG(D_QUOTA, "%s: glb_ver:%llu/%llu,slv_ver:%llu/"
lustre-release/lustre/quota/qsd_reint.c:			CDEBUG(D_QUOTA, "%s: pending %s updates for type:%d.\n",
lustre-release/lustre/quota/qsd_reint.c:		CDEBUG(D_QUOTA, "%s: pending dqacq for type:%d.\n",
lustre-release/lustre/quota/lquota_entry.c:		CDEBUG(D_QUOTA, "Hash:%p has entries inuse: inuse:%lu, "
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_INFO, "echo device:%p is going to be freed, next = %p\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_INFO,
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_INFO, "No object exists, exiting...\n");
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_INFO, "ecl: %p, cookie: %#llx\n", ecl, ecl->el_cookie);
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_INFO, "echo_client %s write returns %d\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_INODE, "after getattr rc = %d, ma_valid = %#llx ma_lmm=%p\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_RPCTRACE, "Start creating object "DFID" %s %p\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_RPCTRACE, "End creating object "DFID" %s %p rc  = %d\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_INFO, "lookup %s in parent "DFID" %p\n", lname->ln_name,
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_RPCTRACE, "Start setattr object "DFID"\n",
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_RPCTRACE, "End setattr object "DFID"\n",
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_RPCTRACE, "Start getattr object "DFID"\n",
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_RPCTRACE, "End getattr object "DFID"\n",
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_RPCTRACE, "Start lookup object "DFID" %s %p\n",
lustre-release/lustre/obdecho/echo_client.c:		CDEBUG(D_RPCTRACE, "End lookup object "DFID" %s %p\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_RPCTRACE, "Start destroy object "DFID" %s %p\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_RPCTRACE, "End destroy object "DFID" %s %p\n",
lustre-release/lustre/obdecho/echo_client.c:	CDEBUG(D_INFO, "oa oid "DOSTID"\n", POSTID(&oa->o_oi));
lustre-release/lustre/obdecho/echo.c:		CDEBUG(D_PAGE, "$$$$ get page %p @ %llu for %d\n",
lustre-release/lustre/obdecho/echo.c:		CDEBUG(D_PAGE, "$$$$ use page %p, addr %p@%llu\n",
lustre-release/lustre/obdecho/echo.c:	CDEBUG(D_PAGE, "%s %d obdos with %d IOs\n",
lustre-release/lustre/obdecho/echo.c:	CDEBUG(D_PAGE, "%d pages allocated after prep\n",
lustre-release/lustre/obdecho/echo.c:		CDEBUG(D_PAGE, "reading %d obdos with %d IOs\n",
lustre-release/lustre/obdecho/echo.c:		CDEBUG(D_PAGE, "writing %d obdos with %d IOs\n",
lustre-release/lustre/obdecho/echo.c:	CDEBUG(D_PAGE, "%d pages remain after commit\n",
lustre-release/lustre/obdecho/echo.c:	CDEBUG(D_INFO, "%s: Create object "DOSTID"\n",
lustre-release/lustre/obdecho/echo.c:	CDEBUG(D_INFO, "%s: Destroy object "DOSTID"\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INFO, "Searching in lmv %p for uuid %s (activate=%d)\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INFO, "Target idx %d is %s conn %#llx\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INFO, "Found OBD %s=%s device %d (%p) type %s at LMV idx %d\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INFO, "OBD %p already %sactive!\n", obd,
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INFO, "Marking OBD %p %sactive\n", obd,
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_CONFIG, "connect to %s(%s) - %s, %s\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_CONFIG, "Connected to %s(%s) successfully (%d)\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_CONFIG, "Target uuid: %s. index %d\n", uuidp->uuid, index);
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_CONFIG, "Time to connect %s to %s\n",
lustre-release/lustre/lmv/lmv_obd.c:        CDEBUG(D_INFO, "Disconnected from %s(%s) successfully\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INFO, "%s: get path %s "DFID" rec: %llu ln: %u\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "CBDATA for "DFID"\n", PFID(fid));
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "CLOSE "DFID"\n", PFID(&op_data->op_fid1));
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "locate MDT %u parent "DFID"\n", *mds, PFID(fid));
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "CREATE name '%.*s' "DFID" on "DFID" -> mds #%x\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INODE, "Created - "DFID"\n", PFID(&op_data->op_fid2));
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "ENQUEUE on "DFID"\n", PFID(&op_data->op_fid1));
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "ENQUEUE on "DFID" -> mds #%u\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "GETATTR_NAME for %*s on "DFID" -> mds #%d\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INODE, "EARLY_CANCEL on "DFID"\n", PFID(fid));
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INODE,
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "LINK "DFID":%*s to "DFID"\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "MIGRATE "DFID"/%.*s\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "RENAME "DFID"/%.*s to "DFID"/%.*s\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "SETATTR for "DFID", valid 0x%x/0x%x\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INODE, "entry %.*s hash %#llx\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "unlink with fid="DFID"/"DFID" -> mds #%u\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_IOCTL, "Invalid client cookie %#llx\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_IOCTL, "Invalid key\n");
lustre-release/lustre/lmv/lmv_obd.c:			CDEBUG(D_OTHER, "can't lookup "DFID": rc = %d\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_IOCTL, "Invalid client cookie %#llx\n",
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INFO, "unpack lsm count %d, master %d hash_type %#x "
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INFO, "unpack fid #%d "DFID"\n", i,
lustre-release/lustre/lmv/lmv_obd.c:	CDEBUG(D_INODE, "Lock match for "DFID"\n", PFID(fid));
lustre-release/lustre/lmv/lmv_obd.c:			CDEBUG(D_HA, "%s: "DFID" is inaccessible: rc = %d\n",
lustre-release/lustre/lmv/lmv_obd.c:		CDEBUG(D_INFO,
lustre-release/lustre/lmv/lmv_fld.c:	CDEBUG(D_INODE, "FLD lookup got mds #%x for fid="DFID"\n",
lustre-release/lustre/lmv/lmv_intent.c:	CDEBUG(D_INODE, "REMOTE_INTENT with fid="DFID" -> mds #%u\n",
lustre-release/lustre/lmv/lmv_intent.c:		CDEBUG(D_SEC, "'%.*s' is security xattr to fetch for "
lustre-release/lustre/lmv/lmv_intent.c:		CDEBUG(D_INODE, "Revalidate slave "DFID" -> mds #%u\n",
lustre-release/lustre/lmv/lmv_intent.c:			CDEBUG(D_INODE, "slave "DFID" is still valid.\n",
lustre-release/lustre/lmv/lmv_intent.c:	CDEBUG(D_INODE, "OPEN_INTENT with fid1="DFID", fid2="DFID","
lustre-release/lustre/lmv/lmv_intent.c:	CDEBUG(D_INODE, "LOOKUP_INTENT with fid1="DFID", fid2="DFID
lustre-release/lustre/lmv/lmv_intent.c:	CDEBUG(D_INODE, "INTENT LOCK '%s' for "DFID" '%.*s' on "DFID"\n",
lustre-release/lustre/obdclass/lu_object.c:		CDEBUG(D_INODE, "Add %p/%p to site lru. hash: %p, bkt: %p\n",
lustre-release/lustre/obdclass/lu_object.c:        LU_CDEBUG_LINE = 512
lustre-release/lustre/obdclass/lu_object.c:        char lck_area[LU_CDEBUG_LINE];
lustre-release/lustre/obdclass/lu_object.c:	CDEBUG(D_INODE, "%ld objects cached, cache pressure %d\n",
lustre-release/lustre/obdclass/lu_object.c:	CDEBUG(D_INODE, "Shrink %lu objects\n", scv.nr_to_scan);
lustre-release/lustre/obdclass/lu_object.c:        CDEBUG(D_INFO, "Lustre LU module (%p).\n", &lu_keys);
lustre-release/lustre/obdclass/upcall_cache.c:	CDEBUG(D_OTHER, "destroy cache entry %p for key %llu\n",
lustre-release/lustre/obdclass/upcall_cache.c:		CDEBUG(D_OTHER, "%s: upcall for key %llu not expected\n",
lustre-release/lustre/obdclass/upcall_cache.c:		CDEBUG(D_OTHER, "%s: upcall for key %llu returned %d\n",
lustre-release/lustre/obdclass/upcall_cache.c:		CDEBUG(D_RPCTRACE, "%s: found uptodate entry %p (key %llu)"
lustre-release/lustre/obdclass/upcall_cache.c:	CDEBUG(D_OTHER, "%s: created upcall cache entry %p for key %llu\n",
lustre-release/lustre/obdclass/llog_obd.c:				CDEBUG(D_CONFIG, "%s: ctxt %d already set up\n",
lustre-release/lustre/obdclass/llog_obd.c:		CDEBUG(D_CONFIG, "obd %s ctxt %d is initialized\n",
lustre-release/lustre/obdclass/obdo.c:		CDEBUG(D_INODE, "valid %#llx, new time %lld/%lld\n",
lustre-release/lustre/obdclass/obdo.c:	CDEBUG(D_INODE, "src obdo "DOSTID" valid %#llx, dst obdo "DOSTID"\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_INFO, "Net %s\n", libcfs_net2str(*net));
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_IOCTL, "OBD: dev %d attached type %s with refcount %d\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_IOCTL, "finished setup of obd %s (uuid %s)\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_IOCTL, "detach on obd %s (uuid %s)\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_IOCTL, "%s: forcing exports to disconnect: %d/%d\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_INFO, "incref %s (%p) now %d\n", obd->obd_name, obd,
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_INFO, "Decref %s (%p) now %d - %s\n", obd->obd_name, obd,
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_CONFIG, "Add profile %s\n", prof);
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_CONFIG, "Del profile %s\n", prof);
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_HA, "lctl: invoked upcall %s %s %s, time %ldus\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_IOCTL, "processing cmd: %x\n", lcfg->lcfg_command);
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL,
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL, "removing mappings for uuid %s\n",
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL, "mountopt: profile %s osc %s mdc %s\n",
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL, "mountopt: profile %s\n",
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL, "changing lustre timeout from %d to %d\n",
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL, "changing lustre ldlm_timeout from %d to %d\n",
lustre-release/lustre/obdclass/obd_config.c:		CDEBUG(D_IOCTL, "marker %d (%#x) %.16s %s\n", marker->cm_step,
lustre-release/lustre/obdclass/obd_config.c:			CDEBUG(D_CONFIG, "Marker, inst_flg=%#x mark_flg=%#x\n",
lustre-release/lustre/obdclass/obd_config.c:					CDEBUG(D_CONFIG, "SKIP #%d\n",
lustre-release/lustre/obdclass/obd_config.c:					CDEBUG(D_CONFIG, "EXCLUDE %d\n",
lustre-release/lustre/obdclass/obd_config.c:			CDEBUG(D_CONFIG, "skipping %#x\n",
lustre-release/lustre/obdclass/obd_config.c:				CDEBUG(D_INFO, "For 1.8 interoperability, "
lustre-release/lustre/obdclass/obd_config.c:				CDEBUG(D_CONFIG,
lustre-release/lustre/obdclass/obd_config.c:				CDEBUG(D_CONFIG,
lustre-release/lustre/obdclass/obd_config.c:			CDEBUG(D_CONFIG, "cmd: %x marked EXCLUDED\n",
lustre-release/lustre/obdclass/obd_config.c:			CDEBUG(D_CONFIG, "cmd %x, instance name: %s\n",
lustre-release/lustre/obdclass/obd_config.c:				CDEBUG(D_CONFIG, "Adding net %s info to setup "
lustre-release/lustre/obdclass/obd_config.c:				CDEBUG(D_CONFIG, "skipping add_conn for %s\n",
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_INFO, "looking up llog %s\n", name);
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_CONFIG, "Processed log %s gen %d-%d (rc=%d)\n", name,
lustre-release/lustre/obdclass/obd_config.c:	CDEBUG(D_CONFIG, "Manual cleanup of %s (flags='%s')\n",
lustre-release/lustre/obdclass/class_obd.c:        CDEBUG(D_IOCTL, "device name %s\n", name);
lustre-release/lustre/obdclass/class_obd.c:                CDEBUG(D_IOCTL, "No device for name %s!\n", name);
lustre-release/lustre/obdclass/class_obd.c:        CDEBUG(D_IOCTL, "device name %s, dev %d\n", name, dev);
lustre-release/lustre/obdclass/class_obd.c:	CDEBUG(D_IOCTL, "cmd = %x\n", cmd);
lustre-release/lustre/obdclass/class_obd.c:                CDEBUG(D_IOCTL, "device name %s\n", data->ioc_inlbuf1);
lustre-release/lustre/obdclass/class_obd.c:                        CDEBUG(D_IOCTL, "No device for UUID %s!\n",
lustre-release/lustre/obdclass/class_obd.c:                CDEBUG(D_IOCTL, "device name %s, dev %d\n", data->ioc_inlbuf1,
lustre-release/lustre/obdclass/class_obd.c:                CDEBUG(D_HA, "%s: disabling committed-transno notification\n",
lustre-release/lustre/obdclass/class_obd.c:	CDEBUG(D_INFO, "OBD_OBJECT_EOF = %#llx\n", (__u64)OBD_OBJECT_EOF);
lustre-release/lustre/obdclass/class_obd.c:	CDEBUG(D_INFO, "u64val OBD_OBJECT_EOF = %#llx\n", u64val);
lustre-release/lustre/obdclass/class_obd.c:	CDEBUG(D_INFO, "u64val OBD_OBJECT_EOF = %#llx\n", u64val);
lustre-release/lustre/obdclass/class_obd.c:	CDEBUG((memory_leaked) ? D_ERROR : D_INFO,
lustre-release/lustre/obdclass/genops.c:			CDEBUG(D_INFO, "Loaded module '%s'\n", modname);
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_IOCTL, "Type %s already registered\n", name);
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_IOCTL, "Allocate new device %s (%p)\n",
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_INFO, "Release obd device %s obd_type name = %s\n",
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_CONFIG, "finishing cleanup of obd %s (%s)\n",
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_CACHE, "looking for null handle\n");
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_CACHE, "want a new connection\n");
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_INFO, "looking for export cookie %#llx\n", conn->cookie);
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_IOCTL, "destroying export %p/%s for %s\n", exp,
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_INFO, "GET export %p refcount=%d\n", exp,
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_INFO, "PUTting export %p : new refcount %d\n", exp,
lustre-release/lustre/obdclass/genops.c:		CDEBUG(D_IOCTL, "final put %p/%s\n",
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_IOCTL, "destroying import %p for %s\n", imp,
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_INFO, "import %p refcount=%d obd=%s\n", import,
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_INFO, "import %p refcount=%d obd=%s\n", imp,
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_INFO, "final put import %p\n", imp);
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_INFO, "lock = %p, export = %p, refs = %u\n",
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_INFO, "lock = %p, export = %p, refs = %u\n",
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_IOCTL, "connect: client %s, cookie %#llx\n",
lustre-release/lustre/obdclass/genops.c:	CDEBUG(D_IOCTL, "disconnect: cookie %#llx\n",
lustre-release/lustre/obdclass/genops.c:		/* need for safe call CDEBUG after obd_disconnect */
lustre-release/lustre/obdclass/genops.c:                        CDEBUG(D_HA,
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA, "%s: disconnecting export at %s (%p), "
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA, "disconnected export at %s (%p): rc %d\n",
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA, "OBD device %d (%p) has exports, "
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA, "OBD device %d (%p) has no exports\n",
lustre-release/lustre/obdclass/genops.c:		CDEBUG(D_HA, "%s: disconnect stale client %s@%s\n",
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA, "disconnecting dead export %p/%s; skipping\n",
lustre-release/lustre/obdclass/genops.c:        CDEBUG(D_HA, "disconnecting export %p/%s\n",
lustre-release/lustre/obdclass/genops.c:	/* need for safe call CDEBUG after obd_disconnect */
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA, "disconnected export %p/%s\n",
lustre-release/lustre/obdclass/genops.c:                CDEBUG(D_HA,"%s: can't disconnect NID '%s': no exports found\n",
lustre-release/lustre/obdclass/genops.c:	CDEBUG(debug_level, "%s: %s %p %s %s %d (%d %d %d) %d %d %d %d: "
lustre-release/lustre/obdclass/genops.c:		CDEBUG(D_DLMTRACE, "Get export %p: total %d\n", exp,
lustre-release/lustre/obdclass/genops.c:		CDEBUG(D_DLMTRACE, "Put export %p: total %d\n", exp,
lustre-release/lustre/obdclass/genops.c:			CDEBUG(D_RPCTRACE, "%s: modify RPC slot %u is allocated"
lustre-release/lustre/obdclass/genops.c:		CDEBUG(D_RPCTRACE, "%s: sleeping for a modify RPC slot "
lustre-release/lustre/obdclass/cl_io.c:		CDEBUG(D_VFSTRACE, "lock: %d: [%lu, %lu]\n",
lustre-release/lustre/obdclass/integrity.c:		CDEBUG(D_INFO, "%s: T10 checksum algorithm %s test error: "
lustre-release/lustre/obdclass/integrity.c:		CDEBUG(D_CONFIG, "%s: T10 checksum algorithm %s speed = %d "
lustre-release/lustre/obdclass/lustre_peer.c:		CDEBUG(D_INFO, "found uuid %s %s cnt=%d\n", uuid,
lustre-release/lustre/obdclass/lustre_peer.c:		CDEBUG(D_INFO, "add uuid %s %s\n", uuid, libcfs_nid2str(nid));
lustre-release/lustre/obdclass/lustre_peer.c:		CDEBUG(D_INFO, "Try to delete a non-existent uuid %s\n", uuid);
lustre-release/lustre/obdclass/lustre_peer.c:		CDEBUG(D_INFO, "del uuid %s %s/%d\n",
lustre-release/lustre/obdclass/lustre_peer.c:	CDEBUG(D_INFO, "check if uuid %s has %s.\n",
lustre-release/lustre/obdclass/lustre_handles.c:	CDEBUG(D_INFO, "added object %p with handle %#llx to hash\n",
lustre-release/lustre/obdclass/lustre_handles.c:	CDEBUG(D_INFO, "removing object %p with handle %#llx from hash\n",
lustre-release/lustre/obdclass/lustre_handles.c:			CDEBUG(D_INFO, "GET %s %p refcount=%d\n",
lustre-release/lustre/obdclass/jobid.c:		CDEBUG_LIMIT((rc == -ENOENT || rc == -EINVAL ||
lustre-release/lustre/obdclass/jobid.c:			CDEBUG(D_INFO, "jobid: duplicate found for PID=%u\n",
lustre-release/lustre/obdclass/jobid.c:		CDEBUG(D_INFO, "jobid: PID mapping established: %d->%s\n",
lustre-release/lustre/obdclass/jobid.c:		CDEBUG(D_INFO, "Freeing: %d->%s\n",
lustre-release/lustre/obdclass/jobid.c:	CDEBUG(D_INFO, "Clearing Jobid: %s\n", jobid);
lustre-release/lustre/obdclass/jobid.c:	CDEBUG(D_INFO, "%d items remain in jobID table\n",
lustre-release/lustre/obdclass/lu_ref.c:	CDEBUG(D_CONSOLE,
lustre-release/lustre/obdclass/lu_tgt_descs.c:	CDEBUG(D_OTHER, "add tgt %s to server %s (%d targets)\n",
lustre-release/lustre/obdclass/lu_tgt_descs.c:		CDEBUG(D_OTHER, "removing server %s\n",
lustre-release/lustre/obdclass/lu_tgt_descs.c:	CDEBUG(D_CONFIG, "tgt size: %d\n", ltd->ltd_tgts_size);
lustre-release/lustre/obdclass/lu_tgt_descs.c:		CDEBUG(D_OTHER, "recalc tgt %d usable=%d bavail=%llu ffree=%llu tgtppo=%llu tgtp=%llu svrppo=%llu svrp=%llu wt=%llu\n",
lustre-release/lustre/obdclass/kernelcomm.c:		CDEBUG(D_HSM, "Sent message rc=%d, fp=%p\n", rc, filp);
lustre-release/lustre/obdclass/kernelcomm.c:		CDEBUG(D_WARNING, "Kernelcomm: bad group %d\n", group);
lustre-release/lustre/obdclass/kernelcomm.c:	CDEBUG(D_HSM, "Added uid=%d fp=%p to group %d\n", uid, filp, group);
lustre-release/lustre/obdclass/kernelcomm.c:		CDEBUG(D_WARNING, "Kernelcomm: bad group %d\n", group);
lustre-release/lustre/obdclass/kernelcomm.c:			CDEBUG(D_HSM, "Removed uid=%d fp=%p from group %d\n",
lustre-release/lustre/obdclass/kernelcomm.c:		CDEBUG(D_WARNING, "Kernelcomm: bad group %d\n", group);
lustre-release/lustre/obdclass/kernelcomm.c:		CDEBUG(D_WARNING, "Kernelcomm: bad group %d\n", group);
lustre-release/lustre/obdclass/llog_osd.c:		CDEBUG(D_HA, "not reading header from 0-byte log\n");
lustre-release/lustre/obdclass/llog_osd.c:	CDEBUG(D_OTHER, "new record %x to "DFID"\n",
lustre-release/lustre/obdclass/llog_osd.c:			CDEBUG(D_OTHER, "modify record "DFID": idx:%u, "
lustre-release/lustre/obdclass/llog_osd.c:		CDEBUG(D_OTHER, "llog is getting too large (%u > %u) at %u "
lustre-release/lustre/obdclass/llog_osd.c:	CDEBUG(D_HA, "added record "DFID".%u, %u off%llu\n",
lustre-release/lustre/obdclass/llog_osd.c:	CDEBUG(D_OTHER, "looking for log index %u (cur idx %u off"
lustre-release/lustre/obdclass/llog_osd.c:	CDEBUG(D_OTHER, "looking for log index %u\n", prev_idx);
lustre-release/lustre/obdclass/llog_osd.c:		CDEBUG(D_INFO, "%s: llog exists with the same FID: "DFID
lustre-release/lustre/obdclass/llog_osd.c:		CDEBUG(D_INFO, "%s: llog FID: "DFID" obj %p doesn`t exist\n",
lustre-release/lustre/obdclass/llog_osd.c:	CDEBUG(D_CONFIG, "cat list: disk size=%d, read=%d\n",
lustre-release/lustre/obdclass/llog_osd.c:		CDEBUG(D_INODE, "can't write CATALOGS at index %d: rc = %d\n",
lustre-release/lustre/obdclass/debug.c:	CDEBUG(D_RPCTRACE,
lustre-release/lustre/obdclass/debug.c:	CDEBUG(D_RPCTRACE, "nb->page: index = %ld\n",
lustre-release/lustre/obdclass/debug.c:		CDEBUG(D_ERROR, "%s: id %#llx offset %llu off: %#llx != "
lustre-release/lustre/obdclass/debug.c:		CDEBUG(D_ERROR, "%s: id %#llx offset %llu id: %#llx != %#llx\n",
lustre-release/lustre/obdclass/debug.c:		CDEBUG(D_ERROR, "%s: id %#llx offset %llu end off: %#llx != "
lustre-release/lustre/obdclass/debug.c:		CDEBUG(D_ERROR, "%s: id %#llx offset %llu end id: %#llx != "
lustre-release/lustre/obdclass/lprocfs_status_server.c:	CDEBUG(D_CONFIG, "stat %p - data %p/%p\n", client_stat,
lustre-release/lustre/obdclass/lprocfs_status_server.c:	CDEBUG(D_INFO, "refcnt %d\n", atomic_read(&stat->nid_exp_ref_count));
lustre-release/lustre/obdclass/lprocfs_status_server.c:	CDEBUG(D_CONFIG, "using hash %p\n", obd->obd_nid_stats_hash);
lustre-release/lustre/obdclass/lprocfs_status_server.c:	CDEBUG(D_INFO, "Found stats %p for nid %s - ref %d\n",
lustre-release/lustre/obdclass/cl_page.c:        CDEBUG(D_PAGE, "%lu@"DFID" %p %lx %d\n",
lustre-release/lustre/obdclass/llog_cat.c:	CDEBUG(D_OTHER, "new plain log "DFID".%u of catalog "DFID"\n",
lustre-release/lustre/obdclass/llog_cat.c:	CDEBUG(D_INODE, "use next log\n");
lustre-release/lustre/obdclass/llog_cat.c:		CDEBUG_LIMIT(rc == -ENOSPC ? D_HA : D_ERROR,
lustre-release/lustre/obdclass/llog_cat.c:		CDEBUG(D_HA, "%s: cannot find llog for handle "DFID":%x"
lustre-release/lustre/obdclass/llog_cat.c:		CDEBUG(D_HA, "%s: llog "DFID":%x does not exist"
lustre-release/lustre/obdclass/llog_cat.c:	CDEBUG(D_HA, "processing log "DFID":%x at index %u of catalog "DFID"\n",
lustre-release/lustre/obdclass/llog_cat.c:		CDEBUG(D_INFO, "Add llog entry "DFID" size=%llu, tot=%llu\n",
lustre-release/lustre/obdclass/llog_cat.c:		CDEBUG(D_RPCTRACE, "catlog "DFID" first idx %u, last_idx %u\n",
lustre-release/lustre/obdclass/llog_cat.c:		CDEBUG(D_HA, "cancel plain log at index %u of catalog "DFID"\n",
lustre-release/lustre/obdclass/local_storage.c:	CDEBUG(D_OTHER, "create new object "DFID"\n",
lustre-release/lustre/obdclass/local_storage.c:		CDEBUG(D_INFO, "Found old llog lastid file\n");
lustre-release/lustre/obdclass/local_storage.c:		CDEBUG(D_INFO, "Found old lastid file for sequence %#llx\n",
lustre-release/lustre/obdclass/obd_mount_server.c:#define PRINT_CMD CDEBUG
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "register mount %p from %s\n", sb, name);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "deregister mount %p from %s\n", lmi->lmi_sb, name);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "get mount %p from %s, refs=%d\n", lmi->lmi_sb,
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "put mount %p from %s, refs=%d\n",
lustre-release/lustre/obdclass/obd_mount_server.c:		CDEBUG(D_MOUNT, "Last put of mount %p from %s\n",
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_CONFIG, "Start MGS service %s\n", LUSTRE_MGS_OBDNAME);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "Stop MGS service %s\n", LUSTRE_MGS_OBDNAME);
lustre-release/lustre/obdclass/obd_mount_server.c:		CDEBUG(D_CONFIG, "mgs %s not running\n", LUSTRE_MGS_OBDNAME);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "Set mgc disk for %s\n", lsi->lsi_lmd->lmd_dev);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "Unassign mgc disk\n");
lustre-release/lustre/obdclass/obd_mount_server.c:		CDEBUG(D_MOUNT, "lri reference count %u, repeat: %d\n",
lustre-release/lustre/obdclass/obd_mount_server.c:			CDEBUG(D_CONFIG, "Skipping add_conn for %s, rec %d\n",
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "Registration %s, fs=%s, %s, index=%04x, flags=%#x\n",
lustre-release/lustre/obdclass/obd_mount_server.c:			CDEBUG(D_HA, "%s: error registering with the MGS: "
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "starting target %s\n", lsi->lsi_svname);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "server put_super %s\n", tmpname);
lustre-release/lustre/obdclass/obd_mount_server.c:			CDEBUG(D_MOUNT, "stopping %s\n", obd->obd_name);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "umount -f\n");
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "Server sb, dev=%d\n", (int)sb->s_dev);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT,
lustre-release/lustre/obdclass/obd_mount_server.c:		CDEBUG(D_MOUNT, "%s already started\n", lsi->lsi_osd_obdname);
lustre-release/lustre/obdclass/obd_mount_server.c:	CDEBUG(D_MOUNT, "Found service %s on device %s\n",
lustre-release/lustre/obdclass/obd_mount.c:#define PRINT_CMD CDEBUG
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_TRACE, "lcfg %s %#x %s %s %s %s\n", cfgname,
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT, "Starting OBD %s (typ=%s)\n", obdname, type);
lustre-release/lustre/obdclass/obd_mount.c:			CDEBUG(D_MOUNT, "New MGS with live MGC\n");
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_MOUNT, "%s:Set MGC reconnect %d\n", mgcname, recov_bk);
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT, "Start MGC '%s'\n", mgcname);
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_MOUNT, "mgs NIDs %s.\n", ptr);
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_MOUNT, "MGC still has %d references.\n",
lustre-release/lustre/obdclass/obd_mount.c:			CDEBUG(D_MOUNT, "disconnect failed %d\n", rc);
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT, "Freeing lsi %p\n", lsi);
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT, "put %p %d\n", sb, atomic_read(&lsi->lsi_mounts));
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT, "dropping sb %p\n", sb);
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_MOUNT, "MGC still in use\n");
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT, "Check exclusion %s (%d) in %d of %s\n", svname,
lustre-release/lustre/obdclass/obd_mount.c:			CDEBUG(D_MOUNT, "ignoring exclude %.*s: type = %#x\n",
lustre-release/lustre/obdclass/obd_mount.c:	CDEBUG(D_MOUNT|D_VFSTRACE, "VFS Op: sb %p\n", sb);
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_MOUNT, "Mounting client %s\n", lmd->lmd_profile);
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_MOUNT, "Mounting server from %s\n", lmd->lmd_dev);
lustre-release/lustre/obdclass/obd_mount.c:		CDEBUG(D_SUPER, "Mount %s complete\n",
lustre-release/lustre/obdclass/cl_object.c:        CDEBUG(D_TRACE, "%p -> %p\n", o, top);
lustre-release/lustre/obdclass/cl_object.c:		CDEBUG(D_OTHER, "%d@%p\n", cle->ce_ref, cle);
lustre-release/lustre/obdclass/cl_object.c:                CDEBUG(D_OTHER, "%d@%p\n", cle->ce_ref, cle);
lustre-release/lustre/obdclass/cl_object.c:        CDEBUG(D_OTHER, "%d@%p\n", cle->ce_ref, cle);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "llogd body: %p\n", d);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_logid.lgl_oi.oi_fid: "DFID"\n",
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_logid.lgl_ogen: %#x\n", d->lgd_logid.lgl_ogen);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_ctxt_idx: %#x\n", d->lgd_ctxt_idx);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_llh_flags: %#x\n", d->lgd_llh_flags);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_index: %#x\n", d->lgd_index);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_saved_index: %#x\n", d->lgd_saved_index);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_len: %#x\n", d->lgd_len);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlgd_cur_offset: %#llx\n", d->lgd_cur_offset);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "llog header: %p\n", h);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_hdr.lrh_index: %#x\n", h->llh_hdr.lrh_index);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_hdr.lrh_len: %#x\n", h->llh_hdr.lrh_len);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_hdr.lrh_type: %#x\n", h->llh_hdr.lrh_type);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_timestamp: %#llx\n", h->llh_timestamp);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_count: %#x\n", h->llh_count);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_bitmap_offset: %#x\n", h->llh_bitmap_offset);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_flags: %#x\n", h->llh_flags);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_size: %#x\n", h->llh_size);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_cat_idx: %#x\n", h->llh_cat_idx);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_tail.lrt_index: %#x\n",
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tllh_tail.lrt_len: %#x\n",
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "lustre_cfg: %p\n", lcfg);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlcfg->lcfg_version: %#x\n", lcfg->lcfg_version);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlcfg->lcfg_command: %#x\n", lcfg->lcfg_command);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlcfg->lcfg_num: %#x\n", lcfg->lcfg_num);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlcfg->lcfg_flags: %#x\n", lcfg->lcfg_flags);
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlcfg->lcfg_nid: %s\n",
lustre-release/lustre/obdclass/llog_swab.c:	CDEBUG(D_OTHER, "\tlcfg->lcfg_bufcount: %d\n", lcfg->lcfg_bufcount);
lustre-release/lustre/obdclass/llog_swab.c:			CDEBUG(D_OTHER, "\tlcfg->lcfg_buflens[%d]: %d %s\n",
lustre-release/lustre/obdclass/llog_swab.c:		CDEBUG(D_CONFIG,
lustre-release/lustre/obdclass/linkea.c:		CDEBUG(D_INODE, "No enough space to hold linkea entry '"
lustre-release/lustre/obdclass/linkea.c:	CDEBUG(D_INODE, "New link_ea name '"DFID":%.*s' is added\n",
lustre-release/lustre/obdclass/linkea.c:	CDEBUG(D_INODE, "Old link_ea name '%.*s' is removed\n",
lustre-release/lustre/obdclass/linkea.c:	CDEBUG(D_INODE, "No enough space to hold the last linkea entry '"
lustre-release/lustre/obdclass/linkea.c:		CDEBUG(D_INODE, "Old link_ea name '%.*s' not found\n",
lustre-release/lustre/obdclass/cl_lock.c:	CDEBUG(level, "%s: %p (%p/%d) at %s():%d\n",
lustre-release/lustre/obdclass/llog.c:	CDEBUG(D_RPCTRACE, "Canceling %d records, first %d in log "DFID"\n",
lustre-release/lustre/obdclass/llog.c:			CDEBUG(D_RPCTRACE, "Catalog index %u already clear?\n",
lustre-release/lustre/obdclass/llog.c:		CDEBUG(D_OTHER, "index: %d last_index %d\n", index,
lustre-release/lustre/obdclass/llog.c:			CDEBUG(D_OTHER, "cur_offset %llu, chunk_offset %llu,"
lustre-release/lustre/obdclass/llog.c:			CDEBUG(D_OTHER, "processing rec 0x%p type %#x\n",
lustre-release/lustre/obdclass/llog.c:			CDEBUG(D_OTHER, "after swabbing, type=%#x idx=%d\n",
lustre-release/lustre/obdclass/llog.c:				CDEBUG(D_OTHER, "synced_idx: %d\n", synced_idx);
lustre-release/lustre/obdclass/llog.c:				CDEBUG(D_OTHER, "skipping lrh_index %d\n",
lustre-release/lustre/obdclass/llog.c:			CDEBUG(D_OTHER,
lustre-release/lustre/obdclass/llog.c:				CDEBUG(D_OTHER, "index: %d, lh_last_idx: %d "
lustre-release/lustre/obdclass/llog.c:	CDEBUG(D_OTHER, "Processing "DFID" flags 0x%03x startcat %d startidx %d first_idx %d last_idx %d\n",
lustre-release/lustre/obdclass/llog.c:		CDEBUG(D_RPCTRACE, "index %u : idx %u\n", index, idx);
lustre-release/lustre/obdclass/scrub.c:	CDEBUG(D_LFSCK, "%s: reset OI scrub file, old flags = "
lustre-release/lustre/obdclass/scrub.c:		CDEBUG(D_LFSCK, "%s: fail to load scrub file, "
lustre-release/lustre/obdclass/scrub.c:		CDEBUG(D_LFSCK, "%s: invalid scrub magic 0x%x != 0x%x\n",
lustre-release/lustre/obdclass/scrub.c:		CDEBUG(D_LFSCK, "%s: store scrub file: rc = %d\n",
lustre-release/lustre/obdclass/scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub checkpoint at pos %llu\n",
lustre-release/lustre/obdclass/scrub.c:			CDEBUG(D_WARNING, "%s: backup index "DFID": rc = %d\n",
lustre-release/lustre/obdclass/llog_ioctl.c:		CDEBUG(D_INFO, DFID":%x\n", PFID(fid), logid->lgl_ogen);
lustre-release/lustre/obdclass/llog_ioctl.c:			CDEBUG(D_IOCTL, "cannot find log "DFID":%x\n",
lustre-release/lustre/obdclass/llog_ioctl.c:		CDEBUG(D_IOCTL, "cannot find log "DFID":%x\n",
lustre-release/lustre/obdclass/llog_ioctl.c:		CDEBUG(D_IOCTL, "cannot destroy log "DFID":%x\n",
lustre-release/lustre/obdclass/llog_ioctl.c:		CDEBUG(D_INFO, "%s: invalid log name '%s': rc = %d\n",
lustre-release/lustre/obdclass/llog_test.c:	CDEBUG(D_INFO, "seeing record at index %d in log "DFID"\n",
lustre-release/lustre/obdclass/llog_test.c:	CDEBUG(D_OTHER, "record type %#x at index %d in log "DFID"\n",
lustre-release/lustre/obdclass/obd_cksum.c:	CDEBUG(D_INFO, "%s: checksum speed: crc %d, crc32c %d, adler %d, "
lustre-release/lustre/obdclass/dt_object.c:	CDEBUG(D_OTHER, "create new object "DFID"\n", PFID(fid));
lustre-release/lustre/obdclass/dt_object.c:		CDEBUG(D_INODE, "Can't set version, rc %d\n", rc);
lustre-release/lustre/obdclass/dt_object.c:		CDEBUG(D_INODE, "Can't get version, rc %d\n", rc);
lustre-release/lustre/osd-ldiskfs/osd_compat.c:	CDEBUG(D_INODE, "creating directory %.*s\n", (int)strlen(name), name);
lustre-release/lustre/osd-ldiskfs/osd_compat.c:			CDEBUG(D_CONFIG,
lustre-release/lustre/osd-ldiskfs/osd_compat.c:		CDEBUG(D_INFO,
lustre-release/lustre/osd-ldiskfs/osd_compat.c:	CDEBUG(D_INODE, "%s: create agent entry for %s: rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_compat.c:		CDEBUG(D_INODE, "%s: remove agent entry for %s: rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_quota_fmt.c:		CDEBUG(D_QUOTA, "Quota for id %u not found.\n", dqid);
lustre-release/lustre/osd-ldiskfs/osd_quota.c:		CDEBUG(D_QUOTA, "forced to ignore quota flags = %#x\n",
lustre-release/lustre/osd-ldiskfs/osd_io.c:	CDEBUG(D_OTHER, "realloc %u for %u (%u) pages\n",
lustre-release/lustre/osd-ldiskfs/osd_io.c:	CDEBUG(D_OTHER, "realloc %u for %u blocks\n",
lustre-release/lustre/osd-ldiskfs/osd_io.c:				CDEBUG(D_INODE,
lustre-release/lustre/osd-ldiskfs/osd_io.c:	CDEBUG(D_OTHER, "inode %lu: map %d pages from %lu\n",
lustre-release/lustre/osd-ldiskfs/osd_io.c:			CDEBUG(D_INODE, "Skipping [%d] == %d\n", i,
lustre-release/lustre/osd-ldiskfs/osd_io.c:			CDEBUG(D_OTHER,
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, "%s: FID "DFID" not in the id map cache\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, "%s: FID "DFID" not in the id map cache\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "no inode: ino = %u, rc = %ld\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "unmatched inode: ino = %u, oii_gen = %u, "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "stale inode: ino = %u\n", id->oii_ino);
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "no inode for FID: "DFID", ino = %u, rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "bad inode for FID: "DFID", ino = %u\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "unmatched inode for FID: "DFID", ino = %u, "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "stale inode for FID: "DFID", ino = %u\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_LFSCK, "%s: fail to check LMV EA, inode = %lu/%u,"
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_CACHE, "%s: synced OSD: rc = %d\n", osd_dt_dev(d)->od_svname,
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_HA, "%s: async commit OSD\n", osd_dt_dev(d)->od_svname);
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_IOCTL | D_HA, "set journal dev %lx rdonly\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_IOCTL | D_HA, "set dev %lx rdonly\n", (long)dev);
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_QUOTA, "%s: enforce quota on UID %u, GID %u"
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_QUOTA, "declare uid %d -> %d gid %d -> %d\n", uid,
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_QUOTA,
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, DFID" increase nlink %d\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG_LIMIT(fid_is_norm(lu_object_fid(&dt->do_lu)) ?
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, DFID" decrease nlink %d\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "Get version %#llx for inode %lu\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_INODE, "Set version %#llx (old %#llx) for inode %lu\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, DFID" set xattr '%s' with size %zu\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:				CDEBUG(D_LFSCK, "%s: index object "DFID
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_LFSCK | D_CONSOLE | D_WARNING,
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, "add "DFID" %u:%u to info %p\n", PFID(fid),
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_INODE, "parent %lu insert %s:%lu rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_handler.c:		CDEBUG(D_LFSCK, "%s: fail to reinsert the dirent, "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_LFSCK, "%s: fail to iget() for dirent "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_LFSCK, "%s: fail to start trans for dirent "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:				CDEBUG(D_LFSCK, "%s: expect remote agent "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_LFSCK, "%s: the target inode does not "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_LFSCK, "%s: fail to verify FID in the dirent, "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:			CDEBUG(D_LFSCK, "%s: fail to re-insert FID after "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:				CDEBUG(D_LFSCK, "%s: fail to set LMA for "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:				CDEBUG(D_LFSCK, "%s: fail to append IGIF "
lustre-release/lustre/osd-ldiskfs/osd_handler.c:	CDEBUG(D_CONFIG, "connect #%d\n", osd->od_connects);
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to start trans for scrub op %d "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to refresh OI map for scrub op %d "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to start trans for convert ff "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to convert ff "DFID": rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub prep, flags = 0x%x\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub post with result = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to read inode, ino# = %u: "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to checkpoint, pos = %llu: "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: joined in the OI scrub with flag %u: rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: OI scrub fail to init env: rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: OI scrub fail to scrub prep: rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub start, flags = 0x%x, pos = %llu\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:	CDEBUG(D_LFSCK, "%s: OI scrub: stop, pos = %llu: rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: index object "DFID" (%u/%u) registered\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:	CDEBUG(D_WARNING, "%s: restore index '%s' with "DFID": rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_INODE, "%s: child '%.*s' lacks inode: rc = -2\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: fail to get lma for init OI scrub: "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:			CDEBUG(D_LFSCK, "%s: fail to set LMA for init OI "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_LFSCK, "%s: cannot lookup child '%.*s': rc = %d\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:		CDEBUG(D_INODE, "%s: child '%.*s' lacks inode\n",
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:			CDEBUG(D_LFSCK, "%s: cannot add child '%.*s': "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:			CDEBUG(D_LFSCK, "recovered '%.*s' ["DFID"] from "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:			CDEBUG(D_LFSCK, "%s: cannot rename for '%.*s' "
lustre-release/lustre/osd-ldiskfs/osd_scrub.c:			CDEBUG(D_LFSCK,
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:	CDEBUG(D_NET, "send(%d) %d\n", tx->tx_resid, rc);
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:		CDEBUG(D_NET, "[%p] Error %d on write to %s ip %pI4h:%d\n",
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:	CDEBUG(D_NET, "Sending to %s ip %pI4h:%d\n",
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:        CDEBUG (D_NET, "Packet %p type %d, nob %d niov %d nkiov %d\n",
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:                        CDEBUG(D_NET,
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:        CDEBUG(D_NET, "sending %u bytes in %d frags to %s\n",
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:				CDEBUG(D_NET, "[%p] EOF from %s "
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:                        CDEBUG(D_NET,
lustre-release/lnet/klnds/socklnd/socklnd_cb.c:                        CDEBUG(D_NET, "peer_ni %s: conn race, retry later.\n",
lustre-release/lnet/klnds/socklnd/socklnd_lib.c:		CDEBUG(D_NET, "page %p + offset %x for %d\n",
lustre-release/lnet/klnds/socklnd/socklnd_lib.c:        CDEBUG(D_NET, "sk %p wspace %d low water %d conn %p%s%s%s\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG (D_NET, "peer_ni %s %p deleted\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:		CDEBUG(D_NET, "got peer_ni [%p] -> %s (%d)\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:		CDEBUG(D_NET, "peer_ni=%p iface=%p ksni_nroutes=%d\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:			CDEBUG(D_NET, "Binding %s %pI4h to %pI4h\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:			CDEBUG(D_NET, "Rebinding %s %pI4h from %pI4h "
lustre-release/lnet/klnds/socklnd/socklnd.c:				CDEBUG(D_NET, "scheduler[%d] has no threads. selected scheduler[%d]\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG(D_NET, "New conn %s p %d.x %pI4h -> %pI4h/%d"
lustre-release/lnet/klnds/socklnd/socklnd.c:                        CDEBUG(D_NET, "Not creating conn %s type %d: %s\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG (D_NET, "connection %p\n", conn);
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG(D_NET, "gw %s down\n", libcfs_nid2str(gw_nid));
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG(D_NET, "peer_ni %s %p, alive %lld secs ago, connect %d\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG(D_MALLOC, "before NAL cleanup: kmem %d\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:			CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/socklnd/socklnd.c:	CDEBUG(D_MALLOC, "after NAL cleanup: kmem %d\n",
lustre-release/lnet/klnds/socklnd/socklnd.c:		CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET, /* power of 2? */
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:		CDEBUG(D_NET, "got peer_ni [%p] -> %s (%d) version: %x\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "      %p msg_type %x cred %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "      %p snd %d q %d w %d rc %d dl %lld "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "conn[%d] %p [version %x] -> %s:\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   state %d nposted %d/%d cred %d o_cred %d "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   comms_err %d\n", conn->ibc_comms_error);
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   early_rxs:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   tx_noops:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   tx_queue_nocred:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   tx_queue_rsrvd:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   tx_queue:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   active_txs:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_CONSOLE, "   rxs:\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:			CDEBUG(D_NET, "scheduler[%d] has no threads. selected scheduler[%d]\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:		CDEBUG(D_NET, "peer_credits %u will result in send work "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:		CDEBUG(D_NET, "Closing conn -> %s, "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:		CDEBUG(D_NET, "Closing stale conn -> %s version: %x, "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "peer_ni %s %p, alive %lld secs ago\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:		CDEBUG(D_NET, "rx %d: %p %#llx(%#llx)\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:			CDEBUG(D_NET, "%s: Wait for failover\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:		CDEBUG(D_NET, "Another thread is allocating new "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "Allocate new FMR pool\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "Finalize %s pool\n", pool->po_owner->ps_name);
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "Initialize %s pool\n", ps->ps_name);
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:                CDEBUG(D_NET, "Another thread is allocating new "
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "%s pool exhausted, allocate new pool\n", ps->ps_name);
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "ps_pool_create took %lld ms to complete",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:        CDEBUG(D_MALLOC, "before LND base cleanup: kmem %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:			CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:        CDEBUG(D_MALLOC, "after LND base cleanup: kmem %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:        CDEBUG(D_MALLOC, "before LND net cleanup: kmem %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:			CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:        CDEBUG(D_MALLOC, "after LND net cleanup: kmem %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd.c:	CDEBUG(D_NET, "Configuration of device %s failed: rc = %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:        CDEBUG (D_NET, "Received %x[%d] from %s\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:        CDEBUG(D_NET, "rx %p conn %p\n", rx, conn);
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:			CDEBUG(D_NET, "fragnob %d < available page %d: with"
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:	CDEBUG(D_NET, "niov %d offset %d nob %d\n", nkiov, offset, nob);
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:			CDEBUG(D_NET, "fragnob %d < available page %d: with"
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:		CDEBUG(D_NET, "%s: posted enough\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "%s: no credits\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "%s: not using last credit\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "%s(%d): redundant or enough NOOP\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "Error %d posting transmit to %s\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "%s too soon\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                        CDEBUG(D_NET, "bound to port %hu\n", port);
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                        CDEBUG(D_NET, "bind to port %hu failed: %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:        CDEBUG(D_NET, "sending %d bytes in %d frags to %s\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "closing conn to %s\n", 
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:	CDEBUG(D_NET,"%s: active(%d), version(%x), status(%d)\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:			CDEBUG(D_NET, "Conn race %s\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:        CDEBUG(D_NET, "Accept %s\n", libcfs_nid2str(nid));
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                                CDEBUG(D_NET, "rejected by old version peer_ni %s: %x\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "connreq: %d\n", rc);
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET,"%s Addr resolved: %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:				CDEBUG(D_NET, "%s: connection bound to "\
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET,"%s Route resolved: %d\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                        CDEBUG(D_NET, "ESTABLISHED (passive): %s\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                        CDEBUG(D_NET, "ESTABLISHED(active): %s\n",
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:                CDEBUG(D_NET, "Ignore TIMEWAIT_EXIT event\n");
lustre-release/lnet/klnds/o2iblnd/o2iblnd_cb.c:		CDEBUG(D_NET, "%s established\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:		CDEBUG(D_NET, "setting quiesce_trigger %d\n", old_val);
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:	CDEBUG(D_INFO, "command %s, nid %d\n", command, nid);
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:		CDEBUG(D_ERROR, "invalid parameter\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:			CDEBUG(D_INFO, "take node %d down\n", nid);
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:			CDEBUG(D_INFO, "bring node %d up\n", nid);
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:			CDEBUG(D_ERROR, "invalid command %s\n", command);
lustre-release/lnet/klnds/gnilnd/gnilnd_sysctl.c:	CDEBUG(D_INFO, "proc_peer_state: reporting node_down %d, nid %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_MALLOC, "alloc fmablk 0x%p num %d msg_maxsize %d credits %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(rrc == GNI_RC_SUCCESS ? D_MALLOC : D_CONSOLE|D_NETERROR,
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_MALLOC, "mdd release fmablk 0x%p sz %u avail %d held %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_MALLOC, "fmablk %p free buffer %p mbox_size %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "conn %p smsg %p fmablk %p "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "conn %p smsg %p fmablk %p freeing SMSG mbox %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "conn %p smsg %p fmablk %p holding SMSG mbox %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "conn %p smsg %p fmablk %p release SMSG mbox %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "got dgram [%p] -> %s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_MALLOC|D_NETTRACE, "slab-alloced 'dgram': %lu at %p %s ndgrams"
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NETTRACE, "dgram 0x%p saw %s, cleaning it up\n", dgram,
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NETTRACE,
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "grc %d dgram 0x%p type %s post_state %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_MALLOC|D_NETTRACE, "slab-freed 'dgram': %lu at %p %s"
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NETTRACE, "dgram 0x%p type %s %s->%s cdm %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:				CDEBUG(D_NET, "adding peer's conn with nid %s "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "ready %#llx on device 0x%p\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "grc %d dgram 0x%p type %s post_state %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "ready %#llx on device %d->0x%p\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "waiting for connect to finish to %s rc %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "connect to %s failed: rc %d \n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_NET, "dropping completed connreq for %s peer 0x%p->%s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_NET, "Not creating duplicate connection to %s: %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "New conn 0x%p->%s dev %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "Clearing peer unlink %p\n",peer);
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "NAK to %s errno %d\n", libcfs_nid2str(dst_nid), error);
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "NAK to %s failed: rc %d \n", libcfs_nid2str(dst_nid), rc);
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_NET, "dropping NAK from %s; "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NETTRACE, "NAK to %s done\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:	CDEBUG(D_NET, "cleaning up dgram to %s, rc %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_NETTRACE, "checking dgram 0x%p type %s "
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_INFO, "waking up dgram mover thread\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_NET, "processing connect to %s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_NETERROR, "error %d: dev %d could not post wildcard datagram\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:		CDEBUG(D_INFO, "did %d timeout %lu next %lu jiffies %lu\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_INFO, "schedule timeout %ld (%lu sec)\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_conn.c:			CDEBUG(D_INFO, "awake after schedule\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(level,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(level,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(level, "%s 0x%p: 0x%16.16llx\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(mask, "0x%8.8x 0x%4.4x 0x%4.4x 0x%16.16llx"
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_INFO, "scheduling conn 0x%p caller %s:%d\n", conn, caller, line);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_INFO, "not scheduling conn 0x%p: %d caller %s:%d\n", conn, sched, caller, line);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NETTRACE, "not waking: %d\n", wake);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_MALLOC, "slab-freed 'tx_phys': %lu at %p.\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_MALLOC, "vfreed buffer2\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_MALLOC, "slab-freed 'tx': %lu at %p.\n", sizeof(*tx), tx);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_MALLOC, "slab-alloced 'tx': %lu at %p.\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_INFO, "cksum 0x%x for ptr 0x%p sz %zu\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_BUFFS, "calc cksum for kiov 0x%p nkiov %u offset %u nob %u, dump %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_BUFFS, "odd %d len %u offset %u nob %u\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_BUFFS, "cksum 0x%x (+0x%x) for addr 0x%p+%u len %u offset %u\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_BUFFS,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_BUFFS, "retsum 0x%x from cksum 0x%x\n", retsum, cksum);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_MALLOC, "slab-alloced 'tx->tx_phys': %lu at %p.\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "tx 0x%p buffer 0x%p map start kiov 0x%p+%u niov %d offset %u\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_BUFFS, "page 0x%p kiov_offset %u kiov_len %u nob %u "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_MALLOC, "slab-freed 'tx_phys': %lu at %p.\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NET, "no bytes to send, turning on timer for %lu\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "%s to conn %p for %s\n", kgnilnd_msgtype2str(tx->tx_msg.gnm_type),
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_MALLOC, "slab-alloced 'rx': %lu at %p.\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "consuming %p\n", conn);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_MALLOC, "slab-freed 'rx': %lu at %p.\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "sending msg type %d with %d bytes in %d frags to %s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "checking conn %p->%s timeout %d keepalive %d "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NET, "sending NOOP -> %s (%p idle %lu(%lu)) "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "checking peer 0x%p->%s for timeouts; interval %lus\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_WARNING, "%s conn timed out, will "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NET, "canceling %d tx for peer 0x%p->%s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NET, "starting connect to %s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_INFO, "We can release peer %s conn's from purgatory %lu\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_NET, "Reconnected to %s in %lds or admin forced detach, dropping "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_NET, "Dropping Held resource due to"
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_INFO, "schedule timeout %ld (%lu sec)\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_INFO, "awake after schedule\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "Set new min timeout %ld\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_INFO, "next check at %lu or in %d sec\n", next_check_time, p);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO, "SEND RDMA CQ %d empty processed %ld\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:						CDEBUG(D_NET, "Moving Conn %p from delay queue to ready_queue\n", conn);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_NET,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "scheduling conn 0x%p->%s for fmaq\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO, "SMSG RX CQ %d empty data %#llx "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "SMSG RX CQ error %#llx\n", event_data);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_NET, "SMSG RX CQID lookup %llu "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_NET, "SMSG RX: CQID %llu "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "sending NOOP -> %s (%p idle %lu(%d)) "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:	CDEBUG(D_NET, "sending regular msg: %p, type %s(0x%02x), cookie %#llx\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NET, "Rescheduling %p (more to do)\n", conn);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "resetting rdmaq bytes to %ld, deadline +%lu -> %lu, "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NETERROR, "Error %d TX data: TX %p tx_id %x nob %16llu physnop %8d buffertype %#8x MemHandle %#llx.%#llxx\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_INFO, "SMSG RX empty conn 0x%p\n", conn);
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_NETTRACE, "%s sent us CLOSE msg\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "tx 0x%p type 0x%02x will need to "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_NET, "tx 0x%p type 0x%02x will need to "
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:				CDEBUG(D_NETTRACE, "sending close with errno %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:		CDEBUG(D_INFO, "conn %p@%s for processing\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO, "awake after yeild\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO,
lustre-release/lnet/klnds/gnilnd/gnilnd_cb.c:			CDEBUG(D_INFO, "awake after schedule\n");
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET, "skipping prune of %p, "
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET, "Closing stale conn nid: %s "
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET, "Closing stale conn nid: %s"
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NET, "checking conn 0x%p for peer %s"
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "alloc cqid %u for conn 0x%p\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "created conn 0x%p ep_hndl 0x%p\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET, "Not connecting non-null ephandle found peer 0x%p->%s\n", peer,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "starting connect to %s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NETTRACE, "scheduling new connect\n");
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "destroying conn %p ephandle %p error %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NETTRACE, "peer 0x%p->%s ting %d conn 0x%p, rst %d error %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET, "peer 0x%p->%s last_alive %lld (%llds ago)\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NET, "closing conn to %s: error %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NETERROR, "Error someone scheduled us after we were "
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NETERROR, "Error someone scheduled us after we were "
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(level, "Closed conn 0x%p->%s (errno %d,"
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "conn %p src %s dst %s smsg %p acquired"
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "peer 0x%p->%s -> NIC 0x%x\n", peer,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "peer %s %p deleted\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "conn %p peer %p dev %p\n", conn, peer,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NET, "peer %p->%s purg_conn %p@%s mdd_list #tx %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "peer %s can reconnect at %lu interval %lu\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NET, "got peer [%p] -> %s c %d (%d)\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "unlinking peer 0x%p->%s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(D_NET, "found peer %p (%s) at index %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(D_NET, "no gni peer at index %d\n", index);
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "peer 0x%p->%s connecting %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET, "Waiting on %d peers %d closes %d detaches\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:				CDEBUG(D_NET, "++conn[%p] -> %s (%d)\n", conn,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NETTRACE, "peer 0x%p->%s when %lld\n", peer,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "NIC %x -> NID %d\n", dev->gnd_host_id, dev->gnd_nid);
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_MALLOC, "initial kmem %d\n", pkmem);
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:		CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET, /* power of 2? */
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_MALLOC, "after NAL cleanup: kmem %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_NET, "adding net %p nid=%s on dev %d \n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_MALLOC, "before NAL cleanup: kmem %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd.c:			CDEBUG(((i & (-i)) == i) ? D_WARNING : D_NET,
lustre-release/lnet/klnds/gnilnd/gnilnd.c:	CDEBUG(D_MALLOC, "after NAL cleanup: kmem %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_proc.c:		CDEBUG(D_BUFFS, "case %d loop %d src %d dest %d nob %d niov %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_proc.c:	CDEBUG(D_NET, "freeing %d pages\n", i);
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:	CDEBUG(D_INFO, "%s: bumping all timeouts by %ds\n", reason, nap_time);
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:			CDEBUG(D_INFO,
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_INFO, "%s: All threads paused!\n", reason);
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:			CDEBUG(D_INFO,
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_INFO, "%s: All threads awake!\n", reason);
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "will try to clear up %d ready_conns\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:	CDEBUG(D_NET, "about to release %d purgatory entries\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:	       CDEBUG(D_NET, "trigger %d reset %d to_bump %d pause %d\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:				CDEBUG(D_INFO, "Waiting for hardware quiesce "
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		 CDEBUG(D_NET, "requesting thread pause\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:	    CDEBUG(D_NET, "thread pause already underway\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "initiating thread pause\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "thread pause bypassed because of shutdown\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "requesting timeout bump by %lld msecs\n", msecs);
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "timeout bump bypassed because of shutdown\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "requesting stack reset\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NET, "stack reset bypassed because of shutdown\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:				CDEBUG(D_INFO, "ec_node_available\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:				CDEBUG(D_INFO, "ec_node_failed\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:					CDEBUG(D_ERROR,
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:				CDEBUG(D_INFO, "ec_node_unavailable\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:					CDEBUG(D_INFO, "ignoring "
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:				CDEBUG(D_INFO, "unknown event\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:			CDEBUG(D_INFO,"kgnilnd_rca() reporting nid %d %s\n",
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:	CDEBUG(D_INFO, "done\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_ERROR, "krca_wakeup_wait_event failed\n");
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:		CDEBUG(D_NETERROR, "krca_get_sysnodes failed %d\n", ret);
lustre-release/lnet/klnds/gnilnd/gnilnd_stack.c:	CDEBUG(D_NET, "nid %d rc %d (0=up)\n", nid, rc);
lustre-release/lnet/selftest/rpc.c:	CDEBUG(D_NET, "Adding service: id %d, name %s\n", id, sv->sv_name);
lustre-release/lnet/selftest/rpc.c:	CDEBUG(D_NET,
lustre-release/lnet/selftest/rpc.c:		CDEBUG(D_NET,
lustre-release/lnet/selftest/rpc.c:			CDEBUG(D_NET, "waiting for %d posted buffers to unlink\n",
lustre-release/lnet/selftest/rpc.c:			CDEBUG(D_INFO,
lustre-release/lnet/selftest/rpc.c:	CDEBUG(D_NET, "Aborting service: id %d, name %s\n",
lustre-release/lnet/selftest/rpc.c:	CDEBUG(D_NET, "Shutting down service: id %d, name %s\n",
lustre-release/lnet/selftest/rpc.c:	CDEBUG_LIMIT(status == 0 ? D_NET : D_NETERROR,
lustre-release/lnet/selftest/rpc.c:	CDEBUG_LIMIT((status == 0) ? D_NET : D_NETERROR,
lustre-release/lnet/selftest/rpc.c:	CDEBUG(D_NET,
lustre-release/lnet/selftest/rpc.c:	CDEBUG(D_NET, "Posting RPC: peer %s, service %d, timeout %d\n",
lustre-release/lnet/selftest/framework.c:        CDEBUG (D_NET,
lustre-release/lnet/selftest/framework.c:	CDEBUG(D_NET, "Outgoing framework RPC done: "
lustre-release/lnet/selftest/framework.c:	CDEBUG(D_NET, "Reserved %d buffers for test %s\n",
lustre-release/lnet/selftest/framework.c:		CDEBUG(D_NET, "Batch already active: %llu (%d)\n",
lustre-release/lnet/selftest/framework.c:		CDEBUG(D_NET, "Batch %llu inactive\n", tsb->bat_id.bat_id);
lustre-release/lnet/selftest/framework.c:        CDEBUG (rc == 0 ? D_NET : D_WARNING,
lustre-release/lnet/selftest/conctl.c:		CDEBUG(D_NET, "LST no active session\n");
lustre-release/lnet/selftest/brw_test.c:	CDEBUG(reply->brw_status ? D_WARNING : D_NET,
lustre-release/lnet/selftest/brw_test.c:		CDEBUG(D_NET, "Transferred %d pages bulk data %s %s\n",
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Group %s is busy\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group: %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Group %s is busy\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Group %s is busy\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group: %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Group %s is busy\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group: %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Group %s is busy\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't create transaction: %d\n", rc);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Batch %s already exists\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find batch %s\n", name);
lustre-release/lnet/selftest/console.c:                        CDEBUG(D_NET, "Can't find specified test in batch\n");
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find batch %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find batch %s\n", name);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Failed to add test %s, "
lustre-release/lnet/selftest/console.c:		CDEBUG(D_NET, "Can't find batch %s\n", name);
lustre-release/lnet/selftest/console.c:		CDEBUG(D_NET, "Can't change running batch %s\n", name);
lustre-release/lnet/selftest/console.c:		CDEBUG(D_NET, "can't find group %s\n", name);
lustre-release/lnet/selftest/console.c:	CDEBUG(D_NET, "Group %s has no ACTIVE nodes\n", name);
lustre-release/lnet/selftest/console.c:		CDEBUG(D_NET, "Failed to add test %d to batch %s\n", type,
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find batch: %s\n", name);
lustre-release/lnet/selftest/console.c:                        CDEBUG(D_NET, "Can't find test: %d\n", testidx);
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Can't find group %s\n", grp_name);
lustre-release/lnet/selftest/console.c:                        CDEBUG((rc == -ENOMEM) ? D_ERROR : D_NET,
lustre-release/lnet/selftest/console.c:                CDEBUG(D_NET, "Out of memory\n");
lustre-release/lnet/selftest/conrpc.c:	CDEBUG(D_NET, "Transaction %s started\n",
lustre-release/lnet/selftest/conrpc.c:        CDEBUG(D_NET, "Transaction %s stopped: %d\n",
lustre-release/lnet/selftest/conrpc.c:        CDEBUG(D_NET, "transaction %s : success %d, failure %d, total %d, "
lustre-release/lnet/selftest/conrpc.c:	CDEBUG(D_NET, "Transaction %s destroyed with %d pending RPCs\n",
lustre-release/lnet/selftest/conrpc.c:                        CDEBUG(D_NET, "Condition error while creating RPC "
lustre-release/lnet/selftest/conrpc.c:        CDEBUG(D_NET, "Ping %d nodes in session\n", count);
lustre-release/lnet/selftest/conrpc.c:			CDEBUG(D_NET, "Session closed, wakeup transaction %s\n",
lustre-release/lnet/selftest/ping_test.c:                CDEBUG (D_NET, "Ping test finished OK.\n");
lustre-release/lnet/selftest/ping_test.c:	CDEBUG(D_NET, "%d reply in %llu nsec\n", reply->pnr_seq,
lustre-release/lnet/selftest/ping_test.c:	CDEBUG(D_NET, "Get ping %d from %s\n",
lustre-release/lnet/lnet/lo.c:	CDEBUG (D_NET, "shutdown\n");
lustre-release/lnet/lnet/lib-msg.c:	CDEBUG(D_NET, "%s->%s:%s:%s - queuing msg (%p) for resend\n",
lustre-release/lnet/lnet/lib-msg.c:		CDEBUG(D_NET, "msg %s->%s is a recovery ping. retry# %d\n",
lustre-release/lnet/lnet/lib-msg.c:		CDEBUG(D_NET, "msg %s->%s requested no resend. retry# %d\n",
lustre-release/lnet/lnet/lib-msg.c:	CDEBUG(D_NET, "health check: %s->%s: %s: %s\n",
lustre-release/lnet/lnet/lib-msg.c:			CDEBUG(D_NET, "md 0x%p already unlinked\n", md);
lustre-release/lnet/lnet/lib-msg.c:		CDEBUG(D_NET, "msg %p not committed for send or receive\n",
lustre-release/lnet/lnet/lib-msg.c:			CDEBUG(D_NET, "msg %p status %d cannot retry\n", msg,
lustre-release/lnet/lnet/lib-msg.c:		CDEBUG(D_NET, "Msg %p is in inconsistent state, don't perform health "
lustre-release/lnet/lnet/lib-msg.c:	CDEBUG(D_NET, "health check = %d, status = %d, hstatus = %d\n",
lustre-release/lnet/lnet/lib-msg.c:	CDEBUG(D_NET, "src %s(%s)->dst %s: %s simulate health error: %s\n",
lustre-release/lnet/lnet/router.c:		CDEBUG(D_NET, "Set routes down for gw %s because %s %d\n",
lustre-release/lnet/lnet/router.c:	CDEBUG(D_NET, "Discovery is disabled. Processing reply for gw: %s\n",
lustre-release/lnet/lnet/router.c:	CDEBUG(D_NET, "%s: Router discovery failed %d\n",
lustre-release/lnet/lnet/router.c:	CDEBUG(D_NET, "Add route: remote net %s hops %d priority %u gw %s\n",
lustre-release/lnet/lnet/router.c:	CDEBUG(D_NET, "Del route: net %s : gw %s\n",
lustre-release/lnet/lnet/router.c:			CDEBUG(D_NET, "Expected to find an lpni for %s, but non found\n",
lustre-release/lnet/lnet/router.c:		CDEBUG(D_NET, "discover %s, cpt = %d\n",
lustre-release/lnet/lnet/router.c:	CDEBUG (D_NET, "%s notifying %s: %s\n",
lustre-release/lnet/lnet/router.c:		CDEBUG(D_NET, "Auto-down disabled\n");
lustre-release/lnet/lnet/router.c:		CDEBUG(D_NET, "%s not found\n", libcfs_nid2str(nid));
lustre-release/lnet/lnet/lib-eq.c:		CDEBUG(D_NET, "Event equeue (%d: %d) busy on destroy.\n",
lustre-release/lnet/lnet/lib-eq.c:	CDEBUG(D_INFO, "event: %p, sequence: %lu, eq->size: %u\n",
lustre-release/lnet/lnet/lib-eq.c:		CDEBUG(D_NET, "Event Queue Overflow: eq seq %lu ev seq %lu\n",
lustre-release/lnet/lnet/lib-move.c:			CDEBUG(D_NET, "msg %p to %s canceled and will not be resent\n",
lustre-release/lnet/lnet/lib-move.c:			CDEBUG(D_NET, "%s ni_is_pref = %d\n",
lustre-release/lnet/lnet/lib-move.c:			CDEBUG(D_NET, "%s c:[%d, %d], s:[%d, %d]\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "no peer_ni found on peer net %s\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "sd_best_lpni = %s\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "compare ni %s [c:%d, d:%d, s:%d] with best_ni %s [c:%d, d:%d, s:%d]\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "selected best_ni %s\n",
lustre-release/lnet/lnet/lib-move.c:			CDEBUG(D_NET, "rspt_next_hop_nid = %s\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "TRACE: %s(%s:%s) -> %s(%s:%s) %s : %s try# %d\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "Setting preferred local NID %s on NMR peer %s\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "msg %p delayed. %s pending discovery\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "Source %s%s to %s %s %s destination\n",
lustre-release/lnet/lnet/lib-move.c:				CDEBUG(D_NET,
lustre-release/lnet/lnet/lib-move.c:			CDEBUG(D_NET, "resending %s->%s: %s recovery %d try# %d\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "attempting to recover local ni: %s\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "Received event: %d status: %d\n", event->type,
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "%s recovery ping unlinked\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "%s recovery message sent %s:%d\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "%s: Reply from %s of length %d/%d into md %#llx\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET,
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "%s: ACK from %s into md %#llx\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "TRACE: %s(%s) <- %s : %s - %s\n",
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "%s, src %s, dst %s: Dropping %s to simulate"
lustre-release/lnet/lnet/lib-move.c:		CDEBUG(D_NET, "Resuming delayed PUT from %s portal %d "
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "LNetPut -> %s\n", libcfs_id2str(target));
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "%s: Reply from %s md %p\n",
lustre-release/lnet/lnet/lib-move.c:	CDEBUG(D_NET, "LNetGet -> %s\n", libcfs_id2str(target));
lustre-release/lnet/lnet/acceptor.c:	CDEBUG(D_NET, "Accept %s from %pI4h\n",
lustre-release/lnet/lnet/acceptor.c:	CDEBUG(D_NET, "Acceptor stopping\n");
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%p nid %s\n", lpni, libcfs_nid2str(lpni->lpni_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%p net %s\n", lpn, libcfs_net2str(lpn->lpn_net_id));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%p net %s\n", lpn, libcfs_net2str(lpn->lpn_net_id));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%p nid %s\n", lp, libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%p nid %s\n", lp, libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID %s\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s\n", libcfs_nid2str(peer->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID %s flags %#x: %d\n",
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_WARNING,
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s nid %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s nid %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s nid %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "NID %s primary NID %s rc %d\n", libcfs_nid2str(nid),
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID %s flags %#x\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID flags %#x: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID %s flags %#x: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s: %d\n", libcfs_nid2str(nid), rc);
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "peer %s was not configured\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "prim_nid %s is not primary for peer %s\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "multi-rail state mismatch for peer %s\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "prim_nid %s is not primary for peer %s\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%p nid %s\n", lpni, libcfs_nid2str(lpni->lpni_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "Queue peer %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "Discovery complete. Dequeue peer %s\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "sending pending message %s to target %s\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Push Put from unknown %s (source %s). Ignoring...\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Push Put error %d from %s (source %s)\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Corrupted Push from %s\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Peer %s has discovery disabled\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Peer %s has discovery enabled\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Truncated Push from %s (%d nids)\n",
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET, "Ping/Push race from %s: %u vs %u\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Cannot allocate Push buffer for %s %u\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "Received Push %s %u\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Discovery attempt # %d\n", count);
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "non-blocking discovery\n");
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s NID %s: %d. %s\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s ev->status %d\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Ping Reply error %d from %s (source %s)\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Corrupted Ping Reply from %s: %d\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Peer %s has discovery enabled\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Peer %s has discovery disabled\n",
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET, "peer %s(%p) is MR\n",
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET,
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET,
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET, "peer %s(%p) is MR capable\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Truncated Reply from %s (%d nids)\n",
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET, "peer %s: seq# got %u have %u. peer rebooted?\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s data present %u. state = 0x%x\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "%s Send to %s: %d\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Ping Unlink for message to peer %s\n",
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_NET, "Push Unlink for message to peer %s\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "Received event: %d\n", event->type);
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s (%p): %d\n", libcfs_nid2str(lp->lp_primary_nid), lp, rc);
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s\n", libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s(%p): %d. state = 0x%x\n", libcfs_nid2str(lp->lp_primary_nid), lp, rc,
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s:%d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s\n", libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s: %d\n", libcfs_nid2str(lp->lp_primary_nid), rc);
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s\n", libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s\n", libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s(%p): %d\n", libcfs_nid2str(lp->lp_primary_nid), lp, rc);
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "Discovery error %s: %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "peer %s\n", libcfs_nid2str(lp->lp_primary_nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "woken: %d\n", rc);
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "started\n");
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET, "peer %s(%p) state %#x\n",
lustre-release/lnet/lnet/peer.c:			CDEBUG(D_NET, "peer %s(%p) state %#x rc %d\n",
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "stopping\n");
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "stopped\n");
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "discovery start: %d\n", rc);
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_NET, "discovery stopped\n");
lustre-release/lnet/lnet/peer.c:		CDEBUG(D_WARNING, "No peer %s\n", libcfs_nid2str(nid));
lustre-release/lnet/lnet/peer.c:	CDEBUG(D_WARNING, "%-24s %4d %5s %5d %5d %5d %5d %5d %ld\n",
lustre-release/lnet/lnet/lib-ptl.c:	CDEBUG(D_NET, "Incoming %s index %x from %s of "
lustre-release/lnet/lnet/lib-ptl.c:	CDEBUG(D_NET, "Request from %s of length %d into portal %d "
lustre-release/lnet/lnet/lib-ptl.c:		CDEBUG(D_NET,
lustre-release/lnet/lnet/lib-ptl.c:			CDEBUG(D_NET, "Resuming delayed PUT from %s portal %d "
lustre-release/lnet/lnet/lib-ptl.c:	CDEBUG(D_NET, "Setting portal %d lazy\n", portal);
lustre-release/lnet/lnet/lib-ptl.c:			CDEBUG(D_NET, "clearing portal %d lazy\n", portal);
lustre-release/lnet/lnet/config.c:		CDEBUG(D_WARNING, "%s\n", ltb->ltb_text);
lustre-release/lnet/lnet/config.c:	CDEBUG(D_WARNING, "%d allocated\n", lnet_tbnob);
lustre-release/lnet/lnet/config.c:	CDEBUG(D_NET, "gateway %s, priority %d, nob %d\n", str, *priority, nob);
lustre-release/lnet/lnet/lib-md.c:		CDEBUG(D_NET, "Queueing unlink of md %p\n", md);
lustre-release/lnet/lnet/lib-md.c:	CDEBUG(D_NET, "Unlinking md %p\n", md);
lustre-release/lnet/lnet/lib-socket.c:			CDEBUG(D_NET, "Port %d already in use\n", local_port);
lustre-release/lnet/lnet/lib-socket.c:	CDEBUG_LIMIT(*fatal ? D_NETERROR : D_NET,
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET, "can't find valid message type bits %x\n",
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET,
lustre-release/lnet/lnet/net_fault.c:	CDEBUG(D_NET, "Added drop rule: src %s, dst %s, rate %d, interval %d\n",
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET, "Remove drop rule: src %s->dst: %s (1/%d, %d)\n",
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET, "set to drop all messages\n");
lustre-release/lnet/lnet/net_fault.c:			CDEBUG(D_NET, "Drop Rule %s->%s: next drop : %lld\n",
lustre-release/lnet/lnet/net_fault.c:			CDEBUG(D_NET, "Drop Rule %s->%s: next drop: %lu\n",
lustre-release/lnet/lnet/net_fault.c:			CDEBUG(D_NET, "Delay Rule %s->%s: next delay : %lld\n",
lustre-release/lnet/lnet/net_fault.c:			CDEBUG(D_NET, "Delay Rule %s->%s: next delay: %lu\n",
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET,
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET, "delay latency cannot be zero\n");
lustre-release/lnet/lnet/net_fault.c:	CDEBUG(D_NET, "Added delay rule: src %s, dst %s, rate %d\n",
lustre-release/lnet/lnet/net_fault.c:		CDEBUG(D_NET, "Remove delay rule: src %s->dst: %s (1/%d, %d)\n",
lustre-release/lnet/lnet/api-ni.c:	CDEBUG(D_NET, "%s LND registered\n", libcfs_lnd2str(lnd->lnd_type));
lustre-release/lnet/lnet/api-ni.c:	CDEBUG(D_NET, "%s LND unregistered\n", libcfs_lnd2str(lnd->lnd_type));
lustre-release/lnet/lnet/api-ni.c:		CDEBUG(D_NET, "Still waiting for ping data MD to unlink\n");
lustre-release/lnet/lnet/api-ni.c:	CDEBUG(D_NET, "nnis %d success\n", nnis);
lustre-release/lnet/lnet/api-ni.c:	CDEBUG(D_NET, "nnis %d error %d\n", nnis, rc);
lustre-release/lnet/lnet/api-ni.c:		CDEBUG(D_NET, "Still waiting for ping data MD to unlink\n");
lustre-release/lnet/lnet/api-ni.c:				CDEBUG(D_WARNING,
lustre-release/lnet/lnet/api-ni.c:			CDEBUG(D_LNI, "Removed LNI %s\n",
lustre-release/lnet/lnet/api-ni.c:	CDEBUG(D_LNI, "Added LNI %s [%d/%d/%d/%d]\n",
lustre-release/lnet/lnet/api-ni.c:	CDEBUG(D_OTHER, "refs %d\n", the_lnet.ln_refcount);
lustre-release/lnet/lnet/api-ni.c:		CDEBUG(D_NET, "Manually setting healthv to %d for %s:%s. all = %d\n",
lustre-release/lnet/lnet/api-ni.c:		CDEBUG(D_NET, "poll %d(%d %d)%s\n", rc2,
